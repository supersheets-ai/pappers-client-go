/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Sanction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sanction{}

// Sanction struct for Sanction
type Sanction struct {
	// Description de la sanction.
	Description *string `json:"description,omitempty"`
	// Autorité ayant prononcé la sanction.
	Autorite *string `json:"autorite,omitempty"`
	// Pays de la sanction.
	Pays *string `json:"pays,omitempty"`
	// Code du pays de la sanction.
	CodePays *string `json:"code_pays,omitempty"`
	// Vaut vrai si la sanction est en cours.
	EnCours *bool `json:"en_cours,omitempty"`
	// Date de début de la sanction.
	DateDebut *string `json:"date_debut,omitempty"`
	// Date de fin de la sanction.
	DateFin *string `json:"date_fin,omitempty"`
	// Liste des sources.
	Sources []PersonnePolitiquementExposeeFonctionsInnerSourcesInner `json:"sources,omitempty"`
}

// NewSanction instantiates a new Sanction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSanction() *Sanction {
	this := Sanction{}
	return &this
}

// NewSanctionWithDefaults instantiates a new Sanction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSanctionWithDefaults() *Sanction {
	this := Sanction{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Sanction) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sanction) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Sanction) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Sanction) SetDescription(v string) {
	o.Description = &v
}

// GetAutorite returns the Autorite field value if set, zero value otherwise.
func (o *Sanction) GetAutorite() string {
	if o == nil || IsNil(o.Autorite) {
		var ret string
		return ret
	}
	return *o.Autorite
}

// GetAutoriteOk returns a tuple with the Autorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sanction) GetAutoriteOk() (*string, bool) {
	if o == nil || IsNil(o.Autorite) {
		return nil, false
	}
	return o.Autorite, true
}

// HasAutorite returns a boolean if a field has been set.
func (o *Sanction) HasAutorite() bool {
	if o != nil && !IsNil(o.Autorite) {
		return true
	}

	return false
}

// SetAutorite gets a reference to the given string and assigns it to the Autorite field.
func (o *Sanction) SetAutorite(v string) {
	o.Autorite = &v
}

// GetPays returns the Pays field value if set, zero value otherwise.
func (o *Sanction) GetPays() string {
	if o == nil || IsNil(o.Pays) {
		var ret string
		return ret
	}
	return *o.Pays
}

// GetPaysOk returns a tuple with the Pays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sanction) GetPaysOk() (*string, bool) {
	if o == nil || IsNil(o.Pays) {
		return nil, false
	}
	return o.Pays, true
}

// HasPays returns a boolean if a field has been set.
func (o *Sanction) HasPays() bool {
	if o != nil && !IsNil(o.Pays) {
		return true
	}

	return false
}

// SetPays gets a reference to the given string and assigns it to the Pays field.
func (o *Sanction) SetPays(v string) {
	o.Pays = &v
}

// GetCodePays returns the CodePays field value if set, zero value otherwise.
func (o *Sanction) GetCodePays() string {
	if o == nil || IsNil(o.CodePays) {
		var ret string
		return ret
	}
	return *o.CodePays
}

// GetCodePaysOk returns a tuple with the CodePays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sanction) GetCodePaysOk() (*string, bool) {
	if o == nil || IsNil(o.CodePays) {
		return nil, false
	}
	return o.CodePays, true
}

// HasCodePays returns a boolean if a field has been set.
func (o *Sanction) HasCodePays() bool {
	if o != nil && !IsNil(o.CodePays) {
		return true
	}

	return false
}

// SetCodePays gets a reference to the given string and assigns it to the CodePays field.
func (o *Sanction) SetCodePays(v string) {
	o.CodePays = &v
}

// GetEnCours returns the EnCours field value if set, zero value otherwise.
func (o *Sanction) GetEnCours() bool {
	if o == nil || IsNil(o.EnCours) {
		var ret bool
		return ret
	}
	return *o.EnCours
}

// GetEnCoursOk returns a tuple with the EnCours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sanction) GetEnCoursOk() (*bool, bool) {
	if o == nil || IsNil(o.EnCours) {
		return nil, false
	}
	return o.EnCours, true
}

// HasEnCours returns a boolean if a field has been set.
func (o *Sanction) HasEnCours() bool {
	if o != nil && !IsNil(o.EnCours) {
		return true
	}

	return false
}

// SetEnCours gets a reference to the given bool and assigns it to the EnCours field.
func (o *Sanction) SetEnCours(v bool) {
	o.EnCours = &v
}

// GetDateDebut returns the DateDebut field value if set, zero value otherwise.
func (o *Sanction) GetDateDebut() string {
	if o == nil || IsNil(o.DateDebut) {
		var ret string
		return ret
	}
	return *o.DateDebut
}

// GetDateDebutOk returns a tuple with the DateDebut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sanction) GetDateDebutOk() (*string, bool) {
	if o == nil || IsNil(o.DateDebut) {
		return nil, false
	}
	return o.DateDebut, true
}

// HasDateDebut returns a boolean if a field has been set.
func (o *Sanction) HasDateDebut() bool {
	if o != nil && !IsNil(o.DateDebut) {
		return true
	}

	return false
}

// SetDateDebut gets a reference to the given string and assigns it to the DateDebut field.
func (o *Sanction) SetDateDebut(v string) {
	o.DateDebut = &v
}

// GetDateFin returns the DateFin field value if set, zero value otherwise.
func (o *Sanction) GetDateFin() string {
	if o == nil || IsNil(o.DateFin) {
		var ret string
		return ret
	}
	return *o.DateFin
}

// GetDateFinOk returns a tuple with the DateFin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sanction) GetDateFinOk() (*string, bool) {
	if o == nil || IsNil(o.DateFin) {
		return nil, false
	}
	return o.DateFin, true
}

// HasDateFin returns a boolean if a field has been set.
func (o *Sanction) HasDateFin() bool {
	if o != nil && !IsNil(o.DateFin) {
		return true
	}

	return false
}

// SetDateFin gets a reference to the given string and assigns it to the DateFin field.
func (o *Sanction) SetDateFin(v string) {
	o.DateFin = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *Sanction) GetSources() []PersonnePolitiquementExposeeFonctionsInnerSourcesInner {
	if o == nil || IsNil(o.Sources) {
		var ret []PersonnePolitiquementExposeeFonctionsInnerSourcesInner
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sanction) GetSourcesOk() ([]PersonnePolitiquementExposeeFonctionsInnerSourcesInner, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *Sanction) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []PersonnePolitiquementExposeeFonctionsInnerSourcesInner and assigns it to the Sources field.
func (o *Sanction) SetSources(v []PersonnePolitiquementExposeeFonctionsInnerSourcesInner) {
	o.Sources = v
}

func (o Sanction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sanction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Autorite) {
		toSerialize["autorite"] = o.Autorite
	}
	if !IsNil(o.Pays) {
		toSerialize["pays"] = o.Pays
	}
	if !IsNil(o.CodePays) {
		toSerialize["code_pays"] = o.CodePays
	}
	if !IsNil(o.EnCours) {
		toSerialize["en_cours"] = o.EnCours
	}
	if !IsNil(o.DateDebut) {
		toSerialize["date_debut"] = o.DateDebut
	}
	if !IsNil(o.DateFin) {
		toSerialize["date_fin"] = o.DateFin
	}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	return toSerialize, nil
}

type NullableSanction struct {
	value *Sanction
	isSet bool
}

func (v NullableSanction) Get() *Sanction {
	return v.value
}

func (v *NullableSanction) Set(val *Sanction) {
	v.value = val
	v.isSet = true
}

func (v NullableSanction) IsSet() bool {
	return v.isSet
}

func (v *NullableSanction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSanction(val *Sanction) *NullableSanction {
	return &NullableSanction{value: val, isSet: true}
}

func (v NullableSanction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSanction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


