/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SurveillanceNotificationsDelete200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SurveillanceNotificationsDelete200Response{}

// SurveillanceNotificationsDelete200Response Nombre de notifications supprimées.
type SurveillanceNotificationsDelete200Response struct {
	// Le nombre de notifications supprimées de votre liste de surveillance.
	NotificationsSupprimees *float32 `json:"notifications_supprimees,omitempty"`
}

// NewSurveillanceNotificationsDelete200Response instantiates a new SurveillanceNotificationsDelete200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSurveillanceNotificationsDelete200Response() *SurveillanceNotificationsDelete200Response {
	this := SurveillanceNotificationsDelete200Response{}
	return &this
}

// NewSurveillanceNotificationsDelete200ResponseWithDefaults instantiates a new SurveillanceNotificationsDelete200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSurveillanceNotificationsDelete200ResponseWithDefaults() *SurveillanceNotificationsDelete200Response {
	this := SurveillanceNotificationsDelete200Response{}
	return &this
}

// GetNotificationsSupprimees returns the NotificationsSupprimees field value if set, zero value otherwise.
func (o *SurveillanceNotificationsDelete200Response) GetNotificationsSupprimees() float32 {
	if o == nil || IsNil(o.NotificationsSupprimees) {
		var ret float32
		return ret
	}
	return *o.NotificationsSupprimees
}

// GetNotificationsSupprimeesOk returns a tuple with the NotificationsSupprimees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveillanceNotificationsDelete200Response) GetNotificationsSupprimeesOk() (*float32, bool) {
	if o == nil || IsNil(o.NotificationsSupprimees) {
		return nil, false
	}
	return o.NotificationsSupprimees, true
}

// HasNotificationsSupprimees returns a boolean if a field has been set.
func (o *SurveillanceNotificationsDelete200Response) HasNotificationsSupprimees() bool {
	if o != nil && !IsNil(o.NotificationsSupprimees) {
		return true
	}

	return false
}

// SetNotificationsSupprimees gets a reference to the given float32 and assigns it to the NotificationsSupprimees field.
func (o *SurveillanceNotificationsDelete200Response) SetNotificationsSupprimees(v float32) {
	o.NotificationsSupprimees = &v
}

func (o SurveillanceNotificationsDelete200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SurveillanceNotificationsDelete200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NotificationsSupprimees) {
		toSerialize["notifications_supprimees"] = o.NotificationsSupprimees
	}
	return toSerialize, nil
}

type NullableSurveillanceNotificationsDelete200Response struct {
	value *SurveillanceNotificationsDelete200Response
	isSet bool
}

func (v NullableSurveillanceNotificationsDelete200Response) Get() *SurveillanceNotificationsDelete200Response {
	return v.value
}

func (v *NullableSurveillanceNotificationsDelete200Response) Set(val *SurveillanceNotificationsDelete200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSurveillanceNotificationsDelete200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSurveillanceNotificationsDelete200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSurveillanceNotificationsDelete200Response(val *SurveillanceNotificationsDelete200Response) *NullableSurveillanceNotificationsDelete200Response {
	return &NullableSurveillanceNotificationsDelete200Response{value: val, isSet: true}
}

func (v NullableSurveillanceNotificationsDelete200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSurveillanceNotificationsDelete200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


