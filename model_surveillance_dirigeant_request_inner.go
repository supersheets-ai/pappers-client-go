/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SurveillanceDirigeantRequestInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SurveillanceDirigeantRequestInner{}

// SurveillanceDirigeantRequestInner struct for SurveillanceDirigeantRequestInner
type SurveillanceDirigeantRequestInner struct {
	// SIREN de la personne morale (si ajout d'une personne morale)
	Siren string `json:"siren"`
	// Dénomination de la personne morale (si ajout d'une personne morale)
	Denomination *string `json:"denomination,omitempty"`
	// Nom de la personne physique (si ajout d'une personne physique)
	Nom *string `json:"nom,omitempty"`
	// Prénom de la personne physique (si ajout d'une personne physique)
	Prenom *string `json:"prenom,omitempty"`
	// Date de naissance de la personne physique au format AAAA-MM-JJ (si ajout d'une personne physique)
	DateDeNaissance *string `json:"date_de_naissance,omitempty"`
	// Active la recherche élargie du dirigeant : <ul><li>Pour une personne physique : c'est un cas rare mais la date de naissance du dirigeant n'est pas toujours connue de Pappers. Si vous activez ce filtre et que la date de naissance est inconnue, l'alerte sera générée uniquement sur la base du nom et prénom.</li><li>Pour une personne morale : c'est un cas rare mais le SIREN du dirigeant n'est pas toujours connu de Pappers. Si vous activez ce filtre et que le SIREN est inconnu, l'alerte sera générée uniquement sur la base de la dénomination. Activable uniquement si le champ denomination est présent.</li></ul>
	RechercheElargie *bool `json:"recherche_elargie,omitempty"`
}

type _SurveillanceDirigeantRequestInner SurveillanceDirigeantRequestInner

// NewSurveillanceDirigeantRequestInner instantiates a new SurveillanceDirigeantRequestInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSurveillanceDirigeantRequestInner(siren string) *SurveillanceDirigeantRequestInner {
	this := SurveillanceDirigeantRequestInner{}
	this.Siren = siren
	var rechercheElargie bool = false
	this.RechercheElargie = &rechercheElargie
	return &this
}

// NewSurveillanceDirigeantRequestInnerWithDefaults instantiates a new SurveillanceDirigeantRequestInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSurveillanceDirigeantRequestInnerWithDefaults() *SurveillanceDirigeantRequestInner {
	this := SurveillanceDirigeantRequestInner{}
	var rechercheElargie bool = false
	this.RechercheElargie = &rechercheElargie
	return &this
}

// GetSiren returns the Siren field value
func (o *SurveillanceDirigeantRequestInner) GetSiren() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Siren
}

// GetSirenOk returns a tuple with the Siren field value
// and a boolean to check if the value has been set.
func (o *SurveillanceDirigeantRequestInner) GetSirenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Siren, true
}

// SetSiren sets field value
func (o *SurveillanceDirigeantRequestInner) SetSiren(v string) {
	o.Siren = v
}

// GetDenomination returns the Denomination field value if set, zero value otherwise.
func (o *SurveillanceDirigeantRequestInner) GetDenomination() string {
	if o == nil || IsNil(o.Denomination) {
		var ret string
		return ret
	}
	return *o.Denomination
}

// GetDenominationOk returns a tuple with the Denomination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveillanceDirigeantRequestInner) GetDenominationOk() (*string, bool) {
	if o == nil || IsNil(o.Denomination) {
		return nil, false
	}
	return o.Denomination, true
}

// HasDenomination returns a boolean if a field has been set.
func (o *SurveillanceDirigeantRequestInner) HasDenomination() bool {
	if o != nil && !IsNil(o.Denomination) {
		return true
	}

	return false
}

// SetDenomination gets a reference to the given string and assigns it to the Denomination field.
func (o *SurveillanceDirigeantRequestInner) SetDenomination(v string) {
	o.Denomination = &v
}

// GetNom returns the Nom field value if set, zero value otherwise.
func (o *SurveillanceDirigeantRequestInner) GetNom() string {
	if o == nil || IsNil(o.Nom) {
		var ret string
		return ret
	}
	return *o.Nom
}

// GetNomOk returns a tuple with the Nom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveillanceDirigeantRequestInner) GetNomOk() (*string, bool) {
	if o == nil || IsNil(o.Nom) {
		return nil, false
	}
	return o.Nom, true
}

// HasNom returns a boolean if a field has been set.
func (o *SurveillanceDirigeantRequestInner) HasNom() bool {
	if o != nil && !IsNil(o.Nom) {
		return true
	}

	return false
}

// SetNom gets a reference to the given string and assigns it to the Nom field.
func (o *SurveillanceDirigeantRequestInner) SetNom(v string) {
	o.Nom = &v
}

// GetPrenom returns the Prenom field value if set, zero value otherwise.
func (o *SurveillanceDirigeantRequestInner) GetPrenom() string {
	if o == nil || IsNil(o.Prenom) {
		var ret string
		return ret
	}
	return *o.Prenom
}

// GetPrenomOk returns a tuple with the Prenom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveillanceDirigeantRequestInner) GetPrenomOk() (*string, bool) {
	if o == nil || IsNil(o.Prenom) {
		return nil, false
	}
	return o.Prenom, true
}

// HasPrenom returns a boolean if a field has been set.
func (o *SurveillanceDirigeantRequestInner) HasPrenom() bool {
	if o != nil && !IsNil(o.Prenom) {
		return true
	}

	return false
}

// SetPrenom gets a reference to the given string and assigns it to the Prenom field.
func (o *SurveillanceDirigeantRequestInner) SetPrenom(v string) {
	o.Prenom = &v
}

// GetDateDeNaissance returns the DateDeNaissance field value if set, zero value otherwise.
func (o *SurveillanceDirigeantRequestInner) GetDateDeNaissance() string {
	if o == nil || IsNil(o.DateDeNaissance) {
		var ret string
		return ret
	}
	return *o.DateDeNaissance
}

// GetDateDeNaissanceOk returns a tuple with the DateDeNaissance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveillanceDirigeantRequestInner) GetDateDeNaissanceOk() (*string, bool) {
	if o == nil || IsNil(o.DateDeNaissance) {
		return nil, false
	}
	return o.DateDeNaissance, true
}

// HasDateDeNaissance returns a boolean if a field has been set.
func (o *SurveillanceDirigeantRequestInner) HasDateDeNaissance() bool {
	if o != nil && !IsNil(o.DateDeNaissance) {
		return true
	}

	return false
}

// SetDateDeNaissance gets a reference to the given string and assigns it to the DateDeNaissance field.
func (o *SurveillanceDirigeantRequestInner) SetDateDeNaissance(v string) {
	o.DateDeNaissance = &v
}

// GetRechercheElargie returns the RechercheElargie field value if set, zero value otherwise.
func (o *SurveillanceDirigeantRequestInner) GetRechercheElargie() bool {
	if o == nil || IsNil(o.RechercheElargie) {
		var ret bool
		return ret
	}
	return *o.RechercheElargie
}

// GetRechercheElargieOk returns a tuple with the RechercheElargie field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveillanceDirigeantRequestInner) GetRechercheElargieOk() (*bool, bool) {
	if o == nil || IsNil(o.RechercheElargie) {
		return nil, false
	}
	return o.RechercheElargie, true
}

// HasRechercheElargie returns a boolean if a field has been set.
func (o *SurveillanceDirigeantRequestInner) HasRechercheElargie() bool {
	if o != nil && !IsNil(o.RechercheElargie) {
		return true
	}

	return false
}

// SetRechercheElargie gets a reference to the given bool and assigns it to the RechercheElargie field.
func (o *SurveillanceDirigeantRequestInner) SetRechercheElargie(v bool) {
	o.RechercheElargie = &v
}

func (o SurveillanceDirigeantRequestInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SurveillanceDirigeantRequestInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["siren"] = o.Siren
	if !IsNil(o.Denomination) {
		toSerialize["denomination"] = o.Denomination
	}
	if !IsNil(o.Nom) {
		toSerialize["nom"] = o.Nom
	}
	if !IsNil(o.Prenom) {
		toSerialize["prenom"] = o.Prenom
	}
	if !IsNil(o.DateDeNaissance) {
		toSerialize["date_de_naissance"] = o.DateDeNaissance
	}
	if !IsNil(o.RechercheElargie) {
		toSerialize["recherche_elargie"] = o.RechercheElargie
	}
	return toSerialize, nil
}

func (o *SurveillanceDirigeantRequestInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"siren",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSurveillanceDirigeantRequestInner := _SurveillanceDirigeantRequestInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSurveillanceDirigeantRequestInner)

	if err != nil {
		return err
	}

	*o = SurveillanceDirigeantRequestInner(varSurveillanceDirigeantRequestInner)

	return err
}

type NullableSurveillanceDirigeantRequestInner struct {
	value *SurveillanceDirigeantRequestInner
	isSet bool
}

func (v NullableSurveillanceDirigeantRequestInner) Get() *SurveillanceDirigeantRequestInner {
	return v.value
}

func (v *NullableSurveillanceDirigeantRequestInner) Set(val *SurveillanceDirigeantRequestInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSurveillanceDirigeantRequestInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSurveillanceDirigeantRequestInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSurveillanceDirigeantRequestInner(val *SurveillanceDirigeantRequestInner) *NullableSurveillanceDirigeantRequestInner {
	return &NullableSurveillanceDirigeantRequestInner{value: val, isSet: true}
}

func (v NullableSurveillanceDirigeantRequestInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSurveillanceDirigeantRequestInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


