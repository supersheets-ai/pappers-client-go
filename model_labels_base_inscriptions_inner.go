/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LabelsBaseInscriptionsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LabelsBaseInscriptionsInner{}

// LabelsBaseInscriptionsInner struct for LabelsBaseInscriptionsInner
type LabelsBaseInscriptionsInner struct {
	// Code Catégorie de l'inscription ORIAS.
	Categorie *string `json:"categorie,omitempty"`
	// Libellé de la catégorie de l'inscription ORIAS.
	LabelCategorie *string `json:"label_categorie,omitempty"`
	// Statut de l'inscription ORIAS.
	Statut *string `json:"statut,omitempty"`
	// Date de l'inscription ORIAS.
	DateInscription *string `json:"date_inscription,omitempty"`
	// Vrai si l'inscription ORIAS permet d'encaisser des fonds.
	EncaisseFonds *bool `json:"encaisse_fonds,omitempty"`
	// Liste des activités de l'inscription ORIAS.
	Activites []string `json:"activites,omitempty"`
}

// NewLabelsBaseInscriptionsInner instantiates a new LabelsBaseInscriptionsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabelsBaseInscriptionsInner() *LabelsBaseInscriptionsInner {
	this := LabelsBaseInscriptionsInner{}
	return &this
}

// NewLabelsBaseInscriptionsInnerWithDefaults instantiates a new LabelsBaseInscriptionsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelsBaseInscriptionsInnerWithDefaults() *LabelsBaseInscriptionsInner {
	this := LabelsBaseInscriptionsInner{}
	return &this
}

// GetCategorie returns the Categorie field value if set, zero value otherwise.
func (o *LabelsBaseInscriptionsInner) GetCategorie() string {
	if o == nil || IsNil(o.Categorie) {
		var ret string
		return ret
	}
	return *o.Categorie
}

// GetCategorieOk returns a tuple with the Categorie field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelsBaseInscriptionsInner) GetCategorieOk() (*string, bool) {
	if o == nil || IsNil(o.Categorie) {
		return nil, false
	}
	return o.Categorie, true
}

// HasCategorie returns a boolean if a field has been set.
func (o *LabelsBaseInscriptionsInner) HasCategorie() bool {
	if o != nil && !IsNil(o.Categorie) {
		return true
	}

	return false
}

// SetCategorie gets a reference to the given string and assigns it to the Categorie field.
func (o *LabelsBaseInscriptionsInner) SetCategorie(v string) {
	o.Categorie = &v
}

// GetLabelCategorie returns the LabelCategorie field value if set, zero value otherwise.
func (o *LabelsBaseInscriptionsInner) GetLabelCategorie() string {
	if o == nil || IsNil(o.LabelCategorie) {
		var ret string
		return ret
	}
	return *o.LabelCategorie
}

// GetLabelCategorieOk returns a tuple with the LabelCategorie field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelsBaseInscriptionsInner) GetLabelCategorieOk() (*string, bool) {
	if o == nil || IsNil(o.LabelCategorie) {
		return nil, false
	}
	return o.LabelCategorie, true
}

// HasLabelCategorie returns a boolean if a field has been set.
func (o *LabelsBaseInscriptionsInner) HasLabelCategorie() bool {
	if o != nil && !IsNil(o.LabelCategorie) {
		return true
	}

	return false
}

// SetLabelCategorie gets a reference to the given string and assigns it to the LabelCategorie field.
func (o *LabelsBaseInscriptionsInner) SetLabelCategorie(v string) {
	o.LabelCategorie = &v
}

// GetStatut returns the Statut field value if set, zero value otherwise.
func (o *LabelsBaseInscriptionsInner) GetStatut() string {
	if o == nil || IsNil(o.Statut) {
		var ret string
		return ret
	}
	return *o.Statut
}

// GetStatutOk returns a tuple with the Statut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelsBaseInscriptionsInner) GetStatutOk() (*string, bool) {
	if o == nil || IsNil(o.Statut) {
		return nil, false
	}
	return o.Statut, true
}

// HasStatut returns a boolean if a field has been set.
func (o *LabelsBaseInscriptionsInner) HasStatut() bool {
	if o != nil && !IsNil(o.Statut) {
		return true
	}

	return false
}

// SetStatut gets a reference to the given string and assigns it to the Statut field.
func (o *LabelsBaseInscriptionsInner) SetStatut(v string) {
	o.Statut = &v
}

// GetDateInscription returns the DateInscription field value if set, zero value otherwise.
func (o *LabelsBaseInscriptionsInner) GetDateInscription() string {
	if o == nil || IsNil(o.DateInscription) {
		var ret string
		return ret
	}
	return *o.DateInscription
}

// GetDateInscriptionOk returns a tuple with the DateInscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelsBaseInscriptionsInner) GetDateInscriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DateInscription) {
		return nil, false
	}
	return o.DateInscription, true
}

// HasDateInscription returns a boolean if a field has been set.
func (o *LabelsBaseInscriptionsInner) HasDateInscription() bool {
	if o != nil && !IsNil(o.DateInscription) {
		return true
	}

	return false
}

// SetDateInscription gets a reference to the given string and assigns it to the DateInscription field.
func (o *LabelsBaseInscriptionsInner) SetDateInscription(v string) {
	o.DateInscription = &v
}

// GetEncaisseFonds returns the EncaisseFonds field value if set, zero value otherwise.
func (o *LabelsBaseInscriptionsInner) GetEncaisseFonds() bool {
	if o == nil || IsNil(o.EncaisseFonds) {
		var ret bool
		return ret
	}
	return *o.EncaisseFonds
}

// GetEncaisseFondsOk returns a tuple with the EncaisseFonds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelsBaseInscriptionsInner) GetEncaisseFondsOk() (*bool, bool) {
	if o == nil || IsNil(o.EncaisseFonds) {
		return nil, false
	}
	return o.EncaisseFonds, true
}

// HasEncaisseFonds returns a boolean if a field has been set.
func (o *LabelsBaseInscriptionsInner) HasEncaisseFonds() bool {
	if o != nil && !IsNil(o.EncaisseFonds) {
		return true
	}

	return false
}

// SetEncaisseFonds gets a reference to the given bool and assigns it to the EncaisseFonds field.
func (o *LabelsBaseInscriptionsInner) SetEncaisseFonds(v bool) {
	o.EncaisseFonds = &v
}

// GetActivites returns the Activites field value if set, zero value otherwise.
func (o *LabelsBaseInscriptionsInner) GetActivites() []string {
	if o == nil || IsNil(o.Activites) {
		var ret []string
		return ret
	}
	return o.Activites
}

// GetActivitesOk returns a tuple with the Activites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelsBaseInscriptionsInner) GetActivitesOk() ([]string, bool) {
	if o == nil || IsNil(o.Activites) {
		return nil, false
	}
	return o.Activites, true
}

// HasActivites returns a boolean if a field has been set.
func (o *LabelsBaseInscriptionsInner) HasActivites() bool {
	if o != nil && !IsNil(o.Activites) {
		return true
	}

	return false
}

// SetActivites gets a reference to the given []string and assigns it to the Activites field.
func (o *LabelsBaseInscriptionsInner) SetActivites(v []string) {
	o.Activites = v
}

func (o LabelsBaseInscriptionsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LabelsBaseInscriptionsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Categorie) {
		toSerialize["categorie"] = o.Categorie
	}
	if !IsNil(o.LabelCategorie) {
		toSerialize["label_categorie"] = o.LabelCategorie
	}
	if !IsNil(o.Statut) {
		toSerialize["statut"] = o.Statut
	}
	if !IsNil(o.DateInscription) {
		toSerialize["date_inscription"] = o.DateInscription
	}
	if !IsNil(o.EncaisseFonds) {
		toSerialize["encaisse_fonds"] = o.EncaisseFonds
	}
	if !IsNil(o.Activites) {
		toSerialize["activites"] = o.Activites
	}
	return toSerialize, nil
}

type NullableLabelsBaseInscriptionsInner struct {
	value *LabelsBaseInscriptionsInner
	isSet bool
}

func (v NullableLabelsBaseInscriptionsInner) Get() *LabelsBaseInscriptionsInner {
	return v.value
}

func (v *NullableLabelsBaseInscriptionsInner) Set(val *LabelsBaseInscriptionsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelsBaseInscriptionsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelsBaseInscriptionsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelsBaseInscriptionsInner(val *LabelsBaseInscriptionsInner) *NullableLabelsBaseInscriptionsInner {
	return &NullableLabelsBaseInscriptionsInner{value: val, isSet: true}
}

func (v NullableLabelsBaseInscriptionsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelsBaseInscriptionsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


