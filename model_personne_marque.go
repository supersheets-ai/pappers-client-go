/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PersonneMarque type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PersonneMarque{}

// PersonneMarque struct for PersonneMarque
type PersonneMarque struct {
	// Siren de l'entité, dans le cas d'une personne morale.
	Siren *string `json:"siren,omitempty"`
	// Entité légale.
	EntiteLegale *string `json:"entite_legale,omitempty"`
	// Nom de l'entité.
	Nom *string `json:"nom,omitempty"`
	// Bâtiment de l'entité.
	Batiment *string `json:"batiment,omitempty"`
	// Rue de l'entité.
	Rue *string `json:"rue,omitempty"`
	// Ville de l'entité.
	Ville *string `json:"ville,omitempty"`
	// Boîte postale de l'entité.
	BoitePostale *string `json:"boite_postale,omitempty"`
	// Code postal de l'entité.
	CodePostal *string `json:"code_postal,omitempty"`
	// Code pays de l'entité.
	CodePays *string `json:"code_pays,omitempty"`
}

// NewPersonneMarque instantiates a new PersonneMarque object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersonneMarque() *PersonneMarque {
	this := PersonneMarque{}
	return &this
}

// NewPersonneMarqueWithDefaults instantiates a new PersonneMarque object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonneMarqueWithDefaults() *PersonneMarque {
	this := PersonneMarque{}
	return &this
}

// GetSiren returns the Siren field value if set, zero value otherwise.
func (o *PersonneMarque) GetSiren() string {
	if o == nil || IsNil(o.Siren) {
		var ret string
		return ret
	}
	return *o.Siren
}

// GetSirenOk returns a tuple with the Siren field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonneMarque) GetSirenOk() (*string, bool) {
	if o == nil || IsNil(o.Siren) {
		return nil, false
	}
	return o.Siren, true
}

// HasSiren returns a boolean if a field has been set.
func (o *PersonneMarque) HasSiren() bool {
	if o != nil && !IsNil(o.Siren) {
		return true
	}

	return false
}

// SetSiren gets a reference to the given string and assigns it to the Siren field.
func (o *PersonneMarque) SetSiren(v string) {
	o.Siren = &v
}

// GetEntiteLegale returns the EntiteLegale field value if set, zero value otherwise.
func (o *PersonneMarque) GetEntiteLegale() string {
	if o == nil || IsNil(o.EntiteLegale) {
		var ret string
		return ret
	}
	return *o.EntiteLegale
}

// GetEntiteLegaleOk returns a tuple with the EntiteLegale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonneMarque) GetEntiteLegaleOk() (*string, bool) {
	if o == nil || IsNil(o.EntiteLegale) {
		return nil, false
	}
	return o.EntiteLegale, true
}

// HasEntiteLegale returns a boolean if a field has been set.
func (o *PersonneMarque) HasEntiteLegale() bool {
	if o != nil && !IsNil(o.EntiteLegale) {
		return true
	}

	return false
}

// SetEntiteLegale gets a reference to the given string and assigns it to the EntiteLegale field.
func (o *PersonneMarque) SetEntiteLegale(v string) {
	o.EntiteLegale = &v
}

// GetNom returns the Nom field value if set, zero value otherwise.
func (o *PersonneMarque) GetNom() string {
	if o == nil || IsNil(o.Nom) {
		var ret string
		return ret
	}
	return *o.Nom
}

// GetNomOk returns a tuple with the Nom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonneMarque) GetNomOk() (*string, bool) {
	if o == nil || IsNil(o.Nom) {
		return nil, false
	}
	return o.Nom, true
}

// HasNom returns a boolean if a field has been set.
func (o *PersonneMarque) HasNom() bool {
	if o != nil && !IsNil(o.Nom) {
		return true
	}

	return false
}

// SetNom gets a reference to the given string and assigns it to the Nom field.
func (o *PersonneMarque) SetNom(v string) {
	o.Nom = &v
}

// GetBatiment returns the Batiment field value if set, zero value otherwise.
func (o *PersonneMarque) GetBatiment() string {
	if o == nil || IsNil(o.Batiment) {
		var ret string
		return ret
	}
	return *o.Batiment
}

// GetBatimentOk returns a tuple with the Batiment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonneMarque) GetBatimentOk() (*string, bool) {
	if o == nil || IsNil(o.Batiment) {
		return nil, false
	}
	return o.Batiment, true
}

// HasBatiment returns a boolean if a field has been set.
func (o *PersonneMarque) HasBatiment() bool {
	if o != nil && !IsNil(o.Batiment) {
		return true
	}

	return false
}

// SetBatiment gets a reference to the given string and assigns it to the Batiment field.
func (o *PersonneMarque) SetBatiment(v string) {
	o.Batiment = &v
}

// GetRue returns the Rue field value if set, zero value otherwise.
func (o *PersonneMarque) GetRue() string {
	if o == nil || IsNil(o.Rue) {
		var ret string
		return ret
	}
	return *o.Rue
}

// GetRueOk returns a tuple with the Rue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonneMarque) GetRueOk() (*string, bool) {
	if o == nil || IsNil(o.Rue) {
		return nil, false
	}
	return o.Rue, true
}

// HasRue returns a boolean if a field has been set.
func (o *PersonneMarque) HasRue() bool {
	if o != nil && !IsNil(o.Rue) {
		return true
	}

	return false
}

// SetRue gets a reference to the given string and assigns it to the Rue field.
func (o *PersonneMarque) SetRue(v string) {
	o.Rue = &v
}

// GetVille returns the Ville field value if set, zero value otherwise.
func (o *PersonneMarque) GetVille() string {
	if o == nil || IsNil(o.Ville) {
		var ret string
		return ret
	}
	return *o.Ville
}

// GetVilleOk returns a tuple with the Ville field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonneMarque) GetVilleOk() (*string, bool) {
	if o == nil || IsNil(o.Ville) {
		return nil, false
	}
	return o.Ville, true
}

// HasVille returns a boolean if a field has been set.
func (o *PersonneMarque) HasVille() bool {
	if o != nil && !IsNil(o.Ville) {
		return true
	}

	return false
}

// SetVille gets a reference to the given string and assigns it to the Ville field.
func (o *PersonneMarque) SetVille(v string) {
	o.Ville = &v
}

// GetBoitePostale returns the BoitePostale field value if set, zero value otherwise.
func (o *PersonneMarque) GetBoitePostale() string {
	if o == nil || IsNil(o.BoitePostale) {
		var ret string
		return ret
	}
	return *o.BoitePostale
}

// GetBoitePostaleOk returns a tuple with the BoitePostale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonneMarque) GetBoitePostaleOk() (*string, bool) {
	if o == nil || IsNil(o.BoitePostale) {
		return nil, false
	}
	return o.BoitePostale, true
}

// HasBoitePostale returns a boolean if a field has been set.
func (o *PersonneMarque) HasBoitePostale() bool {
	if o != nil && !IsNil(o.BoitePostale) {
		return true
	}

	return false
}

// SetBoitePostale gets a reference to the given string and assigns it to the BoitePostale field.
func (o *PersonneMarque) SetBoitePostale(v string) {
	o.BoitePostale = &v
}

// GetCodePostal returns the CodePostal field value if set, zero value otherwise.
func (o *PersonneMarque) GetCodePostal() string {
	if o == nil || IsNil(o.CodePostal) {
		var ret string
		return ret
	}
	return *o.CodePostal
}

// GetCodePostalOk returns a tuple with the CodePostal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonneMarque) GetCodePostalOk() (*string, bool) {
	if o == nil || IsNil(o.CodePostal) {
		return nil, false
	}
	return o.CodePostal, true
}

// HasCodePostal returns a boolean if a field has been set.
func (o *PersonneMarque) HasCodePostal() bool {
	if o != nil && !IsNil(o.CodePostal) {
		return true
	}

	return false
}

// SetCodePostal gets a reference to the given string and assigns it to the CodePostal field.
func (o *PersonneMarque) SetCodePostal(v string) {
	o.CodePostal = &v
}

// GetCodePays returns the CodePays field value if set, zero value otherwise.
func (o *PersonneMarque) GetCodePays() string {
	if o == nil || IsNil(o.CodePays) {
		var ret string
		return ret
	}
	return *o.CodePays
}

// GetCodePaysOk returns a tuple with the CodePays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonneMarque) GetCodePaysOk() (*string, bool) {
	if o == nil || IsNil(o.CodePays) {
		return nil, false
	}
	return o.CodePays, true
}

// HasCodePays returns a boolean if a field has been set.
func (o *PersonneMarque) HasCodePays() bool {
	if o != nil && !IsNil(o.CodePays) {
		return true
	}

	return false
}

// SetCodePays gets a reference to the given string and assigns it to the CodePays field.
func (o *PersonneMarque) SetCodePays(v string) {
	o.CodePays = &v
}

func (o PersonneMarque) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PersonneMarque) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Siren) {
		toSerialize["siren"] = o.Siren
	}
	if !IsNil(o.EntiteLegale) {
		toSerialize["entite_legale"] = o.EntiteLegale
	}
	if !IsNil(o.Nom) {
		toSerialize["nom"] = o.Nom
	}
	if !IsNil(o.Batiment) {
		toSerialize["batiment"] = o.Batiment
	}
	if !IsNil(o.Rue) {
		toSerialize["rue"] = o.Rue
	}
	if !IsNil(o.Ville) {
		toSerialize["ville"] = o.Ville
	}
	if !IsNil(o.BoitePostale) {
		toSerialize["boite_postale"] = o.BoitePostale
	}
	if !IsNil(o.CodePostal) {
		toSerialize["code_postal"] = o.CodePostal
	}
	if !IsNil(o.CodePays) {
		toSerialize["code_pays"] = o.CodePays
	}
	return toSerialize, nil
}

type NullablePersonneMarque struct {
	value *PersonneMarque
	isSet bool
}

func (v NullablePersonneMarque) Get() *PersonneMarque {
	return v.value
}

func (v *NullablePersonneMarque) Set(val *PersonneMarque) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonneMarque) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonneMarque) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonneMarque(val *PersonneMarque) *NullablePersonneMarque {
	return &NullablePersonneMarque{value: val, isSet: true}
}

func (v NullablePersonneMarque) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonneMarque) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


