/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DocumentActe type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentActe{}

// DocumentActe struct for DocumentActe
type DocumentActe struct {
	Document
	// Titres des actes associés au document
	Titres []DocumentActeAllOfTitres `json:"titres,omitempty"`
}

// NewDocumentActe instantiates a new DocumentActe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentActe() *DocumentActe {
	this := DocumentActe{}
	return &this
}

// NewDocumentActeWithDefaults instantiates a new DocumentActe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentActeWithDefaults() *DocumentActe {
	this := DocumentActe{}
	return &this
}

// GetTitres returns the Titres field value if set, zero value otherwise.
func (o *DocumentActe) GetTitres() []DocumentActeAllOfTitres {
	if o == nil || IsNil(o.Titres) {
		var ret []DocumentActeAllOfTitres
		return ret
	}
	return o.Titres
}

// GetTitresOk returns a tuple with the Titres field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentActe) GetTitresOk() ([]DocumentActeAllOfTitres, bool) {
	if o == nil || IsNil(o.Titres) {
		return nil, false
	}
	return o.Titres, true
}

// HasTitres returns a boolean if a field has been set.
func (o *DocumentActe) HasTitres() bool {
	if o != nil && !IsNil(o.Titres) {
		return true
	}

	return false
}

// SetTitres gets a reference to the given []DocumentActeAllOfTitres and assigns it to the Titres field.
func (o *DocumentActe) SetTitres(v []DocumentActeAllOfTitres) {
	o.Titres = v
}

func (o DocumentActe) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentActe) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedDocument, errDocument := json.Marshal(o.Document)
	if errDocument != nil {
		return map[string]interface{}{}, errDocument
	}
	errDocument = json.Unmarshal([]byte(serializedDocument), &toSerialize)
	if errDocument != nil {
		return map[string]interface{}{}, errDocument
	}
	if !IsNil(o.Titres) {
		toSerialize["titres"] = o.Titres
	}
	return toSerialize, nil
}

type NullableDocumentActe struct {
	value *DocumentActe
	isSet bool
}

func (v NullableDocumentActe) Get() *DocumentActe {
	return v.value
}

func (v *NullableDocumentActe) Set(val *DocumentActe) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentActe) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentActe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentActe(val *DocumentActe) *NullableDocumentActe {
	return &NullableDocumentActe{value: val, isSet: true}
}

func (v NullableDocumentActe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentActe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


