/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PersonnePolitiquementExposee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PersonnePolitiquementExposee{}

// PersonnePolitiquementExposee Informations sur le statut de personne politiquement exposée. Uniquement présent si demandé dans les champs supplémentaires.
type PersonnePolitiquementExposee struct {
	// Vaut vrai si la personne est actuellement politiquement exposée.
	EnCours *bool `json:"en_cours,omitempty"`
	// Liste des fonctions actuelles et passées de la personne politiquement exposée.
	Fonctions []PersonnePolitiquementExposeeFonctionsInner `json:"fonctions,omitempty"`
}

// NewPersonnePolitiquementExposee instantiates a new PersonnePolitiquementExposee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersonnePolitiquementExposee() *PersonnePolitiquementExposee {
	this := PersonnePolitiquementExposee{}
	return &this
}

// NewPersonnePolitiquementExposeeWithDefaults instantiates a new PersonnePolitiquementExposee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonnePolitiquementExposeeWithDefaults() *PersonnePolitiquementExposee {
	this := PersonnePolitiquementExposee{}
	return &this
}

// GetEnCours returns the EnCours field value if set, zero value otherwise.
func (o *PersonnePolitiquementExposee) GetEnCours() bool {
	if o == nil || IsNil(o.EnCours) {
		var ret bool
		return ret
	}
	return *o.EnCours
}

// GetEnCoursOk returns a tuple with the EnCours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonnePolitiquementExposee) GetEnCoursOk() (*bool, bool) {
	if o == nil || IsNil(o.EnCours) {
		return nil, false
	}
	return o.EnCours, true
}

// HasEnCours returns a boolean if a field has been set.
func (o *PersonnePolitiquementExposee) HasEnCours() bool {
	if o != nil && !IsNil(o.EnCours) {
		return true
	}

	return false
}

// SetEnCours gets a reference to the given bool and assigns it to the EnCours field.
func (o *PersonnePolitiquementExposee) SetEnCours(v bool) {
	o.EnCours = &v
}

// GetFonctions returns the Fonctions field value if set, zero value otherwise.
func (o *PersonnePolitiquementExposee) GetFonctions() []PersonnePolitiquementExposeeFonctionsInner {
	if o == nil || IsNil(o.Fonctions) {
		var ret []PersonnePolitiquementExposeeFonctionsInner
		return ret
	}
	return o.Fonctions
}

// GetFonctionsOk returns a tuple with the Fonctions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonnePolitiquementExposee) GetFonctionsOk() ([]PersonnePolitiquementExposeeFonctionsInner, bool) {
	if o == nil || IsNil(o.Fonctions) {
		return nil, false
	}
	return o.Fonctions, true
}

// HasFonctions returns a boolean if a field has been set.
func (o *PersonnePolitiquementExposee) HasFonctions() bool {
	if o != nil && !IsNil(o.Fonctions) {
		return true
	}

	return false
}

// SetFonctions gets a reference to the given []PersonnePolitiquementExposeeFonctionsInner and assigns it to the Fonctions field.
func (o *PersonnePolitiquementExposee) SetFonctions(v []PersonnePolitiquementExposeeFonctionsInner) {
	o.Fonctions = v
}

func (o PersonnePolitiquementExposee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PersonnePolitiquementExposee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnCours) {
		toSerialize["en_cours"] = o.EnCours
	}
	if !IsNil(o.Fonctions) {
		toSerialize["fonctions"] = o.Fonctions
	}
	return toSerialize, nil
}

type NullablePersonnePolitiquementExposee struct {
	value *PersonnePolitiquementExposee
	isSet bool
}

func (v NullablePersonnePolitiquementExposee) Get() *PersonnePolitiquementExposee {
	return v.value
}

func (v *NullablePersonnePolitiquementExposee) Set(val *PersonnePolitiquementExposee) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonnePolitiquementExposee) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonnePolitiquementExposee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonnePolitiquementExposee(val *PersonnePolitiquementExposee) *NullablePersonnePolitiquementExposee {
	return &NullablePersonnePolitiquementExposee{value: val, isSet: true}
}

func (v NullablePersonnePolitiquementExposee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonnePolitiquementExposee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


