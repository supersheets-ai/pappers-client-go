/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Document type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Document{}

// Document struct for Document
type Document struct {
	// Type de document
	Type *string `json:"type,omitempty"`
	// Token du document
	Token *string `json:"token,omitempty"`
	// Date de dépôt du document
	DateDepot *string `json:"date_depot,omitempty"`
	// Mentions de la recherche dans le document.
	Mentions []string `json:"mentions,omitempty"`
}

// NewDocument instantiates a new Document object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocument() *Document {
	this := Document{}
	return &this
}

// NewDocumentWithDefaults instantiates a new Document object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentWithDefaults() *Document {
	this := Document{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Document) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Document) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Document) SetType(v string) {
	o.Type = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *Document) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *Document) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *Document) SetToken(v string) {
	o.Token = &v
}

// GetDateDepot returns the DateDepot field value if set, zero value otherwise.
func (o *Document) GetDateDepot() string {
	if o == nil || IsNil(o.DateDepot) {
		var ret string
		return ret
	}
	return *o.DateDepot
}

// GetDateDepotOk returns a tuple with the DateDepot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetDateDepotOk() (*string, bool) {
	if o == nil || IsNil(o.DateDepot) {
		return nil, false
	}
	return o.DateDepot, true
}

// HasDateDepot returns a boolean if a field has been set.
func (o *Document) HasDateDepot() bool {
	if o != nil && !IsNil(o.DateDepot) {
		return true
	}

	return false
}

// SetDateDepot gets a reference to the given string and assigns it to the DateDepot field.
func (o *Document) SetDateDepot(v string) {
	o.DateDepot = &v
}

// GetMentions returns the Mentions field value if set, zero value otherwise.
func (o *Document) GetMentions() []string {
	if o == nil || IsNil(o.Mentions) {
		var ret []string
		return ret
	}
	return o.Mentions
}

// GetMentionsOk returns a tuple with the Mentions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetMentionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Mentions) {
		return nil, false
	}
	return o.Mentions, true
}

// HasMentions returns a boolean if a field has been set.
func (o *Document) HasMentions() bool {
	if o != nil && !IsNil(o.Mentions) {
		return true
	}

	return false
}

// SetMentions gets a reference to the given []string and assigns it to the Mentions field.
func (o *Document) SetMentions(v []string) {
	o.Mentions = v
}

func (o Document) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Document) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.DateDepot) {
		toSerialize["date_depot"] = o.DateDepot
	}
	if !IsNil(o.Mentions) {
		toSerialize["mentions"] = o.Mentions
	}
	return toSerialize, nil
}

type NullableDocument struct {
	value *Document
	isSet bool
}

func (v NullableDocument) Get() *Document {
	return v.value
}

func (v *NullableDocument) Set(val *Document) {
	v.value = val
	v.isSet = true
}

func (v NullableDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocument(val *Document) *NullableDocument {
	return &NullableDocument{value: val, isSet: true}
}

func (v NullableDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


