/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CartographieEntreprisesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CartographieEntreprisesInner{}

// CartographieEntreprisesInner struct for CartographieEntreprisesInner
type CartographieEntreprisesInner struct {
	// Un identifiant unique du noeud.
	Id *string `json:"id,omitempty"`
	// SIREN de l'entreprise.
	Siren *string `json:"siren,omitempty"`
	// Nom de l'entreprise.
	NomEntreprise *string `json:"nom_entreprise,omitempty"`
}

// NewCartographieEntreprisesInner instantiates a new CartographieEntreprisesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCartographieEntreprisesInner() *CartographieEntreprisesInner {
	this := CartographieEntreprisesInner{}
	return &this
}

// NewCartographieEntreprisesInnerWithDefaults instantiates a new CartographieEntreprisesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCartographieEntreprisesInnerWithDefaults() *CartographieEntreprisesInner {
	this := CartographieEntreprisesInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CartographieEntreprisesInner) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartographieEntreprisesInner) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CartographieEntreprisesInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CartographieEntreprisesInner) SetId(v string) {
	o.Id = &v
}

// GetSiren returns the Siren field value if set, zero value otherwise.
func (o *CartographieEntreprisesInner) GetSiren() string {
	if o == nil || IsNil(o.Siren) {
		var ret string
		return ret
	}
	return *o.Siren
}

// GetSirenOk returns a tuple with the Siren field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartographieEntreprisesInner) GetSirenOk() (*string, bool) {
	if o == nil || IsNil(o.Siren) {
		return nil, false
	}
	return o.Siren, true
}

// HasSiren returns a boolean if a field has been set.
func (o *CartographieEntreprisesInner) HasSiren() bool {
	if o != nil && !IsNil(o.Siren) {
		return true
	}

	return false
}

// SetSiren gets a reference to the given string and assigns it to the Siren field.
func (o *CartographieEntreprisesInner) SetSiren(v string) {
	o.Siren = &v
}

// GetNomEntreprise returns the NomEntreprise field value if set, zero value otherwise.
func (o *CartographieEntreprisesInner) GetNomEntreprise() string {
	if o == nil || IsNil(o.NomEntreprise) {
		var ret string
		return ret
	}
	return *o.NomEntreprise
}

// GetNomEntrepriseOk returns a tuple with the NomEntreprise field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartographieEntreprisesInner) GetNomEntrepriseOk() (*string, bool) {
	if o == nil || IsNil(o.NomEntreprise) {
		return nil, false
	}
	return o.NomEntreprise, true
}

// HasNomEntreprise returns a boolean if a field has been set.
func (o *CartographieEntreprisesInner) HasNomEntreprise() bool {
	if o != nil && !IsNil(o.NomEntreprise) {
		return true
	}

	return false
}

// SetNomEntreprise gets a reference to the given string and assigns it to the NomEntreprise field.
func (o *CartographieEntreprisesInner) SetNomEntreprise(v string) {
	o.NomEntreprise = &v
}

func (o CartographieEntreprisesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CartographieEntreprisesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Siren) {
		toSerialize["siren"] = o.Siren
	}
	if !IsNil(o.NomEntreprise) {
		toSerialize["nom_entreprise"] = o.NomEntreprise
	}
	return toSerialize, nil
}

type NullableCartographieEntreprisesInner struct {
	value *CartographieEntreprisesInner
	isSet bool
}

func (v NullableCartographieEntreprisesInner) Get() *CartographieEntreprisesInner {
	return v.value
}

func (v *NullableCartographieEntreprisesInner) Set(val *CartographieEntreprisesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCartographieEntreprisesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCartographieEntreprisesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCartographieEntreprisesInner(val *CartographieEntreprisesInner) *NullableCartographieEntreprisesInner {
	return &NullableCartographieEntreprisesInner{value: val, isSet: true}
}

func (v NullableCartographieEntreprisesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCartographieEntreprisesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


