/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LienSuccession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LienSuccession{}

// LienSuccession struct for LienSuccession
type LienSuccession struct {
	// Numéro siret de l'établissement au format xxxxxxxxxxxxxx.
	Siret *string `json:"siret,omitempty"`
	// Date à laquelle la succession a eu lieu.
	Date *string `json:"date,omitempty"`
	// Vrai si le lien de succession concerne l'établissement siège, faux sinon.
	TransfertSiege *bool `json:"transfert_siege,omitempty"`
	// Vrai s'il y a [continuité économique](https://www.sirene.fr/sirene/public/variable/continuiteEconomique), faux sinon.
	ContinuiteEconomique *bool `json:"continuite_economique,omitempty"`
}

// NewLienSuccession instantiates a new LienSuccession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLienSuccession() *LienSuccession {
	this := LienSuccession{}
	return &this
}

// NewLienSuccessionWithDefaults instantiates a new LienSuccession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLienSuccessionWithDefaults() *LienSuccession {
	this := LienSuccession{}
	return &this
}

// GetSiret returns the Siret field value if set, zero value otherwise.
func (o *LienSuccession) GetSiret() string {
	if o == nil || IsNil(o.Siret) {
		var ret string
		return ret
	}
	return *o.Siret
}

// GetSiretOk returns a tuple with the Siret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LienSuccession) GetSiretOk() (*string, bool) {
	if o == nil || IsNil(o.Siret) {
		return nil, false
	}
	return o.Siret, true
}

// HasSiret returns a boolean if a field has been set.
func (o *LienSuccession) HasSiret() bool {
	if o != nil && !IsNil(o.Siret) {
		return true
	}

	return false
}

// SetSiret gets a reference to the given string and assigns it to the Siret field.
func (o *LienSuccession) SetSiret(v string) {
	o.Siret = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *LienSuccession) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LienSuccession) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *LienSuccession) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *LienSuccession) SetDate(v string) {
	o.Date = &v
}

// GetTransfertSiege returns the TransfertSiege field value if set, zero value otherwise.
func (o *LienSuccession) GetTransfertSiege() bool {
	if o == nil || IsNil(o.TransfertSiege) {
		var ret bool
		return ret
	}
	return *o.TransfertSiege
}

// GetTransfertSiegeOk returns a tuple with the TransfertSiege field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LienSuccession) GetTransfertSiegeOk() (*bool, bool) {
	if o == nil || IsNil(o.TransfertSiege) {
		return nil, false
	}
	return o.TransfertSiege, true
}

// HasTransfertSiege returns a boolean if a field has been set.
func (o *LienSuccession) HasTransfertSiege() bool {
	if o != nil && !IsNil(o.TransfertSiege) {
		return true
	}

	return false
}

// SetTransfertSiege gets a reference to the given bool and assigns it to the TransfertSiege field.
func (o *LienSuccession) SetTransfertSiege(v bool) {
	o.TransfertSiege = &v
}

// GetContinuiteEconomique returns the ContinuiteEconomique field value if set, zero value otherwise.
func (o *LienSuccession) GetContinuiteEconomique() bool {
	if o == nil || IsNil(o.ContinuiteEconomique) {
		var ret bool
		return ret
	}
	return *o.ContinuiteEconomique
}

// GetContinuiteEconomiqueOk returns a tuple with the ContinuiteEconomique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LienSuccession) GetContinuiteEconomiqueOk() (*bool, bool) {
	if o == nil || IsNil(o.ContinuiteEconomique) {
		return nil, false
	}
	return o.ContinuiteEconomique, true
}

// HasContinuiteEconomique returns a boolean if a field has been set.
func (o *LienSuccession) HasContinuiteEconomique() bool {
	if o != nil && !IsNil(o.ContinuiteEconomique) {
		return true
	}

	return false
}

// SetContinuiteEconomique gets a reference to the given bool and assigns it to the ContinuiteEconomique field.
func (o *LienSuccession) SetContinuiteEconomique(v bool) {
	o.ContinuiteEconomique = &v
}

func (o LienSuccession) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LienSuccession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Siret) {
		toSerialize["siret"] = o.Siret
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.TransfertSiege) {
		toSerialize["transfert_siege"] = o.TransfertSiege
	}
	if !IsNil(o.ContinuiteEconomique) {
		toSerialize["continuite_economique"] = o.ContinuiteEconomique
	}
	return toSerialize, nil
}

type NullableLienSuccession struct {
	value *LienSuccession
	isSet bool
}

func (v NullableLienSuccession) Get() *LienSuccession {
	return v.value
}

func (v *NullableLienSuccession) Set(val *LienSuccession) {
	v.value = val
	v.isSet = true
}

func (v NullableLienSuccession) IsSet() bool {
	return v.isSet
}

func (v *NullableLienSuccession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLienSuccession(val *LienSuccession) *NullableLienSuccession {
	return &NullableLienSuccession{value: val, isSet: true}
}

func (v NullableLienSuccession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLienSuccession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


