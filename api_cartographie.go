/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// CartographieAPIService CartographieAPI service
type CartographieAPIService service

type ApiCartographieRequest struct {
	ctx context.Context
	ApiService *CartographieAPIService
	siren *string
	inclureEntreprisesDirigees *bool
	inclureEntreprisesCitees *bool
	inclureSci *bool
	autoriserModifications *bool
	rejeterPremierDegre *bool
	degre *int32
}

// SIREN de l&#39;entreprise
func (r ApiCartographieRequest) Siren(siren string) ApiCartographieRequest {
	r.siren = &siren
	return r
}

// Si vrai, la cartographie intègrera les entreprises dirigées par l&#39;entreprise recherchée et les entreprises qui dirigent l&#39;entreprise recherchée. Valeur par défaut : &#x60;true&#x60;.
func (r ApiCartographieRequest) InclureEntreprisesDirigees(inclureEntreprisesDirigees bool) ApiCartographieRequest {
	r.inclureEntreprisesDirigees = &inclureEntreprisesDirigees
	return r
}

// Si vrai, la cartographie intègrera les entreprises citées conjointement avec l&#39;entreprise recherchée dans des actes et statuts. Valeur par défaut : &#x60;false&#x60;.
func (r ApiCartographieRequest) InclureEntreprisesCitees(inclureEntreprisesCitees bool) ApiCartographieRequest {
	r.inclureEntreprisesCitees = &inclureEntreprisesCitees
	return r
}

// Si vrai, la cartographie intègrera les SCI. Valeur par défaut : &#x60;true&#x60;.
func (r ApiCartographieRequest) InclureSci(inclureSci bool) ApiCartographieRequest {
	r.inclureSci = &inclureSci
	return r
}

// Si vrai, la cartographie pourra adapter automatiquement ses paramètres si ceux choisis manuellement ne sont pas idéaux. Valeur par défaut : &#x60;false&#x60;.
func (r ApiCartographieRequest) AutoriserModifications(autoriserModifications bool) ApiCartographieRequest {
	r.autoriserModifications = &autoriserModifications
	return r
}

// Si vrai et que la cartographie ne fait apparaître que l&#39;entreprise recherchée ainsi que ses dirigeants directs, une erreur 404 sera renvoyée et la requête ne sera pas comptabilisée dans le quota de jetons. Valeur par défaut : &#x60;false&#x60;.
func (r ApiCartographieRequest) RejeterPremierDegre(rejeterPremierDegre bool) ApiCartographieRequest {
	r.rejeterPremierDegre = &rejeterPremierDegre
	return r
}

// Permet de choisir manuellement un degré pour la cartographie. Seuls deux états sont possibles : un nombre &lt;&#x3D; 2 ou bien un nombre &gt; 2. Cela veut dire que 0, 1 ou 2 donneront la même cartographie, tout comme 3, 4 ou 5.
func (r ApiCartographieRequest) Degre(degre int32) ApiCartographieRequest {
	r.degre = &degre
	return r
}

func (r ApiCartographieRequest) Execute() (*Cartographie, *http.Response, error) {
	return r.ApiService.CartographieExecute(r)
}

/*
Cartographie Récupère les données permettant d'établir une cartographie d'une entreprise.

Cette route fournit les données nécessaires à l'établissement de la cartographie Pappers d'une entreprise telle qu'elle apparaît sur les fiches Pappers (exemple https://www.pappers.fr/entreprise/google-france-443061841#cartographie).

- La requête est gratuite (erreur 404) si seul le noeud principal (l'entreprise recherchée) est disponible.
- La requête coûte 1 jeton si, en plus du noeud principal, des noeuds dirigeants directs de l'entreprise sont disponibles. Il est possible de rejeter ces cas avec le paramètre `rejeter_premier_degre`. La requête est alors gratuite (erreur 404).
- La requête coûte 3 jetons si des noeuds supplémentaires sont disponibles.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCartographieRequest
*/
func (a *CartographieAPIService) Cartographie(ctx context.Context) ApiCartographieRequest {
	return ApiCartographieRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Cartographie
func (a *CartographieAPIService) CartographieExecute(r ApiCartographieRequest) (*Cartographie, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Cartographie
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CartographieAPIService.Cartographie")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entreprise/cartographie"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.siren == nil {
		return localVarReturnValue, nil, reportError("siren is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "siren", r.siren, "form", "")
	if r.inclureEntreprisesDirigees != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inclure_entreprises_dirigees", r.inclureEntreprisesDirigees, "form", "")
	}
	if r.inclureEntreprisesCitees != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inclure_entreprises_citees", r.inclureEntreprisesCitees, "form", "")
	}
	if r.inclureSci != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inclure_sci", r.inclureSci, "form", "")
	}
	if r.autoriserModifications != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoriser_modifications", r.autoriserModifications, "form", "")
	}
	if r.rejeterPremierDegre != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rejeter_premier_degre", r.rejeterPremierDegre, "form", "")
	}
	if r.degre != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "degre", r.degre, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
