/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EntrepriseFicheAllOfDetailsPartsIndirectes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntrepriseFicheAllOfDetailsPartsIndirectes{}

// EntrepriseFicheAllOfDetailsPartsIndirectes Détails des parts détenues de façon indirecte par le bénéficiaire effectif.
type EntrepriseFicheAllOfDetailsPartsIndirectes struct {
	// Parts détenues de façon indirecte par le biais d'une indivision par le bénéficiaire effectif, en pourcentage des parts totales.
	PourcentageEnIndivision *float32 `json:"pourcentage_en_indivision,omitempty"`
	// Parts détenues de façon indirecte par le biais d'une personne morale par le bénéficiaire effectif, en pourcentage des parts totales.
	PourcentageEnPersonneMorale *float32 `json:"pourcentage_en_personne_morale,omitempty"`
	DetailsEnIndivision *EntrepriseFicheAllOfDetailsPartsIndirectesDetailsEnIndivision `json:"details_en_indivision,omitempty"`
	DetailsEnPersonneMorale *EntrepriseFicheAllOfDetailsPartsIndirectesDetailsEnPersonneMorale `json:"details_en_personne_morale,omitempty"`
}

// NewEntrepriseFicheAllOfDetailsPartsIndirectes instantiates a new EntrepriseFicheAllOfDetailsPartsIndirectes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntrepriseFicheAllOfDetailsPartsIndirectes() *EntrepriseFicheAllOfDetailsPartsIndirectes {
	this := EntrepriseFicheAllOfDetailsPartsIndirectes{}
	return &this
}

// NewEntrepriseFicheAllOfDetailsPartsIndirectesWithDefaults instantiates a new EntrepriseFicheAllOfDetailsPartsIndirectes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntrepriseFicheAllOfDetailsPartsIndirectesWithDefaults() *EntrepriseFicheAllOfDetailsPartsIndirectes {
	this := EntrepriseFicheAllOfDetailsPartsIndirectes{}
	return &this
}

// GetPourcentageEnIndivision returns the PourcentageEnIndivision field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfDetailsPartsIndirectes) GetPourcentageEnIndivision() float32 {
	if o == nil || IsNil(o.PourcentageEnIndivision) {
		var ret float32
		return ret
	}
	return *o.PourcentageEnIndivision
}

// GetPourcentageEnIndivisionOk returns a tuple with the PourcentageEnIndivision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfDetailsPartsIndirectes) GetPourcentageEnIndivisionOk() (*float32, bool) {
	if o == nil || IsNil(o.PourcentageEnIndivision) {
		return nil, false
	}
	return o.PourcentageEnIndivision, true
}

// HasPourcentageEnIndivision returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfDetailsPartsIndirectes) HasPourcentageEnIndivision() bool {
	if o != nil && !IsNil(o.PourcentageEnIndivision) {
		return true
	}

	return false
}

// SetPourcentageEnIndivision gets a reference to the given float32 and assigns it to the PourcentageEnIndivision field.
func (o *EntrepriseFicheAllOfDetailsPartsIndirectes) SetPourcentageEnIndivision(v float32) {
	o.PourcentageEnIndivision = &v
}

// GetPourcentageEnPersonneMorale returns the PourcentageEnPersonneMorale field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfDetailsPartsIndirectes) GetPourcentageEnPersonneMorale() float32 {
	if o == nil || IsNil(o.PourcentageEnPersonneMorale) {
		var ret float32
		return ret
	}
	return *o.PourcentageEnPersonneMorale
}

// GetPourcentageEnPersonneMoraleOk returns a tuple with the PourcentageEnPersonneMorale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfDetailsPartsIndirectes) GetPourcentageEnPersonneMoraleOk() (*float32, bool) {
	if o == nil || IsNil(o.PourcentageEnPersonneMorale) {
		return nil, false
	}
	return o.PourcentageEnPersonneMorale, true
}

// HasPourcentageEnPersonneMorale returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfDetailsPartsIndirectes) HasPourcentageEnPersonneMorale() bool {
	if o != nil && !IsNil(o.PourcentageEnPersonneMorale) {
		return true
	}

	return false
}

// SetPourcentageEnPersonneMorale gets a reference to the given float32 and assigns it to the PourcentageEnPersonneMorale field.
func (o *EntrepriseFicheAllOfDetailsPartsIndirectes) SetPourcentageEnPersonneMorale(v float32) {
	o.PourcentageEnPersonneMorale = &v
}

// GetDetailsEnIndivision returns the DetailsEnIndivision field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfDetailsPartsIndirectes) GetDetailsEnIndivision() EntrepriseFicheAllOfDetailsPartsIndirectesDetailsEnIndivision {
	if o == nil || IsNil(o.DetailsEnIndivision) {
		var ret EntrepriseFicheAllOfDetailsPartsIndirectesDetailsEnIndivision
		return ret
	}
	return *o.DetailsEnIndivision
}

// GetDetailsEnIndivisionOk returns a tuple with the DetailsEnIndivision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfDetailsPartsIndirectes) GetDetailsEnIndivisionOk() (*EntrepriseFicheAllOfDetailsPartsIndirectesDetailsEnIndivision, bool) {
	if o == nil || IsNil(o.DetailsEnIndivision) {
		return nil, false
	}
	return o.DetailsEnIndivision, true
}

// HasDetailsEnIndivision returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfDetailsPartsIndirectes) HasDetailsEnIndivision() bool {
	if o != nil && !IsNil(o.DetailsEnIndivision) {
		return true
	}

	return false
}

// SetDetailsEnIndivision gets a reference to the given EntrepriseFicheAllOfDetailsPartsIndirectesDetailsEnIndivision and assigns it to the DetailsEnIndivision field.
func (o *EntrepriseFicheAllOfDetailsPartsIndirectes) SetDetailsEnIndivision(v EntrepriseFicheAllOfDetailsPartsIndirectesDetailsEnIndivision) {
	o.DetailsEnIndivision = &v
}

// GetDetailsEnPersonneMorale returns the DetailsEnPersonneMorale field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfDetailsPartsIndirectes) GetDetailsEnPersonneMorale() EntrepriseFicheAllOfDetailsPartsIndirectesDetailsEnPersonneMorale {
	if o == nil || IsNil(o.DetailsEnPersonneMorale) {
		var ret EntrepriseFicheAllOfDetailsPartsIndirectesDetailsEnPersonneMorale
		return ret
	}
	return *o.DetailsEnPersonneMorale
}

// GetDetailsEnPersonneMoraleOk returns a tuple with the DetailsEnPersonneMorale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfDetailsPartsIndirectes) GetDetailsEnPersonneMoraleOk() (*EntrepriseFicheAllOfDetailsPartsIndirectesDetailsEnPersonneMorale, bool) {
	if o == nil || IsNil(o.DetailsEnPersonneMorale) {
		return nil, false
	}
	return o.DetailsEnPersonneMorale, true
}

// HasDetailsEnPersonneMorale returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfDetailsPartsIndirectes) HasDetailsEnPersonneMorale() bool {
	if o != nil && !IsNil(o.DetailsEnPersonneMorale) {
		return true
	}

	return false
}

// SetDetailsEnPersonneMorale gets a reference to the given EntrepriseFicheAllOfDetailsPartsIndirectesDetailsEnPersonneMorale and assigns it to the DetailsEnPersonneMorale field.
func (o *EntrepriseFicheAllOfDetailsPartsIndirectes) SetDetailsEnPersonneMorale(v EntrepriseFicheAllOfDetailsPartsIndirectesDetailsEnPersonneMorale) {
	o.DetailsEnPersonneMorale = &v
}

func (o EntrepriseFicheAllOfDetailsPartsIndirectes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntrepriseFicheAllOfDetailsPartsIndirectes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PourcentageEnIndivision) {
		toSerialize["pourcentage_en_indivision"] = o.PourcentageEnIndivision
	}
	if !IsNil(o.PourcentageEnPersonneMorale) {
		toSerialize["pourcentage_en_personne_morale"] = o.PourcentageEnPersonneMorale
	}
	if !IsNil(o.DetailsEnIndivision) {
		toSerialize["details_en_indivision"] = o.DetailsEnIndivision
	}
	if !IsNil(o.DetailsEnPersonneMorale) {
		toSerialize["details_en_personne_morale"] = o.DetailsEnPersonneMorale
	}
	return toSerialize, nil
}

type NullableEntrepriseFicheAllOfDetailsPartsIndirectes struct {
	value *EntrepriseFicheAllOfDetailsPartsIndirectes
	isSet bool
}

func (v NullableEntrepriseFicheAllOfDetailsPartsIndirectes) Get() *EntrepriseFicheAllOfDetailsPartsIndirectes {
	return v.value
}

func (v *NullableEntrepriseFicheAllOfDetailsPartsIndirectes) Set(val *EntrepriseFicheAllOfDetailsPartsIndirectes) {
	v.value = val
	v.isSet = true
}

func (v NullableEntrepriseFicheAllOfDetailsPartsIndirectes) IsSet() bool {
	return v.isSet
}

func (v *NullableEntrepriseFicheAllOfDetailsPartsIndirectes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntrepriseFicheAllOfDetailsPartsIndirectes(val *EntrepriseFicheAllOfDetailsPartsIndirectes) *NullableEntrepriseFicheAllOfDetailsPartsIndirectes {
	return &NullableEntrepriseFicheAllOfDetailsPartsIndirectes{value: val, isSet: true}
}

func (v NullableEntrepriseFicheAllOfDetailsPartsIndirectes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntrepriseFicheAllOfDetailsPartsIndirectes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


