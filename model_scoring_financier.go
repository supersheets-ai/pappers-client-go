/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScoringFinancier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScoringFinancier{}

// ScoringFinancier Score financier de l'entreprise. Uniquement présent si demandé dans les champs supplémentaires.
type ScoringFinancier struct {
	// Note du score non financier de l'entreprise.
	Note *string `json:"note,omitempty"`
	// Score non financier de l'entreprise, entre 0 et 20.
	Score *int32 `json:"score,omitempty"`
	// Date de clôture des comptes de l'entreprise.
	DateClotureComptes *string `json:"date_cloture_comptes,omitempty"`
	DetailsScore *ScoringFinancierDetailsScore `json:"details_score,omitempty"`
	// Date de calcul du score non financier de l'entreprise.
	DateCalcul *string `json:"date_calcul,omitempty"`
	// Erreur lors du calcul du score non financier de l'entreprise.
	Erreur *string `json:"erreur,omitempty"`
}

// NewScoringFinancier instantiates a new ScoringFinancier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScoringFinancier() *ScoringFinancier {
	this := ScoringFinancier{}
	return &this
}

// NewScoringFinancierWithDefaults instantiates a new ScoringFinancier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScoringFinancierWithDefaults() *ScoringFinancier {
	this := ScoringFinancier{}
	return &this
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *ScoringFinancier) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScoringFinancier) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *ScoringFinancier) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *ScoringFinancier) SetNote(v string) {
	o.Note = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *ScoringFinancier) GetScore() int32 {
	if o == nil || IsNil(o.Score) {
		var ret int32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScoringFinancier) GetScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *ScoringFinancier) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given int32 and assigns it to the Score field.
func (o *ScoringFinancier) SetScore(v int32) {
	o.Score = &v
}

// GetDateClotureComptes returns the DateClotureComptes field value if set, zero value otherwise.
func (o *ScoringFinancier) GetDateClotureComptes() string {
	if o == nil || IsNil(o.DateClotureComptes) {
		var ret string
		return ret
	}
	return *o.DateClotureComptes
}

// GetDateClotureComptesOk returns a tuple with the DateClotureComptes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScoringFinancier) GetDateClotureComptesOk() (*string, bool) {
	if o == nil || IsNil(o.DateClotureComptes) {
		return nil, false
	}
	return o.DateClotureComptes, true
}

// HasDateClotureComptes returns a boolean if a field has been set.
func (o *ScoringFinancier) HasDateClotureComptes() bool {
	if o != nil && !IsNil(o.DateClotureComptes) {
		return true
	}

	return false
}

// SetDateClotureComptes gets a reference to the given string and assigns it to the DateClotureComptes field.
func (o *ScoringFinancier) SetDateClotureComptes(v string) {
	o.DateClotureComptes = &v
}

// GetDetailsScore returns the DetailsScore field value if set, zero value otherwise.
func (o *ScoringFinancier) GetDetailsScore() ScoringFinancierDetailsScore {
	if o == nil || IsNil(o.DetailsScore) {
		var ret ScoringFinancierDetailsScore
		return ret
	}
	return *o.DetailsScore
}

// GetDetailsScoreOk returns a tuple with the DetailsScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScoringFinancier) GetDetailsScoreOk() (*ScoringFinancierDetailsScore, bool) {
	if o == nil || IsNil(o.DetailsScore) {
		return nil, false
	}
	return o.DetailsScore, true
}

// HasDetailsScore returns a boolean if a field has been set.
func (o *ScoringFinancier) HasDetailsScore() bool {
	if o != nil && !IsNil(o.DetailsScore) {
		return true
	}

	return false
}

// SetDetailsScore gets a reference to the given ScoringFinancierDetailsScore and assigns it to the DetailsScore field.
func (o *ScoringFinancier) SetDetailsScore(v ScoringFinancierDetailsScore) {
	o.DetailsScore = &v
}

// GetDateCalcul returns the DateCalcul field value if set, zero value otherwise.
func (o *ScoringFinancier) GetDateCalcul() string {
	if o == nil || IsNil(o.DateCalcul) {
		var ret string
		return ret
	}
	return *o.DateCalcul
}

// GetDateCalculOk returns a tuple with the DateCalcul field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScoringFinancier) GetDateCalculOk() (*string, bool) {
	if o == nil || IsNil(o.DateCalcul) {
		return nil, false
	}
	return o.DateCalcul, true
}

// HasDateCalcul returns a boolean if a field has been set.
func (o *ScoringFinancier) HasDateCalcul() bool {
	if o != nil && !IsNil(o.DateCalcul) {
		return true
	}

	return false
}

// SetDateCalcul gets a reference to the given string and assigns it to the DateCalcul field.
func (o *ScoringFinancier) SetDateCalcul(v string) {
	o.DateCalcul = &v
}

// GetErreur returns the Erreur field value if set, zero value otherwise.
func (o *ScoringFinancier) GetErreur() string {
	if o == nil || IsNil(o.Erreur) {
		var ret string
		return ret
	}
	return *o.Erreur
}

// GetErreurOk returns a tuple with the Erreur field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScoringFinancier) GetErreurOk() (*string, bool) {
	if o == nil || IsNil(o.Erreur) {
		return nil, false
	}
	return o.Erreur, true
}

// HasErreur returns a boolean if a field has been set.
func (o *ScoringFinancier) HasErreur() bool {
	if o != nil && !IsNil(o.Erreur) {
		return true
	}

	return false
}

// SetErreur gets a reference to the given string and assigns it to the Erreur field.
func (o *ScoringFinancier) SetErreur(v string) {
	o.Erreur = &v
}

func (o ScoringFinancier) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScoringFinancier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !IsNil(o.DateClotureComptes) {
		toSerialize["date_cloture_comptes"] = o.DateClotureComptes
	}
	if !IsNil(o.DetailsScore) {
		toSerialize["details_score"] = o.DetailsScore
	}
	if !IsNil(o.DateCalcul) {
		toSerialize["date_calcul"] = o.DateCalcul
	}
	if !IsNil(o.Erreur) {
		toSerialize["erreur"] = o.Erreur
	}
	return toSerialize, nil
}

type NullableScoringFinancier struct {
	value *ScoringFinancier
	isSet bool
}

func (v NullableScoringFinancier) Get() *ScoringFinancier {
	return v.value
}

func (v *NullableScoringFinancier) Set(val *ScoringFinancier) {
	v.value = val
	v.isSet = true
}

func (v NullableScoringFinancier) IsSet() bool {
	return v.isSet
}

func (v *NullableScoringFinancier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScoringFinancier(val *ScoringFinancier) *NullableScoringFinancier {
	return &NullableScoringFinancier{value: val, isSet: true}
}

func (v NullableScoringFinancier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScoringFinancier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


