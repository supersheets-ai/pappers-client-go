/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BodaccAchat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BodaccAchat{}

// BodaccAchat struct for BodaccAchat
type BodaccAchat struct {
	Bodacc
	// Nom de l'entreprise concernée par la publication. Correspond à la dénomination en cas de personne morale et à nom + prenom en cas de personne physique.
	NomEntreprise *string `json:"nom_entreprise,omitempty"`
	// Vrai si l'entreprise concernée par la publication est une personne morale, faux si c'est une personne physique.
	PersonneMorale *bool `json:"personne_morale,omitempty"`
	// Dénomination de l'entreprise concernée par la publication (uniquement en cas de personne morale).
	Denomination *string `json:"denomination,omitempty"`
	// Nom de la personne physique concernée par la publication (uniquement en cas de personne physique).
	Nom *string `json:"nom,omitempty"`
	// Prénom de la personne physique concernée par la publication (uniquement en cas de personne physique).
	Prenom *string `json:"prenom,omitempty"`
	// Administration (dans le cas d'une personne morale).
	Administration *string `json:"administration,omitempty"`
	// Adresse de l'entreprise concernée par la publication.
	Adresse *string `json:"adresse,omitempty"`
	// Commentaires sur la publication.
	Commentaires *string `json:"commentaires,omitempty"`
	// Détails sur les oppositions.
	Oppositions *string `json:"oppositions,omitempty"`
	// Détails sur la déclaration de créance.
	DeclarationCreance *string `json:"declaration_creance,omitempty"`
	// Journal où a été publiée la publication légale.
	PublicationLegale *string `json:"publication_legale,omitempty"`
	// Dénomination de l'ancien propriétaire de l'établisement.
	DenominationAncienProprietaire *string `json:"denomination_ancien_proprietaire,omitempty"`
	// Siren de l'ancien propriétaire de l'établisement.
	SirenAncienProprietaire *string `json:"siren_ancien_proprietaire,omitempty"`
	// Dénomination de l'ancien exploitant de l'établisement.
	DenominationAncienExploitant *string `json:"denomination_ancien_exploitant,omitempty"`
	// Siren de l'ancien exploitant de l'établisement.
	SirenAncienExploitant *string `json:"siren_ancien_exploitant,omitempty"`
}

// NewBodaccAchat instantiates a new BodaccAchat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBodaccAchat() *BodaccAchat {
	this := BodaccAchat{}
	return &this
}

// NewBodaccAchatWithDefaults instantiates a new BodaccAchat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBodaccAchatWithDefaults() *BodaccAchat {
	this := BodaccAchat{}
	return &this
}

// GetNomEntreprise returns the NomEntreprise field value if set, zero value otherwise.
func (o *BodaccAchat) GetNomEntreprise() string {
	if o == nil || IsNil(o.NomEntreprise) {
		var ret string
		return ret
	}
	return *o.NomEntreprise
}

// GetNomEntrepriseOk returns a tuple with the NomEntreprise field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccAchat) GetNomEntrepriseOk() (*string, bool) {
	if o == nil || IsNil(o.NomEntreprise) {
		return nil, false
	}
	return o.NomEntreprise, true
}

// HasNomEntreprise returns a boolean if a field has been set.
func (o *BodaccAchat) HasNomEntreprise() bool {
	if o != nil && !IsNil(o.NomEntreprise) {
		return true
	}

	return false
}

// SetNomEntreprise gets a reference to the given string and assigns it to the NomEntreprise field.
func (o *BodaccAchat) SetNomEntreprise(v string) {
	o.NomEntreprise = &v
}

// GetPersonneMorale returns the PersonneMorale field value if set, zero value otherwise.
func (o *BodaccAchat) GetPersonneMorale() bool {
	if o == nil || IsNil(o.PersonneMorale) {
		var ret bool
		return ret
	}
	return *o.PersonneMorale
}

// GetPersonneMoraleOk returns a tuple with the PersonneMorale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccAchat) GetPersonneMoraleOk() (*bool, bool) {
	if o == nil || IsNil(o.PersonneMorale) {
		return nil, false
	}
	return o.PersonneMorale, true
}

// HasPersonneMorale returns a boolean if a field has been set.
func (o *BodaccAchat) HasPersonneMorale() bool {
	if o != nil && !IsNil(o.PersonneMorale) {
		return true
	}

	return false
}

// SetPersonneMorale gets a reference to the given bool and assigns it to the PersonneMorale field.
func (o *BodaccAchat) SetPersonneMorale(v bool) {
	o.PersonneMorale = &v
}

// GetDenomination returns the Denomination field value if set, zero value otherwise.
func (o *BodaccAchat) GetDenomination() string {
	if o == nil || IsNil(o.Denomination) {
		var ret string
		return ret
	}
	return *o.Denomination
}

// GetDenominationOk returns a tuple with the Denomination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccAchat) GetDenominationOk() (*string, bool) {
	if o == nil || IsNil(o.Denomination) {
		return nil, false
	}
	return o.Denomination, true
}

// HasDenomination returns a boolean if a field has been set.
func (o *BodaccAchat) HasDenomination() bool {
	if o != nil && !IsNil(o.Denomination) {
		return true
	}

	return false
}

// SetDenomination gets a reference to the given string and assigns it to the Denomination field.
func (o *BodaccAchat) SetDenomination(v string) {
	o.Denomination = &v
}

// GetNom returns the Nom field value if set, zero value otherwise.
func (o *BodaccAchat) GetNom() string {
	if o == nil || IsNil(o.Nom) {
		var ret string
		return ret
	}
	return *o.Nom
}

// GetNomOk returns a tuple with the Nom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccAchat) GetNomOk() (*string, bool) {
	if o == nil || IsNil(o.Nom) {
		return nil, false
	}
	return o.Nom, true
}

// HasNom returns a boolean if a field has been set.
func (o *BodaccAchat) HasNom() bool {
	if o != nil && !IsNil(o.Nom) {
		return true
	}

	return false
}

// SetNom gets a reference to the given string and assigns it to the Nom field.
func (o *BodaccAchat) SetNom(v string) {
	o.Nom = &v
}

// GetPrenom returns the Prenom field value if set, zero value otherwise.
func (o *BodaccAchat) GetPrenom() string {
	if o == nil || IsNil(o.Prenom) {
		var ret string
		return ret
	}
	return *o.Prenom
}

// GetPrenomOk returns a tuple with the Prenom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccAchat) GetPrenomOk() (*string, bool) {
	if o == nil || IsNil(o.Prenom) {
		return nil, false
	}
	return o.Prenom, true
}

// HasPrenom returns a boolean if a field has been set.
func (o *BodaccAchat) HasPrenom() bool {
	if o != nil && !IsNil(o.Prenom) {
		return true
	}

	return false
}

// SetPrenom gets a reference to the given string and assigns it to the Prenom field.
func (o *BodaccAchat) SetPrenom(v string) {
	o.Prenom = &v
}

// GetAdministration returns the Administration field value if set, zero value otherwise.
func (o *BodaccAchat) GetAdministration() string {
	if o == nil || IsNil(o.Administration) {
		var ret string
		return ret
	}
	return *o.Administration
}

// GetAdministrationOk returns a tuple with the Administration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccAchat) GetAdministrationOk() (*string, bool) {
	if o == nil || IsNil(o.Administration) {
		return nil, false
	}
	return o.Administration, true
}

// HasAdministration returns a boolean if a field has been set.
func (o *BodaccAchat) HasAdministration() bool {
	if o != nil && !IsNil(o.Administration) {
		return true
	}

	return false
}

// SetAdministration gets a reference to the given string and assigns it to the Administration field.
func (o *BodaccAchat) SetAdministration(v string) {
	o.Administration = &v
}

// GetAdresse returns the Adresse field value if set, zero value otherwise.
func (o *BodaccAchat) GetAdresse() string {
	if o == nil || IsNil(o.Adresse) {
		var ret string
		return ret
	}
	return *o.Adresse
}

// GetAdresseOk returns a tuple with the Adresse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccAchat) GetAdresseOk() (*string, bool) {
	if o == nil || IsNil(o.Adresse) {
		return nil, false
	}
	return o.Adresse, true
}

// HasAdresse returns a boolean if a field has been set.
func (o *BodaccAchat) HasAdresse() bool {
	if o != nil && !IsNil(o.Adresse) {
		return true
	}

	return false
}

// SetAdresse gets a reference to the given string and assigns it to the Adresse field.
func (o *BodaccAchat) SetAdresse(v string) {
	o.Adresse = &v
}

// GetCommentaires returns the Commentaires field value if set, zero value otherwise.
func (o *BodaccAchat) GetCommentaires() string {
	if o == nil || IsNil(o.Commentaires) {
		var ret string
		return ret
	}
	return *o.Commentaires
}

// GetCommentairesOk returns a tuple with the Commentaires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccAchat) GetCommentairesOk() (*string, bool) {
	if o == nil || IsNil(o.Commentaires) {
		return nil, false
	}
	return o.Commentaires, true
}

// HasCommentaires returns a boolean if a field has been set.
func (o *BodaccAchat) HasCommentaires() bool {
	if o != nil && !IsNil(o.Commentaires) {
		return true
	}

	return false
}

// SetCommentaires gets a reference to the given string and assigns it to the Commentaires field.
func (o *BodaccAchat) SetCommentaires(v string) {
	o.Commentaires = &v
}

// GetOppositions returns the Oppositions field value if set, zero value otherwise.
func (o *BodaccAchat) GetOppositions() string {
	if o == nil || IsNil(o.Oppositions) {
		var ret string
		return ret
	}
	return *o.Oppositions
}

// GetOppositionsOk returns a tuple with the Oppositions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccAchat) GetOppositionsOk() (*string, bool) {
	if o == nil || IsNil(o.Oppositions) {
		return nil, false
	}
	return o.Oppositions, true
}

// HasOppositions returns a boolean if a field has been set.
func (o *BodaccAchat) HasOppositions() bool {
	if o != nil && !IsNil(o.Oppositions) {
		return true
	}

	return false
}

// SetOppositions gets a reference to the given string and assigns it to the Oppositions field.
func (o *BodaccAchat) SetOppositions(v string) {
	o.Oppositions = &v
}

// GetDeclarationCreance returns the DeclarationCreance field value if set, zero value otherwise.
func (o *BodaccAchat) GetDeclarationCreance() string {
	if o == nil || IsNil(o.DeclarationCreance) {
		var ret string
		return ret
	}
	return *o.DeclarationCreance
}

// GetDeclarationCreanceOk returns a tuple with the DeclarationCreance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccAchat) GetDeclarationCreanceOk() (*string, bool) {
	if o == nil || IsNil(o.DeclarationCreance) {
		return nil, false
	}
	return o.DeclarationCreance, true
}

// HasDeclarationCreance returns a boolean if a field has been set.
func (o *BodaccAchat) HasDeclarationCreance() bool {
	if o != nil && !IsNil(o.DeclarationCreance) {
		return true
	}

	return false
}

// SetDeclarationCreance gets a reference to the given string and assigns it to the DeclarationCreance field.
func (o *BodaccAchat) SetDeclarationCreance(v string) {
	o.DeclarationCreance = &v
}

// GetPublicationLegale returns the PublicationLegale field value if set, zero value otherwise.
func (o *BodaccAchat) GetPublicationLegale() string {
	if o == nil || IsNil(o.PublicationLegale) {
		var ret string
		return ret
	}
	return *o.PublicationLegale
}

// GetPublicationLegaleOk returns a tuple with the PublicationLegale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccAchat) GetPublicationLegaleOk() (*string, bool) {
	if o == nil || IsNil(o.PublicationLegale) {
		return nil, false
	}
	return o.PublicationLegale, true
}

// HasPublicationLegale returns a boolean if a field has been set.
func (o *BodaccAchat) HasPublicationLegale() bool {
	if o != nil && !IsNil(o.PublicationLegale) {
		return true
	}

	return false
}

// SetPublicationLegale gets a reference to the given string and assigns it to the PublicationLegale field.
func (o *BodaccAchat) SetPublicationLegale(v string) {
	o.PublicationLegale = &v
}

// GetDenominationAncienProprietaire returns the DenominationAncienProprietaire field value if set, zero value otherwise.
func (o *BodaccAchat) GetDenominationAncienProprietaire() string {
	if o == nil || IsNil(o.DenominationAncienProprietaire) {
		var ret string
		return ret
	}
	return *o.DenominationAncienProprietaire
}

// GetDenominationAncienProprietaireOk returns a tuple with the DenominationAncienProprietaire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccAchat) GetDenominationAncienProprietaireOk() (*string, bool) {
	if o == nil || IsNil(o.DenominationAncienProprietaire) {
		return nil, false
	}
	return o.DenominationAncienProprietaire, true
}

// HasDenominationAncienProprietaire returns a boolean if a field has been set.
func (o *BodaccAchat) HasDenominationAncienProprietaire() bool {
	if o != nil && !IsNil(o.DenominationAncienProprietaire) {
		return true
	}

	return false
}

// SetDenominationAncienProprietaire gets a reference to the given string and assigns it to the DenominationAncienProprietaire field.
func (o *BodaccAchat) SetDenominationAncienProprietaire(v string) {
	o.DenominationAncienProprietaire = &v
}

// GetSirenAncienProprietaire returns the SirenAncienProprietaire field value if set, zero value otherwise.
func (o *BodaccAchat) GetSirenAncienProprietaire() string {
	if o == nil || IsNil(o.SirenAncienProprietaire) {
		var ret string
		return ret
	}
	return *o.SirenAncienProprietaire
}

// GetSirenAncienProprietaireOk returns a tuple with the SirenAncienProprietaire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccAchat) GetSirenAncienProprietaireOk() (*string, bool) {
	if o == nil || IsNil(o.SirenAncienProprietaire) {
		return nil, false
	}
	return o.SirenAncienProprietaire, true
}

// HasSirenAncienProprietaire returns a boolean if a field has been set.
func (o *BodaccAchat) HasSirenAncienProprietaire() bool {
	if o != nil && !IsNil(o.SirenAncienProprietaire) {
		return true
	}

	return false
}

// SetSirenAncienProprietaire gets a reference to the given string and assigns it to the SirenAncienProprietaire field.
func (o *BodaccAchat) SetSirenAncienProprietaire(v string) {
	o.SirenAncienProprietaire = &v
}

// GetDenominationAncienExploitant returns the DenominationAncienExploitant field value if set, zero value otherwise.
func (o *BodaccAchat) GetDenominationAncienExploitant() string {
	if o == nil || IsNil(o.DenominationAncienExploitant) {
		var ret string
		return ret
	}
	return *o.DenominationAncienExploitant
}

// GetDenominationAncienExploitantOk returns a tuple with the DenominationAncienExploitant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccAchat) GetDenominationAncienExploitantOk() (*string, bool) {
	if o == nil || IsNil(o.DenominationAncienExploitant) {
		return nil, false
	}
	return o.DenominationAncienExploitant, true
}

// HasDenominationAncienExploitant returns a boolean if a field has been set.
func (o *BodaccAchat) HasDenominationAncienExploitant() bool {
	if o != nil && !IsNil(o.DenominationAncienExploitant) {
		return true
	}

	return false
}

// SetDenominationAncienExploitant gets a reference to the given string and assigns it to the DenominationAncienExploitant field.
func (o *BodaccAchat) SetDenominationAncienExploitant(v string) {
	o.DenominationAncienExploitant = &v
}

// GetSirenAncienExploitant returns the SirenAncienExploitant field value if set, zero value otherwise.
func (o *BodaccAchat) GetSirenAncienExploitant() string {
	if o == nil || IsNil(o.SirenAncienExploitant) {
		var ret string
		return ret
	}
	return *o.SirenAncienExploitant
}

// GetSirenAncienExploitantOk returns a tuple with the SirenAncienExploitant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccAchat) GetSirenAncienExploitantOk() (*string, bool) {
	if o == nil || IsNil(o.SirenAncienExploitant) {
		return nil, false
	}
	return o.SirenAncienExploitant, true
}

// HasSirenAncienExploitant returns a boolean if a field has been set.
func (o *BodaccAchat) HasSirenAncienExploitant() bool {
	if o != nil && !IsNil(o.SirenAncienExploitant) {
		return true
	}

	return false
}

// SetSirenAncienExploitant gets a reference to the given string and assigns it to the SirenAncienExploitant field.
func (o *BodaccAchat) SetSirenAncienExploitant(v string) {
	o.SirenAncienExploitant = &v
}

func (o BodaccAchat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BodaccAchat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBodacc, errBodacc := json.Marshal(o.Bodacc)
	if errBodacc != nil {
		return map[string]interface{}{}, errBodacc
	}
	errBodacc = json.Unmarshal([]byte(serializedBodacc), &toSerialize)
	if errBodacc != nil {
		return map[string]interface{}{}, errBodacc
	}
	if !IsNil(o.NomEntreprise) {
		toSerialize["nom_entreprise"] = o.NomEntreprise
	}
	if !IsNil(o.PersonneMorale) {
		toSerialize["personne_morale"] = o.PersonneMorale
	}
	if !IsNil(o.Denomination) {
		toSerialize["denomination"] = o.Denomination
	}
	if !IsNil(o.Nom) {
		toSerialize["nom"] = o.Nom
	}
	if !IsNil(o.Prenom) {
		toSerialize["prenom"] = o.Prenom
	}
	if !IsNil(o.Administration) {
		toSerialize["administration"] = o.Administration
	}
	if !IsNil(o.Adresse) {
		toSerialize["adresse"] = o.Adresse
	}
	if !IsNil(o.Commentaires) {
		toSerialize["commentaires"] = o.Commentaires
	}
	if !IsNil(o.Oppositions) {
		toSerialize["oppositions"] = o.Oppositions
	}
	if !IsNil(o.DeclarationCreance) {
		toSerialize["declaration_creance"] = o.DeclarationCreance
	}
	if !IsNil(o.PublicationLegale) {
		toSerialize["publication_legale"] = o.PublicationLegale
	}
	if !IsNil(o.DenominationAncienProprietaire) {
		toSerialize["denomination_ancien_proprietaire"] = o.DenominationAncienProprietaire
	}
	if !IsNil(o.SirenAncienProprietaire) {
		toSerialize["siren_ancien_proprietaire"] = o.SirenAncienProprietaire
	}
	if !IsNil(o.DenominationAncienExploitant) {
		toSerialize["denomination_ancien_exploitant"] = o.DenominationAncienExploitant
	}
	if !IsNil(o.SirenAncienExploitant) {
		toSerialize["siren_ancien_exploitant"] = o.SirenAncienExploitant
	}
	return toSerialize, nil
}

type NullableBodaccAchat struct {
	value *BodaccAchat
	isSet bool
}

func (v NullableBodaccAchat) Get() *BodaccAchat {
	return v.value
}

func (v *NullableBodaccAchat) Set(val *BodaccAchat) {
	v.value = val
	v.isSet = true
}

func (v NullableBodaccAchat) IsSet() bool {
	return v.isSet
}

func (v *NullableBodaccAchat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBodaccAchat(val *BodaccAchat) *NullableBodaccAchat {
	return &NullableBodaccAchat{value: val, isSet: true}
}

func (v NullableBodaccAchat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBodaccAchat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


