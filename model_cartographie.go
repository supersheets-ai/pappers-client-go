/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Cartographie type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cartographie{}

// Cartographie struct for Cartographie
type Cartographie struct {
	// Liste des noeuds entreprises.
	Entreprises []CartographieEntreprisesInner `json:"entreprises,omitempty"`
	// Liste des noeuds personnes (dirigeants ou bénéficiaires effectifs).
	Personnes []CartographiePersonnesInner `json:"personnes,omitempty"`
	// Liste des arêtes liant les noeuds entreprises avec des noeuds personnes.
	LiensEntreprisesPersonnes [][]CartographieLiensEntreprisesPersonnesInnerInner `json:"liens_entreprises_personnes,omitempty"`
	// Liste des arêtes liant les noeuds entreprises avec des d'autres noeuds entreprises.
	LiensEntreprisesEntreprises [][]string `json:"liens_entreprises_entreprises,omitempty"`
	// Description des paramètres ayant été automatiquement modifiés.
	ModificationsEffectuees map[string]interface{} `json:"modifications_effectuees,omitempty"`
}

// NewCartographie instantiates a new Cartographie object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCartographie() *Cartographie {
	this := Cartographie{}
	return &this
}

// NewCartographieWithDefaults instantiates a new Cartographie object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCartographieWithDefaults() *Cartographie {
	this := Cartographie{}
	return &this
}

// GetEntreprises returns the Entreprises field value if set, zero value otherwise.
func (o *Cartographie) GetEntreprises() []CartographieEntreprisesInner {
	if o == nil || IsNil(o.Entreprises) {
		var ret []CartographieEntreprisesInner
		return ret
	}
	return o.Entreprises
}

// GetEntreprisesOk returns a tuple with the Entreprises field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cartographie) GetEntreprisesOk() ([]CartographieEntreprisesInner, bool) {
	if o == nil || IsNil(o.Entreprises) {
		return nil, false
	}
	return o.Entreprises, true
}

// HasEntreprises returns a boolean if a field has been set.
func (o *Cartographie) HasEntreprises() bool {
	if o != nil && !IsNil(o.Entreprises) {
		return true
	}

	return false
}

// SetEntreprises gets a reference to the given []CartographieEntreprisesInner and assigns it to the Entreprises field.
func (o *Cartographie) SetEntreprises(v []CartographieEntreprisesInner) {
	o.Entreprises = v
}

// GetPersonnes returns the Personnes field value if set, zero value otherwise.
func (o *Cartographie) GetPersonnes() []CartographiePersonnesInner {
	if o == nil || IsNil(o.Personnes) {
		var ret []CartographiePersonnesInner
		return ret
	}
	return o.Personnes
}

// GetPersonnesOk returns a tuple with the Personnes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cartographie) GetPersonnesOk() ([]CartographiePersonnesInner, bool) {
	if o == nil || IsNil(o.Personnes) {
		return nil, false
	}
	return o.Personnes, true
}

// HasPersonnes returns a boolean if a field has been set.
func (o *Cartographie) HasPersonnes() bool {
	if o != nil && !IsNil(o.Personnes) {
		return true
	}

	return false
}

// SetPersonnes gets a reference to the given []CartographiePersonnesInner and assigns it to the Personnes field.
func (o *Cartographie) SetPersonnes(v []CartographiePersonnesInner) {
	o.Personnes = v
}

// GetLiensEntreprisesPersonnes returns the LiensEntreprisesPersonnes field value if set, zero value otherwise.
func (o *Cartographie) GetLiensEntreprisesPersonnes() [][]CartographieLiensEntreprisesPersonnesInnerInner {
	if o == nil || IsNil(o.LiensEntreprisesPersonnes) {
		var ret [][]CartographieLiensEntreprisesPersonnesInnerInner
		return ret
	}
	return o.LiensEntreprisesPersonnes
}

// GetLiensEntreprisesPersonnesOk returns a tuple with the LiensEntreprisesPersonnes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cartographie) GetLiensEntreprisesPersonnesOk() ([][]CartographieLiensEntreprisesPersonnesInnerInner, bool) {
	if o == nil || IsNil(o.LiensEntreprisesPersonnes) {
		return nil, false
	}
	return o.LiensEntreprisesPersonnes, true
}

// HasLiensEntreprisesPersonnes returns a boolean if a field has been set.
func (o *Cartographie) HasLiensEntreprisesPersonnes() bool {
	if o != nil && !IsNil(o.LiensEntreprisesPersonnes) {
		return true
	}

	return false
}

// SetLiensEntreprisesPersonnes gets a reference to the given [][]CartographieLiensEntreprisesPersonnesInnerInner and assigns it to the LiensEntreprisesPersonnes field.
func (o *Cartographie) SetLiensEntreprisesPersonnes(v [][]CartographieLiensEntreprisesPersonnesInnerInner) {
	o.LiensEntreprisesPersonnes = v
}

// GetLiensEntreprisesEntreprises returns the LiensEntreprisesEntreprises field value if set, zero value otherwise.
func (o *Cartographie) GetLiensEntreprisesEntreprises() [][]string {
	if o == nil || IsNil(o.LiensEntreprisesEntreprises) {
		var ret [][]string
		return ret
	}
	return o.LiensEntreprisesEntreprises
}

// GetLiensEntreprisesEntreprisesOk returns a tuple with the LiensEntreprisesEntreprises field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cartographie) GetLiensEntreprisesEntreprisesOk() ([][]string, bool) {
	if o == nil || IsNil(o.LiensEntreprisesEntreprises) {
		return nil, false
	}
	return o.LiensEntreprisesEntreprises, true
}

// HasLiensEntreprisesEntreprises returns a boolean if a field has been set.
func (o *Cartographie) HasLiensEntreprisesEntreprises() bool {
	if o != nil && !IsNil(o.LiensEntreprisesEntreprises) {
		return true
	}

	return false
}

// SetLiensEntreprisesEntreprises gets a reference to the given [][]string and assigns it to the LiensEntreprisesEntreprises field.
func (o *Cartographie) SetLiensEntreprisesEntreprises(v [][]string) {
	o.LiensEntreprisesEntreprises = v
}

// GetModificationsEffectuees returns the ModificationsEffectuees field value if set, zero value otherwise.
func (o *Cartographie) GetModificationsEffectuees() map[string]interface{} {
	if o == nil || IsNil(o.ModificationsEffectuees) {
		var ret map[string]interface{}
		return ret
	}
	return o.ModificationsEffectuees
}

// GetModificationsEffectueesOk returns a tuple with the ModificationsEffectuees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cartographie) GetModificationsEffectueesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ModificationsEffectuees) {
		return map[string]interface{}{}, false
	}
	return o.ModificationsEffectuees, true
}

// HasModificationsEffectuees returns a boolean if a field has been set.
func (o *Cartographie) HasModificationsEffectuees() bool {
	if o != nil && !IsNil(o.ModificationsEffectuees) {
		return true
	}

	return false
}

// SetModificationsEffectuees gets a reference to the given map[string]interface{} and assigns it to the ModificationsEffectuees field.
func (o *Cartographie) SetModificationsEffectuees(v map[string]interface{}) {
	o.ModificationsEffectuees = v
}

func (o Cartographie) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cartographie) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Entreprises) {
		toSerialize["entreprises"] = o.Entreprises
	}
	if !IsNil(o.Personnes) {
		toSerialize["personnes"] = o.Personnes
	}
	if !IsNil(o.LiensEntreprisesPersonnes) {
		toSerialize["liens_entreprises_personnes"] = o.LiensEntreprisesPersonnes
	}
	if !IsNil(o.LiensEntreprisesEntreprises) {
		toSerialize["liens_entreprises_entreprises"] = o.LiensEntreprisesEntreprises
	}
	if !IsNil(o.ModificationsEffectuees) {
		toSerialize["modifications_effectuees"] = o.ModificationsEffectuees
	}
	return toSerialize, nil
}

type NullableCartographie struct {
	value *Cartographie
	isSet bool
}

func (v NullableCartographie) Get() *Cartographie {
	return v.value
}

func (v *NullableCartographie) Set(val *Cartographie) {
	v.value = val
	v.isSet = true
}

func (v NullableCartographie) IsSet() bool {
	return v.isSet
}

func (v *NullableCartographie) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCartographie(val *Cartographie) *NullableCartographie {
	return &NullableCartographie{value: val, isSet: true}
}

func (v NullableCartographie) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCartographie) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


