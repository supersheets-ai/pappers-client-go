/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BodaccProcedureCollective type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BodaccProcedureCollective{}

// BodaccProcedureCollective struct for BodaccProcedureCollective
type BodaccProcedureCollective struct {
	Bodacc
	// Famille de la procédure collective
	Famille *string `json:"famille,omitempty"`
	// Nature de la procédure collective
	Nature *string `json:"nature,omitempty"`
	// Complément sur le jugement de procédure collective
	ComplementJugement *string `json:"complement_jugement,omitempty"`
}

// NewBodaccProcedureCollective instantiates a new BodaccProcedureCollective object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBodaccProcedureCollective() *BodaccProcedureCollective {
	this := BodaccProcedureCollective{}
	return &this
}

// NewBodaccProcedureCollectiveWithDefaults instantiates a new BodaccProcedureCollective object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBodaccProcedureCollectiveWithDefaults() *BodaccProcedureCollective {
	this := BodaccProcedureCollective{}
	return &this
}

// GetFamille returns the Famille field value if set, zero value otherwise.
func (o *BodaccProcedureCollective) GetFamille() string {
	if o == nil || IsNil(o.Famille) {
		var ret string
		return ret
	}
	return *o.Famille
}

// GetFamilleOk returns a tuple with the Famille field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccProcedureCollective) GetFamilleOk() (*string, bool) {
	if o == nil || IsNil(o.Famille) {
		return nil, false
	}
	return o.Famille, true
}

// HasFamille returns a boolean if a field has been set.
func (o *BodaccProcedureCollective) HasFamille() bool {
	if o != nil && !IsNil(o.Famille) {
		return true
	}

	return false
}

// SetFamille gets a reference to the given string and assigns it to the Famille field.
func (o *BodaccProcedureCollective) SetFamille(v string) {
	o.Famille = &v
}

// GetNature returns the Nature field value if set, zero value otherwise.
func (o *BodaccProcedureCollective) GetNature() string {
	if o == nil || IsNil(o.Nature) {
		var ret string
		return ret
	}
	return *o.Nature
}

// GetNatureOk returns a tuple with the Nature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccProcedureCollective) GetNatureOk() (*string, bool) {
	if o == nil || IsNil(o.Nature) {
		return nil, false
	}
	return o.Nature, true
}

// HasNature returns a boolean if a field has been set.
func (o *BodaccProcedureCollective) HasNature() bool {
	if o != nil && !IsNil(o.Nature) {
		return true
	}

	return false
}

// SetNature gets a reference to the given string and assigns it to the Nature field.
func (o *BodaccProcedureCollective) SetNature(v string) {
	o.Nature = &v
}

// GetComplementJugement returns the ComplementJugement field value if set, zero value otherwise.
func (o *BodaccProcedureCollective) GetComplementJugement() string {
	if o == nil || IsNil(o.ComplementJugement) {
		var ret string
		return ret
	}
	return *o.ComplementJugement
}

// GetComplementJugementOk returns a tuple with the ComplementJugement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccProcedureCollective) GetComplementJugementOk() (*string, bool) {
	if o == nil || IsNil(o.ComplementJugement) {
		return nil, false
	}
	return o.ComplementJugement, true
}

// HasComplementJugement returns a boolean if a field has been set.
func (o *BodaccProcedureCollective) HasComplementJugement() bool {
	if o != nil && !IsNil(o.ComplementJugement) {
		return true
	}

	return false
}

// SetComplementJugement gets a reference to the given string and assigns it to the ComplementJugement field.
func (o *BodaccProcedureCollective) SetComplementJugement(v string) {
	o.ComplementJugement = &v
}

func (o BodaccProcedureCollective) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BodaccProcedureCollective) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBodacc, errBodacc := json.Marshal(o.Bodacc)
	if errBodacc != nil {
		return map[string]interface{}{}, errBodacc
	}
	errBodacc = json.Unmarshal([]byte(serializedBodacc), &toSerialize)
	if errBodacc != nil {
		return map[string]interface{}{}, errBodacc
	}
	if !IsNil(o.Famille) {
		toSerialize["famille"] = o.Famille
	}
	if !IsNil(o.Nature) {
		toSerialize["nature"] = o.Nature
	}
	if !IsNil(o.ComplementJugement) {
		toSerialize["complement_jugement"] = o.ComplementJugement
	}
	return toSerialize, nil
}

type NullableBodaccProcedureCollective struct {
	value *BodaccProcedureCollective
	isSet bool
}

func (v NullableBodaccProcedureCollective) Get() *BodaccProcedureCollective {
	return v.value
}

func (v *NullableBodaccProcedureCollective) Set(val *BodaccProcedureCollective) {
	v.value = val
	v.isSet = true
}

func (v NullableBodaccProcedureCollective) IsSet() bool {
	return v.isSet
}

func (v *NullableBodaccProcedureCollective) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBodaccProcedureCollective(val *BodaccProcedureCollective) *NullableBodaccProcedureCollective {
	return &NullableBodaccProcedureCollective{value: val, isSet: true}
}

func (v NullableBodaccProcedureCollective) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBodaccProcedureCollective) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


