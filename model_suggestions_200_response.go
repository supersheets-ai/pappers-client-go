/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Suggestions200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Suggestions200Response{}

// Suggestions200Response struct for Suggestions200Response
type Suggestions200Response struct {
	// Liste des entreprises dont le nom (dénomination ou nom/prénom) peut compléter la recherche textuelle. Uniquement présent si le paramètre `cibles` contient `nom_entreprise`.
	ResultatsNomEntreprise []Suggestions200ResponseResultatsNomEntrepriseInner `json:"resultats_nom_entreprise,omitempty"`
	// Liste des entreprises dont la dénomination peut compléter la recherche textuelle (concerne les personnes morales seulement). Uniquement présent si le paramètre `cibles` contient `denomination`.
	ResultatsDenomination []Suggestions200ResponseResultatsDenominationInner `json:"resultats_denomination,omitempty"`
	// Liste des entreprises dont le nom complet (nom + prénom ou prénom + nom) peut compléter la recherche textuelle (concerne les personnes physiques seulement). Uniquement présent si le paramètre `cibles` contient `nom_complet`.
	ResultatsNomComplet []Suggestions200ResponseResultatsNomCompletInner `json:"resultats_nom_complet,omitempty"`
	// Liste des représentants dont le nom complet (nom + prénom ou prénom + nom) peut compléter la recherche textuelle. Uniquement présent si le paramètre `cibles` contient `representant`.
	ResultatsRepresentant []Suggestions200ResponseResultatsRepresentantInner `json:"resultats_representant,omitempty"`
	// Liste des entreprises dont le numéro SIREN peut compléter la recherche textuelle. Uniquement présent si le paramètre `cibles` contient `siren`.
	ResultatsSiren []Suggestions200ResponseResultatsSirenInner `json:"resultats_siren,omitempty"`
	// Liste des entreprises dont le numéro SIRET peut compléter la recherche textuelle. Uniquement présent si le paramètre `cibles` contient `siret`.
	ResultatsSiret []Suggestions200ResponseResultatsSiretInner `json:"resultats_siret,omitempty"`
}

// NewSuggestions200Response instantiates a new Suggestions200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuggestions200Response() *Suggestions200Response {
	this := Suggestions200Response{}
	return &this
}

// NewSuggestions200ResponseWithDefaults instantiates a new Suggestions200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuggestions200ResponseWithDefaults() *Suggestions200Response {
	this := Suggestions200Response{}
	return &this
}

// GetResultatsNomEntreprise returns the ResultatsNomEntreprise field value if set, zero value otherwise.
func (o *Suggestions200Response) GetResultatsNomEntreprise() []Suggestions200ResponseResultatsNomEntrepriseInner {
	if o == nil || IsNil(o.ResultatsNomEntreprise) {
		var ret []Suggestions200ResponseResultatsNomEntrepriseInner
		return ret
	}
	return o.ResultatsNomEntreprise
}

// GetResultatsNomEntrepriseOk returns a tuple with the ResultatsNomEntreprise field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suggestions200Response) GetResultatsNomEntrepriseOk() ([]Suggestions200ResponseResultatsNomEntrepriseInner, bool) {
	if o == nil || IsNil(o.ResultatsNomEntreprise) {
		return nil, false
	}
	return o.ResultatsNomEntreprise, true
}

// HasResultatsNomEntreprise returns a boolean if a field has been set.
func (o *Suggestions200Response) HasResultatsNomEntreprise() bool {
	if o != nil && !IsNil(o.ResultatsNomEntreprise) {
		return true
	}

	return false
}

// SetResultatsNomEntreprise gets a reference to the given []Suggestions200ResponseResultatsNomEntrepriseInner and assigns it to the ResultatsNomEntreprise field.
func (o *Suggestions200Response) SetResultatsNomEntreprise(v []Suggestions200ResponseResultatsNomEntrepriseInner) {
	o.ResultatsNomEntreprise = v
}

// GetResultatsDenomination returns the ResultatsDenomination field value if set, zero value otherwise.
func (o *Suggestions200Response) GetResultatsDenomination() []Suggestions200ResponseResultatsDenominationInner {
	if o == nil || IsNil(o.ResultatsDenomination) {
		var ret []Suggestions200ResponseResultatsDenominationInner
		return ret
	}
	return o.ResultatsDenomination
}

// GetResultatsDenominationOk returns a tuple with the ResultatsDenomination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suggestions200Response) GetResultatsDenominationOk() ([]Suggestions200ResponseResultatsDenominationInner, bool) {
	if o == nil || IsNil(o.ResultatsDenomination) {
		return nil, false
	}
	return o.ResultatsDenomination, true
}

// HasResultatsDenomination returns a boolean if a field has been set.
func (o *Suggestions200Response) HasResultatsDenomination() bool {
	if o != nil && !IsNil(o.ResultatsDenomination) {
		return true
	}

	return false
}

// SetResultatsDenomination gets a reference to the given []Suggestions200ResponseResultatsDenominationInner and assigns it to the ResultatsDenomination field.
func (o *Suggestions200Response) SetResultatsDenomination(v []Suggestions200ResponseResultatsDenominationInner) {
	o.ResultatsDenomination = v
}

// GetResultatsNomComplet returns the ResultatsNomComplet field value if set, zero value otherwise.
func (o *Suggestions200Response) GetResultatsNomComplet() []Suggestions200ResponseResultatsNomCompletInner {
	if o == nil || IsNil(o.ResultatsNomComplet) {
		var ret []Suggestions200ResponseResultatsNomCompletInner
		return ret
	}
	return o.ResultatsNomComplet
}

// GetResultatsNomCompletOk returns a tuple with the ResultatsNomComplet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suggestions200Response) GetResultatsNomCompletOk() ([]Suggestions200ResponseResultatsNomCompletInner, bool) {
	if o == nil || IsNil(o.ResultatsNomComplet) {
		return nil, false
	}
	return o.ResultatsNomComplet, true
}

// HasResultatsNomComplet returns a boolean if a field has been set.
func (o *Suggestions200Response) HasResultatsNomComplet() bool {
	if o != nil && !IsNil(o.ResultatsNomComplet) {
		return true
	}

	return false
}

// SetResultatsNomComplet gets a reference to the given []Suggestions200ResponseResultatsNomCompletInner and assigns it to the ResultatsNomComplet field.
func (o *Suggestions200Response) SetResultatsNomComplet(v []Suggestions200ResponseResultatsNomCompletInner) {
	o.ResultatsNomComplet = v
}

// GetResultatsRepresentant returns the ResultatsRepresentant field value if set, zero value otherwise.
func (o *Suggestions200Response) GetResultatsRepresentant() []Suggestions200ResponseResultatsRepresentantInner {
	if o == nil || IsNil(o.ResultatsRepresentant) {
		var ret []Suggestions200ResponseResultatsRepresentantInner
		return ret
	}
	return o.ResultatsRepresentant
}

// GetResultatsRepresentantOk returns a tuple with the ResultatsRepresentant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suggestions200Response) GetResultatsRepresentantOk() ([]Suggestions200ResponseResultatsRepresentantInner, bool) {
	if o == nil || IsNil(o.ResultatsRepresentant) {
		return nil, false
	}
	return o.ResultatsRepresentant, true
}

// HasResultatsRepresentant returns a boolean if a field has been set.
func (o *Suggestions200Response) HasResultatsRepresentant() bool {
	if o != nil && !IsNil(o.ResultatsRepresentant) {
		return true
	}

	return false
}

// SetResultatsRepresentant gets a reference to the given []Suggestions200ResponseResultatsRepresentantInner and assigns it to the ResultatsRepresentant field.
func (o *Suggestions200Response) SetResultatsRepresentant(v []Suggestions200ResponseResultatsRepresentantInner) {
	o.ResultatsRepresentant = v
}

// GetResultatsSiren returns the ResultatsSiren field value if set, zero value otherwise.
func (o *Suggestions200Response) GetResultatsSiren() []Suggestions200ResponseResultatsSirenInner {
	if o == nil || IsNil(o.ResultatsSiren) {
		var ret []Suggestions200ResponseResultatsSirenInner
		return ret
	}
	return o.ResultatsSiren
}

// GetResultatsSirenOk returns a tuple with the ResultatsSiren field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suggestions200Response) GetResultatsSirenOk() ([]Suggestions200ResponseResultatsSirenInner, bool) {
	if o == nil || IsNil(o.ResultatsSiren) {
		return nil, false
	}
	return o.ResultatsSiren, true
}

// HasResultatsSiren returns a boolean if a field has been set.
func (o *Suggestions200Response) HasResultatsSiren() bool {
	if o != nil && !IsNil(o.ResultatsSiren) {
		return true
	}

	return false
}

// SetResultatsSiren gets a reference to the given []Suggestions200ResponseResultatsSirenInner and assigns it to the ResultatsSiren field.
func (o *Suggestions200Response) SetResultatsSiren(v []Suggestions200ResponseResultatsSirenInner) {
	o.ResultatsSiren = v
}

// GetResultatsSiret returns the ResultatsSiret field value if set, zero value otherwise.
func (o *Suggestions200Response) GetResultatsSiret() []Suggestions200ResponseResultatsSiretInner {
	if o == nil || IsNil(o.ResultatsSiret) {
		var ret []Suggestions200ResponseResultatsSiretInner
		return ret
	}
	return o.ResultatsSiret
}

// GetResultatsSiretOk returns a tuple with the ResultatsSiret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suggestions200Response) GetResultatsSiretOk() ([]Suggestions200ResponseResultatsSiretInner, bool) {
	if o == nil || IsNil(o.ResultatsSiret) {
		return nil, false
	}
	return o.ResultatsSiret, true
}

// HasResultatsSiret returns a boolean if a field has been set.
func (o *Suggestions200Response) HasResultatsSiret() bool {
	if o != nil && !IsNil(o.ResultatsSiret) {
		return true
	}

	return false
}

// SetResultatsSiret gets a reference to the given []Suggestions200ResponseResultatsSiretInner and assigns it to the ResultatsSiret field.
func (o *Suggestions200Response) SetResultatsSiret(v []Suggestions200ResponseResultatsSiretInner) {
	o.ResultatsSiret = v
}

func (o Suggestions200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Suggestions200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResultatsNomEntreprise) {
		toSerialize["resultats_nom_entreprise"] = o.ResultatsNomEntreprise
	}
	if !IsNil(o.ResultatsDenomination) {
		toSerialize["resultats_denomination"] = o.ResultatsDenomination
	}
	if !IsNil(o.ResultatsNomComplet) {
		toSerialize["resultats_nom_complet"] = o.ResultatsNomComplet
	}
	if !IsNil(o.ResultatsRepresentant) {
		toSerialize["resultats_representant"] = o.ResultatsRepresentant
	}
	if !IsNil(o.ResultatsSiren) {
		toSerialize["resultats_siren"] = o.ResultatsSiren
	}
	if !IsNil(o.ResultatsSiret) {
		toSerialize["resultats_siret"] = o.ResultatsSiret
	}
	return toSerialize, nil
}

type NullableSuggestions200Response struct {
	value *Suggestions200Response
	isSet bool
}

func (v NullableSuggestions200Response) Get() *Suggestions200Response {
	return v.value
}

func (v *NullableSuggestions200Response) Set(val *Suggestions200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSuggestions200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSuggestions200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuggestions200Response(val *Suggestions200Response) *NullableSuggestions200Response {
	return &NullableSuggestions200Response{value: val, isSet: true}
}

func (v NullableSuggestions200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuggestions200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


