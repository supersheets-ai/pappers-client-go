/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EntrepriseFicheAllOfEvenements type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntrepriseFicheAllOfEvenements{}

// EntrepriseFicheAllOfEvenements struct for EntrepriseFicheAllOfEvenements
type EntrepriseFicheAllOfEvenements struct {
	// Type d'événement.
	Type *string `json:"type,omitempty"`
	// Identifiant de l'événement.
	IdentifiantEvenement *string `json:"identifiant_evenement,omitempty"`
	// Référence de l'événement.
	Reference *string `json:"reference,omitempty"`
	// Date de l'événement, au format AAAA-MM-JJ.
	Date *string `json:"date,omitempty"`
	// Numéro du BOPI dans lequel l'événement a été publié.
	NumeroBopi *string `json:"numero_bopi,omitempty"`
	// Date de publication du BOPI au format AAAA-MM-JJ.
	DateBopi *string `json:"date_bopi,omitempty"`
	// Bénéficiaire associé à l'événement.
	Beneficiaire *string `json:"beneficiaire,omitempty"`
}

// NewEntrepriseFicheAllOfEvenements instantiates a new EntrepriseFicheAllOfEvenements object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntrepriseFicheAllOfEvenements() *EntrepriseFicheAllOfEvenements {
	this := EntrepriseFicheAllOfEvenements{}
	return &this
}

// NewEntrepriseFicheAllOfEvenementsWithDefaults instantiates a new EntrepriseFicheAllOfEvenements object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntrepriseFicheAllOfEvenementsWithDefaults() *EntrepriseFicheAllOfEvenements {
	this := EntrepriseFicheAllOfEvenements{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfEvenements) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfEvenements) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfEvenements) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EntrepriseFicheAllOfEvenements) SetType(v string) {
	o.Type = &v
}

// GetIdentifiantEvenement returns the IdentifiantEvenement field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfEvenements) GetIdentifiantEvenement() string {
	if o == nil || IsNil(o.IdentifiantEvenement) {
		var ret string
		return ret
	}
	return *o.IdentifiantEvenement
}

// GetIdentifiantEvenementOk returns a tuple with the IdentifiantEvenement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfEvenements) GetIdentifiantEvenementOk() (*string, bool) {
	if o == nil || IsNil(o.IdentifiantEvenement) {
		return nil, false
	}
	return o.IdentifiantEvenement, true
}

// HasIdentifiantEvenement returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfEvenements) HasIdentifiantEvenement() bool {
	if o != nil && !IsNil(o.IdentifiantEvenement) {
		return true
	}

	return false
}

// SetIdentifiantEvenement gets a reference to the given string and assigns it to the IdentifiantEvenement field.
func (o *EntrepriseFicheAllOfEvenements) SetIdentifiantEvenement(v string) {
	o.IdentifiantEvenement = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfEvenements) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfEvenements) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfEvenements) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *EntrepriseFicheAllOfEvenements) SetReference(v string) {
	o.Reference = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfEvenements) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfEvenements) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfEvenements) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *EntrepriseFicheAllOfEvenements) SetDate(v string) {
	o.Date = &v
}

// GetNumeroBopi returns the NumeroBopi field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfEvenements) GetNumeroBopi() string {
	if o == nil || IsNil(o.NumeroBopi) {
		var ret string
		return ret
	}
	return *o.NumeroBopi
}

// GetNumeroBopiOk returns a tuple with the NumeroBopi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfEvenements) GetNumeroBopiOk() (*string, bool) {
	if o == nil || IsNil(o.NumeroBopi) {
		return nil, false
	}
	return o.NumeroBopi, true
}

// HasNumeroBopi returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfEvenements) HasNumeroBopi() bool {
	if o != nil && !IsNil(o.NumeroBopi) {
		return true
	}

	return false
}

// SetNumeroBopi gets a reference to the given string and assigns it to the NumeroBopi field.
func (o *EntrepriseFicheAllOfEvenements) SetNumeroBopi(v string) {
	o.NumeroBopi = &v
}

// GetDateBopi returns the DateBopi field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfEvenements) GetDateBopi() string {
	if o == nil || IsNil(o.DateBopi) {
		var ret string
		return ret
	}
	return *o.DateBopi
}

// GetDateBopiOk returns a tuple with the DateBopi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfEvenements) GetDateBopiOk() (*string, bool) {
	if o == nil || IsNil(o.DateBopi) {
		return nil, false
	}
	return o.DateBopi, true
}

// HasDateBopi returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfEvenements) HasDateBopi() bool {
	if o != nil && !IsNil(o.DateBopi) {
		return true
	}

	return false
}

// SetDateBopi gets a reference to the given string and assigns it to the DateBopi field.
func (o *EntrepriseFicheAllOfEvenements) SetDateBopi(v string) {
	o.DateBopi = &v
}

// GetBeneficiaire returns the Beneficiaire field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfEvenements) GetBeneficiaire() string {
	if o == nil || IsNil(o.Beneficiaire) {
		var ret string
		return ret
	}
	return *o.Beneficiaire
}

// GetBeneficiaireOk returns a tuple with the Beneficiaire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfEvenements) GetBeneficiaireOk() (*string, bool) {
	if o == nil || IsNil(o.Beneficiaire) {
		return nil, false
	}
	return o.Beneficiaire, true
}

// HasBeneficiaire returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfEvenements) HasBeneficiaire() bool {
	if o != nil && !IsNil(o.Beneficiaire) {
		return true
	}

	return false
}

// SetBeneficiaire gets a reference to the given string and assigns it to the Beneficiaire field.
func (o *EntrepriseFicheAllOfEvenements) SetBeneficiaire(v string) {
	o.Beneficiaire = &v
}

func (o EntrepriseFicheAllOfEvenements) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntrepriseFicheAllOfEvenements) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.IdentifiantEvenement) {
		toSerialize["identifiant_evenement"] = o.IdentifiantEvenement
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.NumeroBopi) {
		toSerialize["numero_bopi"] = o.NumeroBopi
	}
	if !IsNil(o.DateBopi) {
		toSerialize["date_bopi"] = o.DateBopi
	}
	if !IsNil(o.Beneficiaire) {
		toSerialize["beneficiaire"] = o.Beneficiaire
	}
	return toSerialize, nil
}

type NullableEntrepriseFicheAllOfEvenements struct {
	value *EntrepriseFicheAllOfEvenements
	isSet bool
}

func (v NullableEntrepriseFicheAllOfEvenements) Get() *EntrepriseFicheAllOfEvenements {
	return v.value
}

func (v *NullableEntrepriseFicheAllOfEvenements) Set(val *EntrepriseFicheAllOfEvenements) {
	v.value = val
	v.isSet = true
}

func (v NullableEntrepriseFicheAllOfEvenements) IsSet() bool {
	return v.isSet
}

func (v *NullableEntrepriseFicheAllOfEvenements) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntrepriseFicheAllOfEvenements(val *EntrepriseFicheAllOfEvenements) *NullableEntrepriseFicheAllOfEvenements {
	return &NullableEntrepriseFicheAllOfEvenements{value: val, isSet: true}
}

func (v NullableEntrepriseFicheAllOfEvenements) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntrepriseFicheAllOfEvenements) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


