/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EntrepriseFicheAllOfComptes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntrepriseFicheAllOfComptes{}

// EntrepriseFicheAllOfComptes struct for EntrepriseFicheAllOfComptes
type EntrepriseFicheAllOfComptes struct {
	// Date de dépôt des comptes.
	DateDepot *string `json:"date_depot,omitempty"`
	// Date de dépôt formatée des comptes.
	DateDepotFormate *string `json:"date_depot_formate,omitempty"`
	// Date de clôture des comptes, au format AAAA-MM-JJ.
	DateCloture *string `json:"date_cloture,omitempty"`
	// Année de clôture des comptes.
	AnneeCloture *int32 `json:"annee_cloture,omitempty"`
	// Confidentialité totale des comptes.
	Confidentialite *bool `json:"confidentialite,omitempty"`
	// Confidentialité partielle des comptes (seul le compte de résultat est confidentiel, le reste des comptes sont disponibles).
	ConfidentialiteCompteDeResultat *bool `json:"confidentialite_compte_de_resultat,omitempty"`
	// Disponibilité des comptes au format PDF.
	Disponible *bool `json:"disponible,omitempty"`
	// Nom du fichier PDF des comptes.
	NomFichierPdf *string `json:"nom_fichier_pdf,omitempty"`
	// Token des comptes.
	Token *string `json:"token,omitempty"`
	// Disponibilité des comptes au format XLSX.
	DisponibleXlsx *bool `json:"disponible_xlsx,omitempty"`
	// Nom du fichier XLSX des comptes.
	NomFichierXlsx *string `json:"nom_fichier_xlsx,omitempty"`
	// Token des comptes XLSX.
	TokenXlsx *string `json:"token_xlsx,omitempty"`
}

// NewEntrepriseFicheAllOfComptes instantiates a new EntrepriseFicheAllOfComptes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntrepriseFicheAllOfComptes() *EntrepriseFicheAllOfComptes {
	this := EntrepriseFicheAllOfComptes{}
	return &this
}

// NewEntrepriseFicheAllOfComptesWithDefaults instantiates a new EntrepriseFicheAllOfComptes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntrepriseFicheAllOfComptesWithDefaults() *EntrepriseFicheAllOfComptes {
	this := EntrepriseFicheAllOfComptes{}
	return &this
}

// GetDateDepot returns the DateDepot field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfComptes) GetDateDepot() string {
	if o == nil || IsNil(o.DateDepot) {
		var ret string
		return ret
	}
	return *o.DateDepot
}

// GetDateDepotOk returns a tuple with the DateDepot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfComptes) GetDateDepotOk() (*string, bool) {
	if o == nil || IsNil(o.DateDepot) {
		return nil, false
	}
	return o.DateDepot, true
}

// HasDateDepot returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfComptes) HasDateDepot() bool {
	if o != nil && !IsNil(o.DateDepot) {
		return true
	}

	return false
}

// SetDateDepot gets a reference to the given string and assigns it to the DateDepot field.
func (o *EntrepriseFicheAllOfComptes) SetDateDepot(v string) {
	o.DateDepot = &v
}

// GetDateDepotFormate returns the DateDepotFormate field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfComptes) GetDateDepotFormate() string {
	if o == nil || IsNil(o.DateDepotFormate) {
		var ret string
		return ret
	}
	return *o.DateDepotFormate
}

// GetDateDepotFormateOk returns a tuple with the DateDepotFormate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfComptes) GetDateDepotFormateOk() (*string, bool) {
	if o == nil || IsNil(o.DateDepotFormate) {
		return nil, false
	}
	return o.DateDepotFormate, true
}

// HasDateDepotFormate returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfComptes) HasDateDepotFormate() bool {
	if o != nil && !IsNil(o.DateDepotFormate) {
		return true
	}

	return false
}

// SetDateDepotFormate gets a reference to the given string and assigns it to the DateDepotFormate field.
func (o *EntrepriseFicheAllOfComptes) SetDateDepotFormate(v string) {
	o.DateDepotFormate = &v
}

// GetDateCloture returns the DateCloture field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfComptes) GetDateCloture() string {
	if o == nil || IsNil(o.DateCloture) {
		var ret string
		return ret
	}
	return *o.DateCloture
}

// GetDateClotureOk returns a tuple with the DateCloture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfComptes) GetDateClotureOk() (*string, bool) {
	if o == nil || IsNil(o.DateCloture) {
		return nil, false
	}
	return o.DateCloture, true
}

// HasDateCloture returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfComptes) HasDateCloture() bool {
	if o != nil && !IsNil(o.DateCloture) {
		return true
	}

	return false
}

// SetDateCloture gets a reference to the given string and assigns it to the DateCloture field.
func (o *EntrepriseFicheAllOfComptes) SetDateCloture(v string) {
	o.DateCloture = &v
}

// GetAnneeCloture returns the AnneeCloture field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfComptes) GetAnneeCloture() int32 {
	if o == nil || IsNil(o.AnneeCloture) {
		var ret int32
		return ret
	}
	return *o.AnneeCloture
}

// GetAnneeClotureOk returns a tuple with the AnneeCloture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfComptes) GetAnneeClotureOk() (*int32, bool) {
	if o == nil || IsNil(o.AnneeCloture) {
		return nil, false
	}
	return o.AnneeCloture, true
}

// HasAnneeCloture returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfComptes) HasAnneeCloture() bool {
	if o != nil && !IsNil(o.AnneeCloture) {
		return true
	}

	return false
}

// SetAnneeCloture gets a reference to the given int32 and assigns it to the AnneeCloture field.
func (o *EntrepriseFicheAllOfComptes) SetAnneeCloture(v int32) {
	o.AnneeCloture = &v
}

// GetConfidentialite returns the Confidentialite field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfComptes) GetConfidentialite() bool {
	if o == nil || IsNil(o.Confidentialite) {
		var ret bool
		return ret
	}
	return *o.Confidentialite
}

// GetConfidentialiteOk returns a tuple with the Confidentialite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfComptes) GetConfidentialiteOk() (*bool, bool) {
	if o == nil || IsNil(o.Confidentialite) {
		return nil, false
	}
	return o.Confidentialite, true
}

// HasConfidentialite returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfComptes) HasConfidentialite() bool {
	if o != nil && !IsNil(o.Confidentialite) {
		return true
	}

	return false
}

// SetConfidentialite gets a reference to the given bool and assigns it to the Confidentialite field.
func (o *EntrepriseFicheAllOfComptes) SetConfidentialite(v bool) {
	o.Confidentialite = &v
}

// GetConfidentialiteCompteDeResultat returns the ConfidentialiteCompteDeResultat field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfComptes) GetConfidentialiteCompteDeResultat() bool {
	if o == nil || IsNil(o.ConfidentialiteCompteDeResultat) {
		var ret bool
		return ret
	}
	return *o.ConfidentialiteCompteDeResultat
}

// GetConfidentialiteCompteDeResultatOk returns a tuple with the ConfidentialiteCompteDeResultat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfComptes) GetConfidentialiteCompteDeResultatOk() (*bool, bool) {
	if o == nil || IsNil(o.ConfidentialiteCompteDeResultat) {
		return nil, false
	}
	return o.ConfidentialiteCompteDeResultat, true
}

// HasConfidentialiteCompteDeResultat returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfComptes) HasConfidentialiteCompteDeResultat() bool {
	if o != nil && !IsNil(o.ConfidentialiteCompteDeResultat) {
		return true
	}

	return false
}

// SetConfidentialiteCompteDeResultat gets a reference to the given bool and assigns it to the ConfidentialiteCompteDeResultat field.
func (o *EntrepriseFicheAllOfComptes) SetConfidentialiteCompteDeResultat(v bool) {
	o.ConfidentialiteCompteDeResultat = &v
}

// GetDisponible returns the Disponible field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfComptes) GetDisponible() bool {
	if o == nil || IsNil(o.Disponible) {
		var ret bool
		return ret
	}
	return *o.Disponible
}

// GetDisponibleOk returns a tuple with the Disponible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfComptes) GetDisponibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Disponible) {
		return nil, false
	}
	return o.Disponible, true
}

// HasDisponible returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfComptes) HasDisponible() bool {
	if o != nil && !IsNil(o.Disponible) {
		return true
	}

	return false
}

// SetDisponible gets a reference to the given bool and assigns it to the Disponible field.
func (o *EntrepriseFicheAllOfComptes) SetDisponible(v bool) {
	o.Disponible = &v
}

// GetNomFichierPdf returns the NomFichierPdf field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfComptes) GetNomFichierPdf() string {
	if o == nil || IsNil(o.NomFichierPdf) {
		var ret string
		return ret
	}
	return *o.NomFichierPdf
}

// GetNomFichierPdfOk returns a tuple with the NomFichierPdf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfComptes) GetNomFichierPdfOk() (*string, bool) {
	if o == nil || IsNil(o.NomFichierPdf) {
		return nil, false
	}
	return o.NomFichierPdf, true
}

// HasNomFichierPdf returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfComptes) HasNomFichierPdf() bool {
	if o != nil && !IsNil(o.NomFichierPdf) {
		return true
	}

	return false
}

// SetNomFichierPdf gets a reference to the given string and assigns it to the NomFichierPdf field.
func (o *EntrepriseFicheAllOfComptes) SetNomFichierPdf(v string) {
	o.NomFichierPdf = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfComptes) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfComptes) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfComptes) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *EntrepriseFicheAllOfComptes) SetToken(v string) {
	o.Token = &v
}

// GetDisponibleXlsx returns the DisponibleXlsx field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfComptes) GetDisponibleXlsx() bool {
	if o == nil || IsNil(o.DisponibleXlsx) {
		var ret bool
		return ret
	}
	return *o.DisponibleXlsx
}

// GetDisponibleXlsxOk returns a tuple with the DisponibleXlsx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfComptes) GetDisponibleXlsxOk() (*bool, bool) {
	if o == nil || IsNil(o.DisponibleXlsx) {
		return nil, false
	}
	return o.DisponibleXlsx, true
}

// HasDisponibleXlsx returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfComptes) HasDisponibleXlsx() bool {
	if o != nil && !IsNil(o.DisponibleXlsx) {
		return true
	}

	return false
}

// SetDisponibleXlsx gets a reference to the given bool and assigns it to the DisponibleXlsx field.
func (o *EntrepriseFicheAllOfComptes) SetDisponibleXlsx(v bool) {
	o.DisponibleXlsx = &v
}

// GetNomFichierXlsx returns the NomFichierXlsx field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfComptes) GetNomFichierXlsx() string {
	if o == nil || IsNil(o.NomFichierXlsx) {
		var ret string
		return ret
	}
	return *o.NomFichierXlsx
}

// GetNomFichierXlsxOk returns a tuple with the NomFichierXlsx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfComptes) GetNomFichierXlsxOk() (*string, bool) {
	if o == nil || IsNil(o.NomFichierXlsx) {
		return nil, false
	}
	return o.NomFichierXlsx, true
}

// HasNomFichierXlsx returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfComptes) HasNomFichierXlsx() bool {
	if o != nil && !IsNil(o.NomFichierXlsx) {
		return true
	}

	return false
}

// SetNomFichierXlsx gets a reference to the given string and assigns it to the NomFichierXlsx field.
func (o *EntrepriseFicheAllOfComptes) SetNomFichierXlsx(v string) {
	o.NomFichierXlsx = &v
}

// GetTokenXlsx returns the TokenXlsx field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfComptes) GetTokenXlsx() string {
	if o == nil || IsNil(o.TokenXlsx) {
		var ret string
		return ret
	}
	return *o.TokenXlsx
}

// GetTokenXlsxOk returns a tuple with the TokenXlsx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfComptes) GetTokenXlsxOk() (*string, bool) {
	if o == nil || IsNil(o.TokenXlsx) {
		return nil, false
	}
	return o.TokenXlsx, true
}

// HasTokenXlsx returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfComptes) HasTokenXlsx() bool {
	if o != nil && !IsNil(o.TokenXlsx) {
		return true
	}

	return false
}

// SetTokenXlsx gets a reference to the given string and assigns it to the TokenXlsx field.
func (o *EntrepriseFicheAllOfComptes) SetTokenXlsx(v string) {
	o.TokenXlsx = &v
}

func (o EntrepriseFicheAllOfComptes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntrepriseFicheAllOfComptes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateDepot) {
		toSerialize["date_depot"] = o.DateDepot
	}
	if !IsNil(o.DateDepotFormate) {
		toSerialize["date_depot_formate"] = o.DateDepotFormate
	}
	if !IsNil(o.DateCloture) {
		toSerialize["date_cloture"] = o.DateCloture
	}
	if !IsNil(o.AnneeCloture) {
		toSerialize["annee_cloture"] = o.AnneeCloture
	}
	if !IsNil(o.Confidentialite) {
		toSerialize["confidentialite"] = o.Confidentialite
	}
	if !IsNil(o.ConfidentialiteCompteDeResultat) {
		toSerialize["confidentialite_compte_de_resultat"] = o.ConfidentialiteCompteDeResultat
	}
	if !IsNil(o.Disponible) {
		toSerialize["disponible"] = o.Disponible
	}
	if !IsNil(o.NomFichierPdf) {
		toSerialize["nom_fichier_pdf"] = o.NomFichierPdf
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.DisponibleXlsx) {
		toSerialize["disponible_xlsx"] = o.DisponibleXlsx
	}
	if !IsNil(o.NomFichierXlsx) {
		toSerialize["nom_fichier_xlsx"] = o.NomFichierXlsx
	}
	if !IsNil(o.TokenXlsx) {
		toSerialize["token_xlsx"] = o.TokenXlsx
	}
	return toSerialize, nil
}

type NullableEntrepriseFicheAllOfComptes struct {
	value *EntrepriseFicheAllOfComptes
	isSet bool
}

func (v NullableEntrepriseFicheAllOfComptes) Get() *EntrepriseFicheAllOfComptes {
	return v.value
}

func (v *NullableEntrepriseFicheAllOfComptes) Set(val *EntrepriseFicheAllOfComptes) {
	v.value = val
	v.isSet = true
}

func (v NullableEntrepriseFicheAllOfComptes) IsSet() bool {
	return v.isSet
}

func (v *NullableEntrepriseFicheAllOfComptes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntrepriseFicheAllOfComptes(val *EntrepriseFicheAllOfComptes) *NullableEntrepriseFicheAllOfComptes {
	return &NullableEntrepriseFicheAllOfComptes{value: val, isSet: true}
}

func (v NullableEntrepriseFicheAllOfComptes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntrepriseFicheAllOfComptes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


