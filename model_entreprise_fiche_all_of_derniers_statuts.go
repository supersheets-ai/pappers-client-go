/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EntrepriseFicheAllOfDerniersStatuts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntrepriseFicheAllOfDerniersStatuts{}

// EntrepriseFicheAllOfDerniersStatuts Liste des statuts de l'entreprise.
type EntrepriseFicheAllOfDerniersStatuts struct {
	// Date de dépôt des statuts, au format AAAA-MM-JJ.
	DateDepot *string `json:"date_depot,omitempty"`
	// Date de dépôt formaté des statuts, au format JJ/MM/AAAA.
	DateDepotFormate *string `json:"date_depot_formate,omitempty"`
	// Disponibilité des statuts.
	Disponible *bool `json:"disponible,omitempty"`
	// Nom du fichier pdf des statuts.
	NomFichierPdf *string `json:"nom_fichier_pdf,omitempty"`
	// Token des statuts.
	Token *string `json:"token,omitempty"`
	// Champ \"type\" du document contenant les statuts.
	Type *string `json:"type,omitempty"`
	// Champ \"decision\" du document contenant les statuts.
	Decision *string `json:"decision,omitempty"`
	// Date de publication des statuts, au format AAAA-MM-JJ.
	DateActe *string `json:"date_acte,omitempty"`
	// Date de publication des statuts, au format JJ/MM/AAAA.
	DateActeFormate *string `json:"date_acte_formate,omitempty"`
}

// NewEntrepriseFicheAllOfDerniersStatuts instantiates a new EntrepriseFicheAllOfDerniersStatuts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntrepriseFicheAllOfDerniersStatuts() *EntrepriseFicheAllOfDerniersStatuts {
	this := EntrepriseFicheAllOfDerniersStatuts{}
	return &this
}

// NewEntrepriseFicheAllOfDerniersStatutsWithDefaults instantiates a new EntrepriseFicheAllOfDerniersStatuts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntrepriseFicheAllOfDerniersStatutsWithDefaults() *EntrepriseFicheAllOfDerniersStatuts {
	this := EntrepriseFicheAllOfDerniersStatuts{}
	return &this
}

// GetDateDepot returns the DateDepot field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfDerniersStatuts) GetDateDepot() string {
	if o == nil || IsNil(o.DateDepot) {
		var ret string
		return ret
	}
	return *o.DateDepot
}

// GetDateDepotOk returns a tuple with the DateDepot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfDerniersStatuts) GetDateDepotOk() (*string, bool) {
	if o == nil || IsNil(o.DateDepot) {
		return nil, false
	}
	return o.DateDepot, true
}

// HasDateDepot returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfDerniersStatuts) HasDateDepot() bool {
	if o != nil && !IsNil(o.DateDepot) {
		return true
	}

	return false
}

// SetDateDepot gets a reference to the given string and assigns it to the DateDepot field.
func (o *EntrepriseFicheAllOfDerniersStatuts) SetDateDepot(v string) {
	o.DateDepot = &v
}

// GetDateDepotFormate returns the DateDepotFormate field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfDerniersStatuts) GetDateDepotFormate() string {
	if o == nil || IsNil(o.DateDepotFormate) {
		var ret string
		return ret
	}
	return *o.DateDepotFormate
}

// GetDateDepotFormateOk returns a tuple with the DateDepotFormate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfDerniersStatuts) GetDateDepotFormateOk() (*string, bool) {
	if o == nil || IsNil(o.DateDepotFormate) {
		return nil, false
	}
	return o.DateDepotFormate, true
}

// HasDateDepotFormate returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfDerniersStatuts) HasDateDepotFormate() bool {
	if o != nil && !IsNil(o.DateDepotFormate) {
		return true
	}

	return false
}

// SetDateDepotFormate gets a reference to the given string and assigns it to the DateDepotFormate field.
func (o *EntrepriseFicheAllOfDerniersStatuts) SetDateDepotFormate(v string) {
	o.DateDepotFormate = &v
}

// GetDisponible returns the Disponible field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfDerniersStatuts) GetDisponible() bool {
	if o == nil || IsNil(o.Disponible) {
		var ret bool
		return ret
	}
	return *o.Disponible
}

// GetDisponibleOk returns a tuple with the Disponible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfDerniersStatuts) GetDisponibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Disponible) {
		return nil, false
	}
	return o.Disponible, true
}

// HasDisponible returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfDerniersStatuts) HasDisponible() bool {
	if o != nil && !IsNil(o.Disponible) {
		return true
	}

	return false
}

// SetDisponible gets a reference to the given bool and assigns it to the Disponible field.
func (o *EntrepriseFicheAllOfDerniersStatuts) SetDisponible(v bool) {
	o.Disponible = &v
}

// GetNomFichierPdf returns the NomFichierPdf field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfDerniersStatuts) GetNomFichierPdf() string {
	if o == nil || IsNil(o.NomFichierPdf) {
		var ret string
		return ret
	}
	return *o.NomFichierPdf
}

// GetNomFichierPdfOk returns a tuple with the NomFichierPdf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfDerniersStatuts) GetNomFichierPdfOk() (*string, bool) {
	if o == nil || IsNil(o.NomFichierPdf) {
		return nil, false
	}
	return o.NomFichierPdf, true
}

// HasNomFichierPdf returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfDerniersStatuts) HasNomFichierPdf() bool {
	if o != nil && !IsNil(o.NomFichierPdf) {
		return true
	}

	return false
}

// SetNomFichierPdf gets a reference to the given string and assigns it to the NomFichierPdf field.
func (o *EntrepriseFicheAllOfDerniersStatuts) SetNomFichierPdf(v string) {
	o.NomFichierPdf = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfDerniersStatuts) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfDerniersStatuts) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfDerniersStatuts) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *EntrepriseFicheAllOfDerniersStatuts) SetToken(v string) {
	o.Token = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfDerniersStatuts) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfDerniersStatuts) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfDerniersStatuts) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EntrepriseFicheAllOfDerniersStatuts) SetType(v string) {
	o.Type = &v
}

// GetDecision returns the Decision field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfDerniersStatuts) GetDecision() string {
	if o == nil || IsNil(o.Decision) {
		var ret string
		return ret
	}
	return *o.Decision
}

// GetDecisionOk returns a tuple with the Decision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfDerniersStatuts) GetDecisionOk() (*string, bool) {
	if o == nil || IsNil(o.Decision) {
		return nil, false
	}
	return o.Decision, true
}

// HasDecision returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfDerniersStatuts) HasDecision() bool {
	if o != nil && !IsNil(o.Decision) {
		return true
	}

	return false
}

// SetDecision gets a reference to the given string and assigns it to the Decision field.
func (o *EntrepriseFicheAllOfDerniersStatuts) SetDecision(v string) {
	o.Decision = &v
}

// GetDateActe returns the DateActe field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfDerniersStatuts) GetDateActe() string {
	if o == nil || IsNil(o.DateActe) {
		var ret string
		return ret
	}
	return *o.DateActe
}

// GetDateActeOk returns a tuple with the DateActe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfDerniersStatuts) GetDateActeOk() (*string, bool) {
	if o == nil || IsNil(o.DateActe) {
		return nil, false
	}
	return o.DateActe, true
}

// HasDateActe returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfDerniersStatuts) HasDateActe() bool {
	if o != nil && !IsNil(o.DateActe) {
		return true
	}

	return false
}

// SetDateActe gets a reference to the given string and assigns it to the DateActe field.
func (o *EntrepriseFicheAllOfDerniersStatuts) SetDateActe(v string) {
	o.DateActe = &v
}

// GetDateActeFormate returns the DateActeFormate field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfDerniersStatuts) GetDateActeFormate() string {
	if o == nil || IsNil(o.DateActeFormate) {
		var ret string
		return ret
	}
	return *o.DateActeFormate
}

// GetDateActeFormateOk returns a tuple with the DateActeFormate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfDerniersStatuts) GetDateActeFormateOk() (*string, bool) {
	if o == nil || IsNil(o.DateActeFormate) {
		return nil, false
	}
	return o.DateActeFormate, true
}

// HasDateActeFormate returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfDerniersStatuts) HasDateActeFormate() bool {
	if o != nil && !IsNil(o.DateActeFormate) {
		return true
	}

	return false
}

// SetDateActeFormate gets a reference to the given string and assigns it to the DateActeFormate field.
func (o *EntrepriseFicheAllOfDerniersStatuts) SetDateActeFormate(v string) {
	o.DateActeFormate = &v
}

func (o EntrepriseFicheAllOfDerniersStatuts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntrepriseFicheAllOfDerniersStatuts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateDepot) {
		toSerialize["date_depot"] = o.DateDepot
	}
	if !IsNil(o.DateDepotFormate) {
		toSerialize["date_depot_formate"] = o.DateDepotFormate
	}
	if !IsNil(o.Disponible) {
		toSerialize["disponible"] = o.Disponible
	}
	if !IsNil(o.NomFichierPdf) {
		toSerialize["nom_fichier_pdf"] = o.NomFichierPdf
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Decision) {
		toSerialize["decision"] = o.Decision
	}
	if !IsNil(o.DateActe) {
		toSerialize["date_acte"] = o.DateActe
	}
	if !IsNil(o.DateActeFormate) {
		toSerialize["date_acte_formate"] = o.DateActeFormate
	}
	return toSerialize, nil
}

type NullableEntrepriseFicheAllOfDerniersStatuts struct {
	value *EntrepriseFicheAllOfDerniersStatuts
	isSet bool
}

func (v NullableEntrepriseFicheAllOfDerniersStatuts) Get() *EntrepriseFicheAllOfDerniersStatuts {
	return v.value
}

func (v *NullableEntrepriseFicheAllOfDerniersStatuts) Set(val *EntrepriseFicheAllOfDerniersStatuts) {
	v.value = val
	v.isSet = true
}

func (v NullableEntrepriseFicheAllOfDerniersStatuts) IsSet() bool {
	return v.isSet
}

func (v *NullableEntrepriseFicheAllOfDerniersStatuts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntrepriseFicheAllOfDerniersStatuts(val *EntrepriseFicheAllOfDerniersStatuts) *NullableEntrepriseFicheAllOfDerniersStatuts {
	return &NullableEntrepriseFicheAllOfDerniersStatuts{value: val, isSet: true}
}

func (v NullableEntrepriseFicheAllOfDerniersStatuts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntrepriseFicheAllOfDerniersStatuts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


