/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// FicheEntrepriseAPIService FicheEntrepriseAPI service
type FicheEntrepriseAPIService service

type ApiEntrepriseRequest struct {
	ctx context.Context
	ApiService *FicheEntrepriseAPIService
	siren *string
	siret *string
	integrerDiffusionsPartielles *bool
	formatPublicationsBodacc *string
	marques *bool
	validiteTvaIntracommunautaire *bool
	publicationsBodaccBrutes *bool
	champsSupplementaires *string
}

// SIREN de l&#39;entreprise
func (r ApiEntrepriseRequest) Siren(siren string) ApiEntrepriseRequest {
	r.siren = &siren
	return r
}

// SIRET de l&#39;entreprise
func (r ApiEntrepriseRequest) Siret(siret string) ApiEntrepriseRequest {
	r.siret = &siret
	return r
}

// Si vrai et si l&#39;entreprise est en diffusion partielle, le retour renverra les informations partielles disponibles. Valeur par défaut : &#x60;false&#x60;.
func (r ApiEntrepriseRequest) IntegrerDiffusionsPartielles(integrerDiffusionsPartielles bool) ApiEntrepriseRequest {
	r.integrerDiffusionsPartielles = &integrerDiffusionsPartielles
	return r
}

// Format attendu pour les publications BODACC. Valeur par défaut : &#x60;\&quot;objet\&quot;&#x60;.
func (r ApiEntrepriseRequest) FormatPublicationsBodacc(formatPublicationsBodacc string) ApiEntrepriseRequest {
	r.formatPublicationsBodacc = &formatPublicationsBodacc
	return r
}

// Si vrai, le retour inclura les marques éventuelles de l&#39;entreprise. Valeur par défaut : &#x60;false&#x60;.
func (r ApiEntrepriseRequest) Marques(marques bool) ApiEntrepriseRequest {
	r.marques = &marques
	return r
}

// Si vrai, le champ validite_tva_intracommunautaire du retour indiquera si le numéro de tva est valide auprès de la Commission européenne. Valeur par défaut : &#x60;false&#x60;.
func (r ApiEntrepriseRequest) ValiditeTvaIntracommunautaire(validiteTvaIntracommunautaire bool) ApiEntrepriseRequest {
	r.validiteTvaIntracommunautaire = &validiteTvaIntracommunautaire
	return r
}

// Pappers traite les publications BODACC afin de supprimer les publications périmée. Si vrai, le retour inclura les publications bodacc sans traitement. Valeur par défaut : &#x60;false&#x60;.
func (r ApiEntrepriseRequest) PublicationsBodaccBrutes(publicationsBodaccBrutes bool) ApiEntrepriseRequest {
	r.publicationsBodaccBrutes = &publicationsBodaccBrutes
	return r
}

// Liste des champs supplémentaires à inclure dans le retour. Certains champs peuvent entraîner une consommation de jetons supplémentaires.  Champs supplémentaires disponibles : - &#x60;sites_internet&#x60; : 1 jeton supplémentaire - &#x60;telephone&#x60; : 1 jeton supplémentaire * - &#x60;email&#x60; : 1 jeton supplémentaire * - &#x60;enseigne_1&#x60; : gratuit - &#x60;enseigne_2&#x60; : gratuit - &#x60;enseigne_3&#x60; : gratuit - &#x60;distribution_speciale&#x60; : gratuit - &#x60;code_cedex&#x60; : gratuit - &#x60;libelle_cedex&#x60; : gratuit - &#x60;code_commune&#x60; : gratuit - &#x60;code_region&#x60; : gratuit - &#x60;region&#x60; : gratuit - &#x60;code_departement&#x60; : gratuit - &#x60;departement&#x60; : gratuit - &#x60;nomenclature_code_naf&#x60; : gratuit - &#x60;labels&#x60; : gratuit - &#x60;labels:orias&#x60; : 0.5 jeton supplémentaire - &#x60;labels:cci&#x60; : 0.5 jeton supplémentaire - &#x60;micro_entreprise&#x60; : gratuit - &#x60;sanctions&#x60; : 1 jeton supplémentaire - &#x60;personne_politiquement_exposee&#x60; : 1 jeton supplémentaire - &#x60;deces&#x60; : 0.5 jeton supplémentaire - &#x60;scoring_financier&#x60; : 30 jetons supplémentaires - &#x60;scoring_non_financier&#x60; : 30 jetons supplémentaires - &#x60;categorie_entreprise&#x60; : gratuit  \\* : le coût des champs &#x60;telephone&#x60; et &#x60;email&#x60; est de 1 jeton supplémentaire au total, même si les deux sont demandés. 
func (r ApiEntrepriseRequest) ChampsSupplementaires(champsSupplementaires string) ApiEntrepriseRequest {
	r.champsSupplementaires = &champsSupplementaires
	return r
}

func (r ApiEntrepriseRequest) Execute() (*EntrepriseFiche, *http.Response, error) {
	return r.ApiService.EntrepriseExecute(r)
}

/*
Entreprise Récupère l'ensemble des informations disponibles sur une entreprise.

Vous devez fournir soit le SIREN, soit le SIRET. Si vous indiquez le SIREN, tous les établissements associés à ce SIREN seront renvoyés dans la clé `etablissements`. Si vous indiquez le SIRET, seul l'établissement associé sera renvoyé dans la clé `etablissement`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEntrepriseRequest
*/
func (a *FicheEntrepriseAPIService) Entreprise(ctx context.Context) ApiEntrepriseRequest {
	return ApiEntrepriseRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EntrepriseFiche
func (a *FicheEntrepriseAPIService) EntrepriseExecute(r ApiEntrepriseRequest) (*EntrepriseFiche, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EntrepriseFiche
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FicheEntrepriseAPIService.Entreprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entreprise"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.siren != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "siren", r.siren, "form", "")
	}
	if r.siret != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "siret", r.siret, "form", "")
	}
	if r.integrerDiffusionsPartielles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "integrer_diffusions_partielles", r.integrerDiffusionsPartielles, "form", "")
	}
	if r.formatPublicationsBodacc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format_publications_bodacc", r.formatPublicationsBodacc, "form", "")
	}
	if r.marques != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "marques", r.marques, "form", "")
	}
	if r.validiteTvaIntracommunautaire != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validite_tva_intracommunautaire", r.validiteTvaIntracommunautaire, "form", "")
	}
	if r.publicationsBodaccBrutes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publications_bodacc_brutes", r.publicationsBodaccBrutes, "form", "")
	}
	if r.champsSupplementaires != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "champs_supplementaires", r.champsSupplementaires, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
