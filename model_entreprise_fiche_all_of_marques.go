/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EntrepriseFicheAllOfMarques type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntrepriseFicheAllOfMarques{}

// EntrepriseFicheAllOfMarques struct for EntrepriseFicheAllOfMarques
type EntrepriseFicheAllOfMarques struct {
	// Numéro de la marque.
	Numero *string `json:"numero,omitempty"`
	// Date d'enregistrement de la marque, au format AAAA-MM-JJ.
	DateEnregistrement *string `json:"date_enregistrement,omitempty"`
	// Date d'expiration de la marque au format AAAA-MM-JJ.
	DateExpiration *string `json:"date_expiration,omitempty"`
	// Lieu d'enregistrement de la marque.
	LieuEnregistrement *string `json:"lieu_enregistrement,omitempty"`
	// Statut de la marque. La description des différents types est disponible en page 14 du document suivant : https://www.inpi.fr/sites/default/files/doctech_marques_v1.6.pdf.
	Statut *string `json:"statut,omitempty"`
	// Texte de la marque.
	Texte *string `json:"texte,omitempty"`
	// Type de la marque.
	Type *string `json:"type,omitempty"`
	// Lien vers l'image déposée.
	LienImage *string `json:"lien_image,omitempty"`
	// Liste des descriptions de la marque.
	Descriptions []string `json:"descriptions,omitempty"`
	// Liste des classes (produits et services) de la marque. La liste des classes est disponible sur le document suivant : https://www.inpi.fr/sites/default/files/classification_nice_2021_0.pdf.
	Classes []EntrepriseFicheAllOfClasses `json:"classes,omitempty"`
	Deposant *PersonneMarque `json:"deposant,omitempty"`
	Mandataire *PersonneMarque `json:"mandataire,omitempty"`
	// Liste des événements associés à la marque.
	Evenements []EntrepriseFicheAllOfEvenements `json:"evenements,omitempty"`
}

// NewEntrepriseFicheAllOfMarques instantiates a new EntrepriseFicheAllOfMarques object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntrepriseFicheAllOfMarques() *EntrepriseFicheAllOfMarques {
	this := EntrepriseFicheAllOfMarques{}
	return &this
}

// NewEntrepriseFicheAllOfMarquesWithDefaults instantiates a new EntrepriseFicheAllOfMarques object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntrepriseFicheAllOfMarquesWithDefaults() *EntrepriseFicheAllOfMarques {
	this := EntrepriseFicheAllOfMarques{}
	return &this
}

// GetNumero returns the Numero field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfMarques) GetNumero() string {
	if o == nil || IsNil(o.Numero) {
		var ret string
		return ret
	}
	return *o.Numero
}

// GetNumeroOk returns a tuple with the Numero field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfMarques) GetNumeroOk() (*string, bool) {
	if o == nil || IsNil(o.Numero) {
		return nil, false
	}
	return o.Numero, true
}

// HasNumero returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfMarques) HasNumero() bool {
	if o != nil && !IsNil(o.Numero) {
		return true
	}

	return false
}

// SetNumero gets a reference to the given string and assigns it to the Numero field.
func (o *EntrepriseFicheAllOfMarques) SetNumero(v string) {
	o.Numero = &v
}

// GetDateEnregistrement returns the DateEnregistrement field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfMarques) GetDateEnregistrement() string {
	if o == nil || IsNil(o.DateEnregistrement) {
		var ret string
		return ret
	}
	return *o.DateEnregistrement
}

// GetDateEnregistrementOk returns a tuple with the DateEnregistrement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfMarques) GetDateEnregistrementOk() (*string, bool) {
	if o == nil || IsNil(o.DateEnregistrement) {
		return nil, false
	}
	return o.DateEnregistrement, true
}

// HasDateEnregistrement returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfMarques) HasDateEnregistrement() bool {
	if o != nil && !IsNil(o.DateEnregistrement) {
		return true
	}

	return false
}

// SetDateEnregistrement gets a reference to the given string and assigns it to the DateEnregistrement field.
func (o *EntrepriseFicheAllOfMarques) SetDateEnregistrement(v string) {
	o.DateEnregistrement = &v
}

// GetDateExpiration returns the DateExpiration field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfMarques) GetDateExpiration() string {
	if o == nil || IsNil(o.DateExpiration) {
		var ret string
		return ret
	}
	return *o.DateExpiration
}

// GetDateExpirationOk returns a tuple with the DateExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfMarques) GetDateExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.DateExpiration) {
		return nil, false
	}
	return o.DateExpiration, true
}

// HasDateExpiration returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfMarques) HasDateExpiration() bool {
	if o != nil && !IsNil(o.DateExpiration) {
		return true
	}

	return false
}

// SetDateExpiration gets a reference to the given string and assigns it to the DateExpiration field.
func (o *EntrepriseFicheAllOfMarques) SetDateExpiration(v string) {
	o.DateExpiration = &v
}

// GetLieuEnregistrement returns the LieuEnregistrement field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfMarques) GetLieuEnregistrement() string {
	if o == nil || IsNil(o.LieuEnregistrement) {
		var ret string
		return ret
	}
	return *o.LieuEnregistrement
}

// GetLieuEnregistrementOk returns a tuple with the LieuEnregistrement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfMarques) GetLieuEnregistrementOk() (*string, bool) {
	if o == nil || IsNil(o.LieuEnregistrement) {
		return nil, false
	}
	return o.LieuEnregistrement, true
}

// HasLieuEnregistrement returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfMarques) HasLieuEnregistrement() bool {
	if o != nil && !IsNil(o.LieuEnregistrement) {
		return true
	}

	return false
}

// SetLieuEnregistrement gets a reference to the given string and assigns it to the LieuEnregistrement field.
func (o *EntrepriseFicheAllOfMarques) SetLieuEnregistrement(v string) {
	o.LieuEnregistrement = &v
}

// GetStatut returns the Statut field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfMarques) GetStatut() string {
	if o == nil || IsNil(o.Statut) {
		var ret string
		return ret
	}
	return *o.Statut
}

// GetStatutOk returns a tuple with the Statut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfMarques) GetStatutOk() (*string, bool) {
	if o == nil || IsNil(o.Statut) {
		return nil, false
	}
	return o.Statut, true
}

// HasStatut returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfMarques) HasStatut() bool {
	if o != nil && !IsNil(o.Statut) {
		return true
	}

	return false
}

// SetStatut gets a reference to the given string and assigns it to the Statut field.
func (o *EntrepriseFicheAllOfMarques) SetStatut(v string) {
	o.Statut = &v
}

// GetTexte returns the Texte field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfMarques) GetTexte() string {
	if o == nil || IsNil(o.Texte) {
		var ret string
		return ret
	}
	return *o.Texte
}

// GetTexteOk returns a tuple with the Texte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfMarques) GetTexteOk() (*string, bool) {
	if o == nil || IsNil(o.Texte) {
		return nil, false
	}
	return o.Texte, true
}

// HasTexte returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfMarques) HasTexte() bool {
	if o != nil && !IsNil(o.Texte) {
		return true
	}

	return false
}

// SetTexte gets a reference to the given string and assigns it to the Texte field.
func (o *EntrepriseFicheAllOfMarques) SetTexte(v string) {
	o.Texte = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfMarques) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfMarques) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfMarques) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EntrepriseFicheAllOfMarques) SetType(v string) {
	o.Type = &v
}

// GetLienImage returns the LienImage field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfMarques) GetLienImage() string {
	if o == nil || IsNil(o.LienImage) {
		var ret string
		return ret
	}
	return *o.LienImage
}

// GetLienImageOk returns a tuple with the LienImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfMarques) GetLienImageOk() (*string, bool) {
	if o == nil || IsNil(o.LienImage) {
		return nil, false
	}
	return o.LienImage, true
}

// HasLienImage returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfMarques) HasLienImage() bool {
	if o != nil && !IsNil(o.LienImage) {
		return true
	}

	return false
}

// SetLienImage gets a reference to the given string and assigns it to the LienImage field.
func (o *EntrepriseFicheAllOfMarques) SetLienImage(v string) {
	o.LienImage = &v
}

// GetDescriptions returns the Descriptions field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfMarques) GetDescriptions() []string {
	if o == nil || IsNil(o.Descriptions) {
		var ret []string
		return ret
	}
	return o.Descriptions
}

// GetDescriptionsOk returns a tuple with the Descriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfMarques) GetDescriptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Descriptions) {
		return nil, false
	}
	return o.Descriptions, true
}

// HasDescriptions returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfMarques) HasDescriptions() bool {
	if o != nil && !IsNil(o.Descriptions) {
		return true
	}

	return false
}

// SetDescriptions gets a reference to the given []string and assigns it to the Descriptions field.
func (o *EntrepriseFicheAllOfMarques) SetDescriptions(v []string) {
	o.Descriptions = v
}

// GetClasses returns the Classes field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfMarques) GetClasses() []EntrepriseFicheAllOfClasses {
	if o == nil || IsNil(o.Classes) {
		var ret []EntrepriseFicheAllOfClasses
		return ret
	}
	return o.Classes
}

// GetClassesOk returns a tuple with the Classes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfMarques) GetClassesOk() ([]EntrepriseFicheAllOfClasses, bool) {
	if o == nil || IsNil(o.Classes) {
		return nil, false
	}
	return o.Classes, true
}

// HasClasses returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfMarques) HasClasses() bool {
	if o != nil && !IsNil(o.Classes) {
		return true
	}

	return false
}

// SetClasses gets a reference to the given []EntrepriseFicheAllOfClasses and assigns it to the Classes field.
func (o *EntrepriseFicheAllOfMarques) SetClasses(v []EntrepriseFicheAllOfClasses) {
	o.Classes = v
}

// GetDeposant returns the Deposant field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfMarques) GetDeposant() PersonneMarque {
	if o == nil || IsNil(o.Deposant) {
		var ret PersonneMarque
		return ret
	}
	return *o.Deposant
}

// GetDeposantOk returns a tuple with the Deposant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfMarques) GetDeposantOk() (*PersonneMarque, bool) {
	if o == nil || IsNil(o.Deposant) {
		return nil, false
	}
	return o.Deposant, true
}

// HasDeposant returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfMarques) HasDeposant() bool {
	if o != nil && !IsNil(o.Deposant) {
		return true
	}

	return false
}

// SetDeposant gets a reference to the given PersonneMarque and assigns it to the Deposant field.
func (o *EntrepriseFicheAllOfMarques) SetDeposant(v PersonneMarque) {
	o.Deposant = &v
}

// GetMandataire returns the Mandataire field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfMarques) GetMandataire() PersonneMarque {
	if o == nil || IsNil(o.Mandataire) {
		var ret PersonneMarque
		return ret
	}
	return *o.Mandataire
}

// GetMandataireOk returns a tuple with the Mandataire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfMarques) GetMandataireOk() (*PersonneMarque, bool) {
	if o == nil || IsNil(o.Mandataire) {
		return nil, false
	}
	return o.Mandataire, true
}

// HasMandataire returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfMarques) HasMandataire() bool {
	if o != nil && !IsNil(o.Mandataire) {
		return true
	}

	return false
}

// SetMandataire gets a reference to the given PersonneMarque and assigns it to the Mandataire field.
func (o *EntrepriseFicheAllOfMarques) SetMandataire(v PersonneMarque) {
	o.Mandataire = &v
}

// GetEvenements returns the Evenements field value if set, zero value otherwise.
func (o *EntrepriseFicheAllOfMarques) GetEvenements() []EntrepriseFicheAllOfEvenements {
	if o == nil || IsNil(o.Evenements) {
		var ret []EntrepriseFicheAllOfEvenements
		return ret
	}
	return o.Evenements
}

// GetEvenementsOk returns a tuple with the Evenements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntrepriseFicheAllOfMarques) GetEvenementsOk() ([]EntrepriseFicheAllOfEvenements, bool) {
	if o == nil || IsNil(o.Evenements) {
		return nil, false
	}
	return o.Evenements, true
}

// HasEvenements returns a boolean if a field has been set.
func (o *EntrepriseFicheAllOfMarques) HasEvenements() bool {
	if o != nil && !IsNil(o.Evenements) {
		return true
	}

	return false
}

// SetEvenements gets a reference to the given []EntrepriseFicheAllOfEvenements and assigns it to the Evenements field.
func (o *EntrepriseFicheAllOfMarques) SetEvenements(v []EntrepriseFicheAllOfEvenements) {
	o.Evenements = v
}

func (o EntrepriseFicheAllOfMarques) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntrepriseFicheAllOfMarques) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Numero) {
		toSerialize["numero"] = o.Numero
	}
	if !IsNil(o.DateEnregistrement) {
		toSerialize["date_enregistrement"] = o.DateEnregistrement
	}
	if !IsNil(o.DateExpiration) {
		toSerialize["date_expiration"] = o.DateExpiration
	}
	if !IsNil(o.LieuEnregistrement) {
		toSerialize["lieu_enregistrement"] = o.LieuEnregistrement
	}
	if !IsNil(o.Statut) {
		toSerialize["statut"] = o.Statut
	}
	if !IsNil(o.Texte) {
		toSerialize["texte"] = o.Texte
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.LienImage) {
		toSerialize["lien_image"] = o.LienImage
	}
	if !IsNil(o.Descriptions) {
		toSerialize["descriptions"] = o.Descriptions
	}
	if !IsNil(o.Classes) {
		toSerialize["classes"] = o.Classes
	}
	if !IsNil(o.Deposant) {
		toSerialize["deposant"] = o.Deposant
	}
	if !IsNil(o.Mandataire) {
		toSerialize["mandataire"] = o.Mandataire
	}
	if !IsNil(o.Evenements) {
		toSerialize["evenements"] = o.Evenements
	}
	return toSerialize, nil
}

type NullableEntrepriseFicheAllOfMarques struct {
	value *EntrepriseFicheAllOfMarques
	isSet bool
}

func (v NullableEntrepriseFicheAllOfMarques) Get() *EntrepriseFicheAllOfMarques {
	return v.value
}

func (v *NullableEntrepriseFicheAllOfMarques) Set(val *EntrepriseFicheAllOfMarques) {
	v.value = val
	v.isSet = true
}

func (v NullableEntrepriseFicheAllOfMarques) IsSet() bool {
	return v.isSet
}

func (v *NullableEntrepriseFicheAllOfMarques) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntrepriseFicheAllOfMarques(val *EntrepriseFicheAllOfMarques) *NullableEntrepriseFicheAllOfMarques {
	return &NullableEntrepriseFicheAllOfMarques{value: val, isSet: true}
}

func (v NullableEntrepriseFicheAllOfMarques) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntrepriseFicheAllOfMarques) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


