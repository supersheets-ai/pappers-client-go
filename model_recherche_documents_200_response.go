/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RechercheDocuments200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RechercheDocuments200Response{}

// RechercheDocuments200Response struct for RechercheDocuments200Response
type RechercheDocuments200Response struct {
	// Liste des documents qui correspondent à la recherche.
	Resultats []RechercheDocuments200ResponseResultatsInner `json:"resultats,omitempty"`
	// Nombre de documents qui correspondent à la recherche.
	Total *int32 `json:"total,omitempty"`
	// Page actuelle.
	Page *int32 `json:"page,omitempty"`
}

// NewRechercheDocuments200Response instantiates a new RechercheDocuments200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRechercheDocuments200Response() *RechercheDocuments200Response {
	this := RechercheDocuments200Response{}
	return &this
}

// NewRechercheDocuments200ResponseWithDefaults instantiates a new RechercheDocuments200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRechercheDocuments200ResponseWithDefaults() *RechercheDocuments200Response {
	this := RechercheDocuments200Response{}
	return &this
}

// GetResultats returns the Resultats field value if set, zero value otherwise.
func (o *RechercheDocuments200Response) GetResultats() []RechercheDocuments200ResponseResultatsInner {
	if o == nil || IsNil(o.Resultats) {
		var ret []RechercheDocuments200ResponseResultatsInner
		return ret
	}
	return o.Resultats
}

// GetResultatsOk returns a tuple with the Resultats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RechercheDocuments200Response) GetResultatsOk() ([]RechercheDocuments200ResponseResultatsInner, bool) {
	if o == nil || IsNil(o.Resultats) {
		return nil, false
	}
	return o.Resultats, true
}

// HasResultats returns a boolean if a field has been set.
func (o *RechercheDocuments200Response) HasResultats() bool {
	if o != nil && !IsNil(o.Resultats) {
		return true
	}

	return false
}

// SetResultats gets a reference to the given []RechercheDocuments200ResponseResultatsInner and assigns it to the Resultats field.
func (o *RechercheDocuments200Response) SetResultats(v []RechercheDocuments200ResponseResultatsInner) {
	o.Resultats = v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *RechercheDocuments200Response) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RechercheDocuments200Response) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *RechercheDocuments200Response) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *RechercheDocuments200Response) SetTotal(v int32) {
	o.Total = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *RechercheDocuments200Response) GetPage() int32 {
	if o == nil || IsNil(o.Page) {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RechercheDocuments200Response) GetPageOk() (*int32, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *RechercheDocuments200Response) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *RechercheDocuments200Response) SetPage(v int32) {
	o.Page = &v
}

func (o RechercheDocuments200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RechercheDocuments200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Resultats) {
		toSerialize["resultats"] = o.Resultats
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	return toSerialize, nil
}

type NullableRechercheDocuments200Response struct {
	value *RechercheDocuments200Response
	isSet bool
}

func (v NullableRechercheDocuments200Response) Get() *RechercheDocuments200Response {
	return v.value
}

func (v *NullableRechercheDocuments200Response) Set(val *RechercheDocuments200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRechercheDocuments200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRechercheDocuments200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRechercheDocuments200Response(val *RechercheDocuments200Response) *NullableRechercheDocuments200Response {
	return &NullableRechercheDocuments200Response{value: val, isSet: true}
}

func (v NullableRechercheDocuments200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRechercheDocuments200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


