/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SurveillanceAPIService SurveillanceAPI service
type SurveillanceAPIService service

type ApiSurveillanceDirigeantRequest struct {
	ctx context.Context
	ApiService *SurveillanceAPIService
	idListe *string
	surveillanceDirigeantRequestInner *[]SurveillanceDirigeantRequestInner
}

// Identifiant unique de votre liste de surveillance de dirigeants
func (r ApiSurveillanceDirigeantRequest) IdListe(idListe string) ApiSurveillanceDirigeantRequest {
	r.idListe = &idListe
	return r
}

func (r ApiSurveillanceDirigeantRequest) SurveillanceDirigeantRequestInner(surveillanceDirigeantRequestInner []SurveillanceDirigeantRequestInner) ApiSurveillanceDirigeantRequest {
	r.surveillanceDirigeantRequestInner = &surveillanceDirigeantRequestInner
	return r
}

func (r ApiSurveillanceDirigeantRequest) Execute() (*SurveillanceDirigeant200Response, *http.Response, error) {
	return r.ApiService.SurveillanceDirigeantExecute(r)
}

/*
SurveillanceDirigeant Ajoute un (ou plusieurs) dirigeant(s) à une liste de dirigeants.

Vous devez fournir la clé d'utilisation de l'API ainsi que l'identifiant de votre liste. Les informations à renseigner sont différentes selon le type de personne à ajouter (morale ou physique)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSurveillanceDirigeantRequest
*/
func (a *SurveillanceAPIService) SurveillanceDirigeant(ctx context.Context) ApiSurveillanceDirigeantRequest {
	return ApiSurveillanceDirigeantRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SurveillanceDirigeant200Response
func (a *SurveillanceAPIService) SurveillanceDirigeantExecute(r ApiSurveillanceDirigeantRequest) (*SurveillanceDirigeant200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveillanceDirigeant200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveillanceAPIService.SurveillanceDirigeant")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/liste/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.idListe == nil {
		return localVarReturnValue, nil, reportError("idListe is required and must be specified")
	}
	if r.surveillanceDirigeantRequestInner == nil {
		return localVarReturnValue, nil, reportError("surveillanceDirigeantRequestInner is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id_liste", r.idListe, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.surveillanceDirigeantRequestInner
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSurveillanceEntrepriseRequest struct {
	ctx context.Context
	ApiService *SurveillanceAPIService
	idListe *string
	surveillanceEntrepriseRequestInner *[]SurveillanceEntrepriseRequestInner
}

// Identifiant unique de votre liste de surveillance d&#39;entreprises
func (r ApiSurveillanceEntrepriseRequest) IdListe(idListe string) ApiSurveillanceEntrepriseRequest {
	r.idListe = &idListe
	return r
}

func (r ApiSurveillanceEntrepriseRequest) SurveillanceEntrepriseRequestInner(surveillanceEntrepriseRequestInner []SurveillanceEntrepriseRequestInner) ApiSurveillanceEntrepriseRequest {
	r.surveillanceEntrepriseRequestInner = &surveillanceEntrepriseRequestInner
	return r
}

func (r ApiSurveillanceEntrepriseRequest) Execute() (*SurveillanceEntreprise200Response, *http.Response, error) {
	return r.ApiService.SurveillanceEntrepriseExecute(r)
}

/*
SurveillanceEntreprise Ajoute une (ou plusieurs) entreprise(s) à une liste d'entreprises.

Vous devez fournir la clé d'utilisation de l'API ainsi que l'identifiant de votre liste.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSurveillanceEntrepriseRequest
*/
func (a *SurveillanceAPIService) SurveillanceEntreprise(ctx context.Context) ApiSurveillanceEntrepriseRequest {
	return ApiSurveillanceEntrepriseRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SurveillanceEntreprise200Response
func (a *SurveillanceAPIService) SurveillanceEntrepriseExecute(r ApiSurveillanceEntrepriseRequest) (*SurveillanceEntreprise200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveillanceEntreprise200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveillanceAPIService.SurveillanceEntreprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/liste"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.idListe == nil {
		return localVarReturnValue, nil, reportError("idListe is required and must be specified")
	}
	if r.surveillanceEntrepriseRequestInner == nil {
		return localVarReturnValue, nil, reportError("surveillanceEntrepriseRequestInner is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id_liste", r.idListe, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.surveillanceEntrepriseRequestInner
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSurveillanceListeInformationsRequest struct {
	ctx context.Context
	ApiService *SurveillanceAPIService
	idListe *string
	surveillanceListeInformationsRequest *SurveillanceListeInformationsRequest
}

// Identifiant unique de votre liste de surveillance d&#39;entreprises
func (r ApiSurveillanceListeInformationsRequest) IdListe(idListe string) ApiSurveillanceListeInformationsRequest {
	r.idListe = &idListe
	return r
}

func (r ApiSurveillanceListeInformationsRequest) SurveillanceListeInformationsRequest(surveillanceListeInformationsRequest SurveillanceListeInformationsRequest) ApiSurveillanceListeInformationsRequest {
	r.surveillanceListeInformationsRequest = &surveillanceListeInformationsRequest
	return r
}

func (r ApiSurveillanceListeInformationsRequest) Execute() (*http.Response, error) {
	return r.ApiService.SurveillanceListeInformationsExecute(r)
}

/*
SurveillanceListeInformations Ajoute des informations à une (ou plusieurs) notification(s).

Vous devez fournir la clé d'utilisation de l'API ainsi que l'identifiant de votre liste.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSurveillanceListeInformationsRequest
*/
func (a *SurveillanceAPIService) SurveillanceListeInformations(ctx context.Context) ApiSurveillanceListeInformationsRequest {
	return ApiSurveillanceListeInformationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SurveillanceAPIService) SurveillanceListeInformationsExecute(r ApiSurveillanceListeInformationsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveillanceAPIService.SurveillanceListeInformations")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/liste-informations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.idListe == nil {
		return nil, reportError("idListe is required and must be specified")
	}
	if r.surveillanceListeInformationsRequest == nil {
		return nil, reportError("surveillanceListeInformationsRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id_liste", r.idListe, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.surveillanceListeInformationsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSurveillanceNotificationsDeleteRequest struct {
	ctx context.Context
	ApiService *SurveillanceAPIService
	idListe *string
	siren *string
	id *string
	supprimerTotalite *bool
}

// Identifiant unique de votre liste de surveillance
func (r ApiSurveillanceNotificationsDeleteRequest) IdListe(idListe string) ApiSurveillanceNotificationsDeleteRequest {
	r.idListe = &idListe
	return r
}

// Liste des sirens des notifications à supprimer, séparés par une virgule
func (r ApiSurveillanceNotificationsDeleteRequest) Siren(siren string) ApiSurveillanceNotificationsDeleteRequest {
	r.siren = &siren
	return r
}

// Liste des ids des notifications à supprimer, séparés par une virgule
func (r ApiSurveillanceNotificationsDeleteRequest) Id(id string) ApiSurveillanceNotificationsDeleteRequest {
	r.id = &id
	return r
}

// Suppression de toutes les notifications de la liste
func (r ApiSurveillanceNotificationsDeleteRequest) SupprimerTotalite(supprimerTotalite bool) ApiSurveillanceNotificationsDeleteRequest {
	r.supprimerTotalite = &supprimerTotalite
	return r
}

func (r ApiSurveillanceNotificationsDeleteRequest) Execute() (*SurveillanceNotificationsDelete200Response, *http.Response, error) {
	return r.ApiService.SurveillanceNotificationsDeleteExecute(r)
}

/*
SurveillanceNotificationsDelete Supprime une (ou plusieurs) notification(s) d'une liste.

Vous devez fournir la clé d'utilisation de l'API ainsi que l'identifiant de votre liste.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSurveillanceNotificationsDeleteRequest
*/
func (a *SurveillanceAPIService) SurveillanceNotificationsDelete(ctx context.Context) ApiSurveillanceNotificationsDeleteRequest {
	return ApiSurveillanceNotificationsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SurveillanceNotificationsDelete200Response
func (a *SurveillanceAPIService) SurveillanceNotificationsDeleteExecute(r ApiSurveillanceNotificationsDeleteRequest) (*SurveillanceNotificationsDelete200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveillanceNotificationsDelete200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveillanceAPIService.SurveillanceNotificationsDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/liste/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.idListe == nil {
		return localVarReturnValue, nil, reportError("idListe is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id_liste", r.idListe, "form", "")
	if r.siren != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "siren", r.siren, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.supprimerTotalite != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supprimer_totalite", r.supprimerTotalite, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
