/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BodaccImmatriculation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BodaccImmatriculation{}

// BodaccImmatriculation struct for BodaccImmatriculation
type BodaccImmatriculation struct {
	Bodacc
	// Nom de l'entreprise concernée par la publication. Correspond à la dénomination en cas de personne morale et à nom + prenom en cas de personne physique.
	NomEntreprise *string `json:"nom_entreprise,omitempty"`
	// Vrai si l'entreprise concernée par la publication est une personne morale, faux si c'est une personne physique.
	PersonneMorale *bool `json:"personne_morale,omitempty"`
	// Dénomination de l'entreprise concernée par la publication (uniquement en cas de personne morale).
	Denomination *string `json:"denomination,omitempty"`
	// Nom de la personne physique concernée par la publication (uniquement en cas de personne physique).
	Nom *string `json:"nom,omitempty"`
	// Prénom de la personne physique concernée par la publication (uniquement en cas de personne physique).
	Prenom *string `json:"prenom,omitempty"`
	// Administration (dans le cas d'une personne morale).
	Administration *string `json:"administration,omitempty"`
	// Adresse de l'entreprise concernée par la publication.
	Adresse *string `json:"adresse,omitempty"`
}

// NewBodaccImmatriculation instantiates a new BodaccImmatriculation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBodaccImmatriculation() *BodaccImmatriculation {
	this := BodaccImmatriculation{}
	return &this
}

// NewBodaccImmatriculationWithDefaults instantiates a new BodaccImmatriculation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBodaccImmatriculationWithDefaults() *BodaccImmatriculation {
	this := BodaccImmatriculation{}
	return &this
}

// GetNomEntreprise returns the NomEntreprise field value if set, zero value otherwise.
func (o *BodaccImmatriculation) GetNomEntreprise() string {
	if o == nil || IsNil(o.NomEntreprise) {
		var ret string
		return ret
	}
	return *o.NomEntreprise
}

// GetNomEntrepriseOk returns a tuple with the NomEntreprise field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccImmatriculation) GetNomEntrepriseOk() (*string, bool) {
	if o == nil || IsNil(o.NomEntreprise) {
		return nil, false
	}
	return o.NomEntreprise, true
}

// HasNomEntreprise returns a boolean if a field has been set.
func (o *BodaccImmatriculation) HasNomEntreprise() bool {
	if o != nil && !IsNil(o.NomEntreprise) {
		return true
	}

	return false
}

// SetNomEntreprise gets a reference to the given string and assigns it to the NomEntreprise field.
func (o *BodaccImmatriculation) SetNomEntreprise(v string) {
	o.NomEntreprise = &v
}

// GetPersonneMorale returns the PersonneMorale field value if set, zero value otherwise.
func (o *BodaccImmatriculation) GetPersonneMorale() bool {
	if o == nil || IsNil(o.PersonneMorale) {
		var ret bool
		return ret
	}
	return *o.PersonneMorale
}

// GetPersonneMoraleOk returns a tuple with the PersonneMorale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccImmatriculation) GetPersonneMoraleOk() (*bool, bool) {
	if o == nil || IsNil(o.PersonneMorale) {
		return nil, false
	}
	return o.PersonneMorale, true
}

// HasPersonneMorale returns a boolean if a field has been set.
func (o *BodaccImmatriculation) HasPersonneMorale() bool {
	if o != nil && !IsNil(o.PersonneMorale) {
		return true
	}

	return false
}

// SetPersonneMorale gets a reference to the given bool and assigns it to the PersonneMorale field.
func (o *BodaccImmatriculation) SetPersonneMorale(v bool) {
	o.PersonneMorale = &v
}

// GetDenomination returns the Denomination field value if set, zero value otherwise.
func (o *BodaccImmatriculation) GetDenomination() string {
	if o == nil || IsNil(o.Denomination) {
		var ret string
		return ret
	}
	return *o.Denomination
}

// GetDenominationOk returns a tuple with the Denomination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccImmatriculation) GetDenominationOk() (*string, bool) {
	if o == nil || IsNil(o.Denomination) {
		return nil, false
	}
	return o.Denomination, true
}

// HasDenomination returns a boolean if a field has been set.
func (o *BodaccImmatriculation) HasDenomination() bool {
	if o != nil && !IsNil(o.Denomination) {
		return true
	}

	return false
}

// SetDenomination gets a reference to the given string and assigns it to the Denomination field.
func (o *BodaccImmatriculation) SetDenomination(v string) {
	o.Denomination = &v
}

// GetNom returns the Nom field value if set, zero value otherwise.
func (o *BodaccImmatriculation) GetNom() string {
	if o == nil || IsNil(o.Nom) {
		var ret string
		return ret
	}
	return *o.Nom
}

// GetNomOk returns a tuple with the Nom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccImmatriculation) GetNomOk() (*string, bool) {
	if o == nil || IsNil(o.Nom) {
		return nil, false
	}
	return o.Nom, true
}

// HasNom returns a boolean if a field has been set.
func (o *BodaccImmatriculation) HasNom() bool {
	if o != nil && !IsNil(o.Nom) {
		return true
	}

	return false
}

// SetNom gets a reference to the given string and assigns it to the Nom field.
func (o *BodaccImmatriculation) SetNom(v string) {
	o.Nom = &v
}

// GetPrenom returns the Prenom field value if set, zero value otherwise.
func (o *BodaccImmatriculation) GetPrenom() string {
	if o == nil || IsNil(o.Prenom) {
		var ret string
		return ret
	}
	return *o.Prenom
}

// GetPrenomOk returns a tuple with the Prenom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccImmatriculation) GetPrenomOk() (*string, bool) {
	if o == nil || IsNil(o.Prenom) {
		return nil, false
	}
	return o.Prenom, true
}

// HasPrenom returns a boolean if a field has been set.
func (o *BodaccImmatriculation) HasPrenom() bool {
	if o != nil && !IsNil(o.Prenom) {
		return true
	}

	return false
}

// SetPrenom gets a reference to the given string and assigns it to the Prenom field.
func (o *BodaccImmatriculation) SetPrenom(v string) {
	o.Prenom = &v
}

// GetAdministration returns the Administration field value if set, zero value otherwise.
func (o *BodaccImmatriculation) GetAdministration() string {
	if o == nil || IsNil(o.Administration) {
		var ret string
		return ret
	}
	return *o.Administration
}

// GetAdministrationOk returns a tuple with the Administration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccImmatriculation) GetAdministrationOk() (*string, bool) {
	if o == nil || IsNil(o.Administration) {
		return nil, false
	}
	return o.Administration, true
}

// HasAdministration returns a boolean if a field has been set.
func (o *BodaccImmatriculation) HasAdministration() bool {
	if o != nil && !IsNil(o.Administration) {
		return true
	}

	return false
}

// SetAdministration gets a reference to the given string and assigns it to the Administration field.
func (o *BodaccImmatriculation) SetAdministration(v string) {
	o.Administration = &v
}

// GetAdresse returns the Adresse field value if set, zero value otherwise.
func (o *BodaccImmatriculation) GetAdresse() string {
	if o == nil || IsNil(o.Adresse) {
		var ret string
		return ret
	}
	return *o.Adresse
}

// GetAdresseOk returns a tuple with the Adresse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BodaccImmatriculation) GetAdresseOk() (*string, bool) {
	if o == nil || IsNil(o.Adresse) {
		return nil, false
	}
	return o.Adresse, true
}

// HasAdresse returns a boolean if a field has been set.
func (o *BodaccImmatriculation) HasAdresse() bool {
	if o != nil && !IsNil(o.Adresse) {
		return true
	}

	return false
}

// SetAdresse gets a reference to the given string and assigns it to the Adresse field.
func (o *BodaccImmatriculation) SetAdresse(v string) {
	o.Adresse = &v
}

func (o BodaccImmatriculation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BodaccImmatriculation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBodacc, errBodacc := json.Marshal(o.Bodacc)
	if errBodacc != nil {
		return map[string]interface{}{}, errBodacc
	}
	errBodacc = json.Unmarshal([]byte(serializedBodacc), &toSerialize)
	if errBodacc != nil {
		return map[string]interface{}{}, errBodacc
	}
	if !IsNil(o.NomEntreprise) {
		toSerialize["nom_entreprise"] = o.NomEntreprise
	}
	if !IsNil(o.PersonneMorale) {
		toSerialize["personne_morale"] = o.PersonneMorale
	}
	if !IsNil(o.Denomination) {
		toSerialize["denomination"] = o.Denomination
	}
	if !IsNil(o.Nom) {
		toSerialize["nom"] = o.Nom
	}
	if !IsNil(o.Prenom) {
		toSerialize["prenom"] = o.Prenom
	}
	if !IsNil(o.Administration) {
		toSerialize["administration"] = o.Administration
	}
	if !IsNil(o.Adresse) {
		toSerialize["adresse"] = o.Adresse
	}
	return toSerialize, nil
}

type NullableBodaccImmatriculation struct {
	value *BodaccImmatriculation
	isSet bool
}

func (v NullableBodaccImmatriculation) Get() *BodaccImmatriculation {
	return v.value
}

func (v *NullableBodaccImmatriculation) Set(val *BodaccImmatriculation) {
	v.value = val
	v.isSet = true
}

func (v NullableBodaccImmatriculation) IsSet() bool {
	return v.isSet
}

func (v *NullableBodaccImmatriculation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBodaccImmatriculation(val *BodaccImmatriculation) *NullableBodaccImmatriculation {
	return &NullableBodaccImmatriculation{value: val, isSet: true}
}

func (v NullableBodaccImmatriculation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBodaccImmatriculation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


