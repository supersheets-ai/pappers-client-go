/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EtablissementFicheDomiciliation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EtablissementFicheDomiciliation{}

// EtablissementFicheDomiciliation struct for EtablissementFicheDomiciliation
type EtablissementFicheDomiciliation struct {
	// Nom de l'entreprise de domiciliation
	Nom *string `json:"nom,omitempty"`
	// Siren de l'entreprise de domiciliation
	Siren *string `json:"siren,omitempty"`
}

// NewEtablissementFicheDomiciliation instantiates a new EtablissementFicheDomiciliation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEtablissementFicheDomiciliation() *EtablissementFicheDomiciliation {
	this := EtablissementFicheDomiciliation{}
	return &this
}

// NewEtablissementFicheDomiciliationWithDefaults instantiates a new EtablissementFicheDomiciliation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEtablissementFicheDomiciliationWithDefaults() *EtablissementFicheDomiciliation {
	this := EtablissementFicheDomiciliation{}
	return &this
}

// GetNom returns the Nom field value if set, zero value otherwise.
func (o *EtablissementFicheDomiciliation) GetNom() string {
	if o == nil || IsNil(o.Nom) {
		var ret string
		return ret
	}
	return *o.Nom
}

// GetNomOk returns a tuple with the Nom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtablissementFicheDomiciliation) GetNomOk() (*string, bool) {
	if o == nil || IsNil(o.Nom) {
		return nil, false
	}
	return o.Nom, true
}

// HasNom returns a boolean if a field has been set.
func (o *EtablissementFicheDomiciliation) HasNom() bool {
	if o != nil && !IsNil(o.Nom) {
		return true
	}

	return false
}

// SetNom gets a reference to the given string and assigns it to the Nom field.
func (o *EtablissementFicheDomiciliation) SetNom(v string) {
	o.Nom = &v
}

// GetSiren returns the Siren field value if set, zero value otherwise.
func (o *EtablissementFicheDomiciliation) GetSiren() string {
	if o == nil || IsNil(o.Siren) {
		var ret string
		return ret
	}
	return *o.Siren
}

// GetSirenOk returns a tuple with the Siren field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtablissementFicheDomiciliation) GetSirenOk() (*string, bool) {
	if o == nil || IsNil(o.Siren) {
		return nil, false
	}
	return o.Siren, true
}

// HasSiren returns a boolean if a field has been set.
func (o *EtablissementFicheDomiciliation) HasSiren() bool {
	if o != nil && !IsNil(o.Siren) {
		return true
	}

	return false
}

// SetSiren gets a reference to the given string and assigns it to the Siren field.
func (o *EtablissementFicheDomiciliation) SetSiren(v string) {
	o.Siren = &v
}

func (o EtablissementFicheDomiciliation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EtablissementFicheDomiciliation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nom) {
		toSerialize["nom"] = o.Nom
	}
	if !IsNil(o.Siren) {
		toSerialize["siren"] = o.Siren
	}
	return toSerialize, nil
}

type NullableEtablissementFicheDomiciliation struct {
	value *EtablissementFicheDomiciliation
	isSet bool
}

func (v NullableEtablissementFicheDomiciliation) Get() *EtablissementFicheDomiciliation {
	return v.value
}

func (v *NullableEtablissementFicheDomiciliation) Set(val *EtablissementFicheDomiciliation) {
	v.value = val
	v.isSet = true
}

func (v NullableEtablissementFicheDomiciliation) IsSet() bool {
	return v.isSet
}

func (v *NullableEtablissementFicheDomiciliation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEtablissementFicheDomiciliation(val *EtablissementFicheDomiciliation) *NullableEtablissementFicheDomiciliation {
	return &NullableEtablissementFicheDomiciliation{value: val, isSet: true}
}

func (v NullableEtablissementFicheDomiciliation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEtablissementFicheDomiciliation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


