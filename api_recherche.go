/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// RechercheAPIService RechercheAPI service
type RechercheAPIService service

type ApiRechercheRequest struct {
	ctx context.Context
	ApiService *RechercheAPIService
	page *int32
	parPage *int32
	curseur *string
	parCurseur *int32
	bases *string
	precision *string
	q *string
	siege *string
	codeNaf *string
	departement *string
	region *string
	codePostal *string
	conventionCollective *string
	categorieJuridique *string
	entrepriseCessee *bool
	statutRcs *string
	objetSocial *string
	dateImmatriculationRcsMin *string
	dateImmatriculationRcsMax *string
	dateRadiationRcsMin *string
	dateRadiationRcsMax *string
	capitalMin *string
	capitalMax *string
	chiffreAffairesMin *string
	chiffreAffairesMax *string
	resultatMin *string
	resultatMax *string
	dateCreationMin *string
	dateCreationMax *string
	trancheEffectifMin *string
	trancheEffectifMax *string
	typeDirigeant *string
	qualiteDirigeant *string
	nationaliteDirigeant *string
	nomDirigeant *string
	prenomDirigeant *string
	ageDirigeantMin *int32
	ageDirigeantMax *int32
	dateDeNaissanceDirigeantMin *string
	dateDeNaissanceDirigeantMax *string
	ageBeneficiaireMin *int32
	ageBeneficiaireMax *int32
	dateDeNaissanceBeneficiaireMin *string
	dateDeNaissanceBeneficiaireMax *string
	nationaliteBeneficiaire *string
	dateDepotDocumentMin *string
	dateDepotDocumentMax *string
	typePublication *string
	datePublicationMin *string
	datePublicationMax *string
}

// Page de résultats. Valeur par défaut : &#x60;1&#x60;.
func (r ApiRechercheRequest) Page(page int32) ApiRechercheRequest {
	r.page = &page
	return r
}

// Nombre de résultats affichés sur une page. Valeur par défaut : &#x60;10&#x60;.
func (r ApiRechercheRequest) ParPage(parPage int32) ApiRechercheRequest {
	r.parPage = &parPage
	return r
}

// Curseur servant à parcourir l&#39;ensemble des résultats (alternativement à la pagination qui est limitée à 400 résultats maximum). Doit valoir &#x60;*&#x60; pour la première requête, et doit pour les requêtes suivantes reprendre la valeur &#x60;curseurSuivant&#x60; retournée par la dernière réponse.
func (r ApiRechercheRequest) Curseur(curseur string) ApiRechercheRequest {
	r.curseur = &curseur
	return r
}

// Nombre de résultats affichés par curseur. Valeur par défaut : &#x60;50&#x60;. Valeur minimale: &#x60;1&#x60;. Valeur maximale : &#x60;1000&#x60;.
func (r ApiRechercheRequest) ParCurseur(parCurseur int32) ApiRechercheRequest {
	r.parCurseur = &parCurseur
	return r
}

// Bases de données dans lesquelles rechercher. Il est possible d&#39;indiquer plusieurs bases en les séparant par des virgules. Valeur par défaut : &#x60;\&quot;entreprises\&quot;&#x60;.
func (r ApiRechercheRequest) Bases(bases string) ApiRechercheRequest {
	r.bases = &bases
	return r
}

// Niveau de précision de la recherche. Valeur par défaut : &#x60;\&quot;standard\&quot;&#x60;.
func (r ApiRechercheRequest) Precision(precision string) ApiRechercheRequest {
	r.precision = &precision
	return r
}

// Texte à rechercher. Dénomination pour une personne morale, nom et prénom pour une personne physique. Si vous recherchez dans plusieurs bases, ce paramètre sera utilisé pour rechercher dans toutes les bases.
func (r ApiRechercheRequest) Q(q string) ApiRechercheRequest {
	r.q = &q
	return r
}

// Défini si la requête se base sur le siège
func (r ApiRechercheRequest) Siege(siege string) ApiRechercheRequest {
	r.siege = &siege
	return r
}

// Code NAF de l&#39;entreprise. Il est possible d&#39;indiquer plusieurs codes NAF en les séparant par des virgules.
func (r ApiRechercheRequest) CodeNaf(codeNaf string) ApiRechercheRequest {
	r.codeNaf = &codeNaf
	return r
}

// Numéro de département de l&#39;un des établissements de l&#39;entreprise. Il est possible d&#39;indiquer plusieurs départements en les séparant par des virgules.
func (r ApiRechercheRequest) Departement(departement string) ApiRechercheRequest {
	r.departement = &departement
	return r
}

// Code de la région de l&#39;un des établissements de l&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/4316069#titre-bloc-18). Il est possible d&#39;indiquer plusieurs codes régions en les séparant par des virgules.
func (r ApiRechercheRequest) Region(region string) ApiRechercheRequest {
	r.region = &region
	return r
}

// Code postal de l&#39;un des établissements de l&#39;entreprise. Il est possible d&#39;indiquer plusieurs codes postaux en les séparant par des virgules.
func (r ApiRechercheRequest) CodePostal(codePostal string) ApiRechercheRequest {
	r.codePostal = &codePostal
	return r
}

// Convention collective de l&#39;entreprise.
func (r ApiRechercheRequest) ConventionCollective(conventionCollective string) ApiRechercheRequest {
	r.conventionCollective = &conventionCollective
	return r
}

// Catégorie juridique de l&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/2028129).   **Note** : Le code correspond à celui de l&#39;INSEE, à l&#39;exception des SASU qui auront comme code 5720 et les EURL qui auront comme code 5498.
func (r ApiRechercheRequest) CategorieJuridique(categorieJuridique string) ApiRechercheRequest {
	r.categorieJuridique = &categorieJuridique
	return r
}

// Activité de l&#39;entreprise cessée ou non.
func (r ApiRechercheRequest) EntrepriseCessee(entrepriseCessee bool) ApiRechercheRequest {
	r.entrepriseCessee = &entrepriseCessee
	return r
}

// Statut au RCS
func (r ApiRechercheRequest) StatutRcs(statutRcs string) ApiRechercheRequest {
	r.statutRcs = &statutRcs
	return r
}

// Objet social de l&#39;entreprise déclaré au RCS.
func (r ApiRechercheRequest) ObjetSocial(objetSocial string) ApiRechercheRequest {
	r.objetSocial = &objetSocial
	return r
}

// Date d&#39;immatriculation au RCS minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheRequest) DateImmatriculationRcsMin(dateImmatriculationRcsMin string) ApiRechercheRequest {
	r.dateImmatriculationRcsMin = &dateImmatriculationRcsMin
	return r
}

// d&#39;immatriculation au RCS minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheRequest) DateImmatriculationRcsMax(dateImmatriculationRcsMax string) ApiRechercheRequest {
	r.dateImmatriculationRcsMax = &dateImmatriculationRcsMax
	return r
}

// Date de radiation au RCS minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheRequest) DateRadiationRcsMin(dateRadiationRcsMin string) ApiRechercheRequest {
	r.dateRadiationRcsMin = &dateRadiationRcsMin
	return r
}

// Date de radiation au RCS maximale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheRequest) DateRadiationRcsMax(dateRadiationRcsMax string) ApiRechercheRequest {
	r.dateRadiationRcsMax = &dateRadiationRcsMax
	return r
}

// Capital minimum de l&#39;entreprise.
func (r ApiRechercheRequest) CapitalMin(capitalMin string) ApiRechercheRequest {
	r.capitalMin = &capitalMin
	return r
}

// Capital maximum de l&#39;entreprise.
func (r ApiRechercheRequest) CapitalMax(capitalMax string) ApiRechercheRequest {
	r.capitalMax = &capitalMax
	return r
}

// Chiffre d&#39;affaires minimum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRechercheRequest) ChiffreAffairesMin(chiffreAffairesMin string) ApiRechercheRequest {
	r.chiffreAffairesMin = &chiffreAffairesMin
	return r
}

// Chiffre d&#39;affaires maximum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRechercheRequest) ChiffreAffairesMax(chiffreAffairesMax string) ApiRechercheRequest {
	r.chiffreAffairesMax = &chiffreAffairesMax
	return r
}

// Résultat minimum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRechercheRequest) ResultatMin(resultatMin string) ApiRechercheRequest {
	r.resultatMin = &resultatMin
	return r
}

// Résultat maximum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRechercheRequest) ResultatMax(resultatMax string) ApiRechercheRequest {
	r.resultatMax = &resultatMax
	return r
}

// Date de création minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheRequest) DateCreationMin(dateCreationMin string) ApiRechercheRequest {
	r.dateCreationMin = &dateCreationMin
	return r
}

// Date de création maximale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheRequest) DateCreationMax(dateCreationMax string) ApiRechercheRequest {
	r.dateCreationMax = &dateCreationMax
	return r
}

// Tranche d&#39;effectifs minimale de l&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/static-resources/documentation/v_sommaire_311.htm#73).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
func (r ApiRechercheRequest) TrancheEffectifMin(trancheEffectifMin string) ApiRechercheRequest {
	r.trancheEffectifMin = &trancheEffectifMin
	return r
}

// Tranche d&#39;effectifs maximale de l&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/static-resources/documentation/v_sommaire_311.htm#73).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
func (r ApiRechercheRequest) TrancheEffectifMax(trancheEffectifMax string) ApiRechercheRequest {
	r.trancheEffectifMax = &trancheEffectifMax
	return r
}

// Type du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheRequest) TypeDirigeant(typeDirigeant string) ApiRechercheRequest {
	r.typeDirigeant = &typeDirigeant
	return r
}

// Qualité du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheRequest) QualiteDirigeant(qualiteDirigeant string) ApiRechercheRequest {
	r.qualiteDirigeant = &qualiteDirigeant
	return r
}

// Nationalité du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheRequest) NationaliteDirigeant(nationaliteDirigeant string) ApiRechercheRequest {
	r.nationaliteDirigeant = &nationaliteDirigeant
	return r
}

// Nom du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheRequest) NomDirigeant(nomDirigeant string) ApiRechercheRequest {
	r.nomDirigeant = &nomDirigeant
	return r
}

// Prénom du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheRequest) PrenomDirigeant(prenomDirigeant string) ApiRechercheRequest {
	r.prenomDirigeant = &prenomDirigeant
	return r
}

// Âge minimal du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheRequest) AgeDirigeantMin(ageDirigeantMin int32) ApiRechercheRequest {
	r.ageDirigeantMin = &ageDirigeantMin
	return r
}

// Âge maximal du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheRequest) AgeDirigeantMax(ageDirigeantMax int32) ApiRechercheRequest {
	r.ageDirigeantMax = &ageDirigeantMax
	return r
}

// Date de naissance minimale du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises), au format JJ-MM-AAAA.
func (r ApiRechercheRequest) DateDeNaissanceDirigeantMin(dateDeNaissanceDirigeantMin string) ApiRechercheRequest {
	r.dateDeNaissanceDirigeantMin = &dateDeNaissanceDirigeantMin
	return r
}

// Date de naissance maximale du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises) de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheRequest) DateDeNaissanceDirigeantMax(dateDeNaissanceDirigeantMax string) ApiRechercheRequest {
	r.dateDeNaissanceDirigeantMax = &dateDeNaissanceDirigeantMax
	return r
}

// Âge minimal du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheRequest) AgeBeneficiaireMin(ageBeneficiaireMin int32) ApiRechercheRequest {
	r.ageBeneficiaireMin = &ageBeneficiaireMin
	return r
}

// Âge maximal du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheRequest) AgeBeneficiaireMax(ageBeneficiaireMax int32) ApiRechercheRequest {
	r.ageBeneficiaireMax = &ageBeneficiaireMax
	return r
}

// Date de naissance minimale du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises), au format JJ-MM-AAAA.
func (r ApiRechercheRequest) DateDeNaissanceBeneficiaireMin(dateDeNaissanceBeneficiaireMin string) ApiRechercheRequest {
	r.dateDeNaissanceBeneficiaireMin = &dateDeNaissanceBeneficiaireMin
	return r
}

// Date de naissance maximale du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises) de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheRequest) DateDeNaissanceBeneficiaireMax(dateDeNaissanceBeneficiaireMax string) ApiRechercheRequest {
	r.dateDeNaissanceBeneficiaireMax = &dateDeNaissanceBeneficiaireMax
	return r
}

// Nationalité du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheRequest) NationaliteBeneficiaire(nationaliteBeneficiaire string) ApiRechercheRequest {
	r.nationaliteBeneficiaire = &nationaliteBeneficiaire
	return r
}

// Date de dépôt minimale du document, au format JJ-MM-AAAA.
func (r ApiRechercheRequest) DateDepotDocumentMin(dateDepotDocumentMin string) ApiRechercheRequest {
	r.dateDepotDocumentMin = &dateDepotDocumentMin
	return r
}

// Date de dépôt maximale du document, au format JJ-MM-AAAA.
func (r ApiRechercheRequest) DateDepotDocumentMax(dateDepotDocumentMax string) ApiRechercheRequest {
	r.dateDepotDocumentMax = &dateDepotDocumentMax
	return r
}

// Type de publication
func (r ApiRechercheRequest) TypePublication(typePublication string) ApiRechercheRequest {
	r.typePublication = &typePublication
	return r
}

// Date publication minimale de la publication, au format JJ-MM-AAAA.
func (r ApiRechercheRequest) DatePublicationMin(datePublicationMin string) ApiRechercheRequest {
	r.datePublicationMin = &datePublicationMin
	return r
}

// Date de publication maximale de la publication, au format JJ-MM-AAAA.
func (r ApiRechercheRequest) DatePublicationMax(datePublicationMax string) ApiRechercheRequest {
	r.datePublicationMax = &datePublicationMax
	return r
}

func (r ApiRechercheRequest) Execute() (*Recherche200Response, *http.Response, error) {
	return r.ApiService.RechercheExecute(r)
}

/*
Recherche Recherche les entreprises qui correspondent à des critères.

Tous les paramètres sont optionnels et servent à filtrer la recherche. Les différentes entreprises seront renvoyées dans un tableau `resultats`, et le nombre total de résultats sera renvoyé dans le champ `total`.

Pour parcourir l'ensemble des résultats, deux solutions sont possibles :

- La pagination (paramètres `page` et `par_page`), limitée aux 400 premiers résultats ;
- Les curseurs (paramètres `curseur` et `par_curseur`).


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRechercheRequest
*/
func (a *RechercheAPIService) Recherche(ctx context.Context) ApiRechercheRequest {
	return ApiRechercheRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Recherche200Response
func (a *RechercheAPIService) RechercheExecute(r ApiRechercheRequest) (*Recherche200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Recherche200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RechercheAPIService.Recherche")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recherche"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.parPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "par_page", r.parPage, "form", "")
	}
	if r.curseur != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "curseur", r.curseur, "form", "")
	}
	if r.parCurseur != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "par_curseur", r.parCurseur, "form", "")
	}
	if r.bases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bases", r.bases, "form", "")
	}
	if r.precision != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "precision", r.precision, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.siege != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "siege", r.siege, "form", "")
	}
	if r.codeNaf != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code_naf", r.codeNaf, "form", "")
	}
	if r.departement != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departement", r.departement, "form", "")
	}
	if r.region != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "region", r.region, "form", "")
	}
	if r.codePostal != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code_postal", r.codePostal, "form", "")
	}
	if r.conventionCollective != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "convention_collective", r.conventionCollective, "form", "")
	}
	if r.categorieJuridique != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "categorie_juridique", r.categorieJuridique, "form", "")
	}
	if r.entrepriseCessee != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "entreprise_cessee", r.entrepriseCessee, "form", "")
	}
	if r.statutRcs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "statut_rcs", r.statutRcs, "form", "")
	}
	if r.objetSocial != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "objet_social", r.objetSocial, "form", "")
	}
	if r.dateImmatriculationRcsMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_immatriculation_rcs_min", r.dateImmatriculationRcsMin, "form", "")
	}
	if r.dateImmatriculationRcsMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_immatriculation_rcs_max", r.dateImmatriculationRcsMax, "form", "")
	}
	if r.dateRadiationRcsMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_radiation_rcs_min", r.dateRadiationRcsMin, "form", "")
	}
	if r.dateRadiationRcsMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_radiation_rcs_max", r.dateRadiationRcsMax, "form", "")
	}
	if r.capitalMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "capital_min", r.capitalMin, "form", "")
	}
	if r.capitalMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "capital_max", r.capitalMax, "form", "")
	}
	if r.chiffreAffairesMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chiffre_affaires_min", r.chiffreAffairesMin, "form", "")
	}
	if r.chiffreAffairesMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chiffre_affaires_max", r.chiffreAffairesMax, "form", "")
	}
	if r.resultatMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resultat_min", r.resultatMin, "form", "")
	}
	if r.resultatMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resultat_max", r.resultatMax, "form", "")
	}
	if r.dateCreationMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_creation_min", r.dateCreationMin, "form", "")
	}
	if r.dateCreationMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_creation_max", r.dateCreationMax, "form", "")
	}
	if r.trancheEffectifMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tranche_effectif_min", r.trancheEffectifMin, "form", "")
	}
	if r.trancheEffectifMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tranche_effectif_max", r.trancheEffectifMax, "form", "")
	}
	if r.typeDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_dirigeant", r.typeDirigeant, "form", "")
	}
	if r.qualiteDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "qualite_dirigeant", r.qualiteDirigeant, "form", "")
	}
	if r.nationaliteDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nationalite_dirigeant", r.nationaliteDirigeant, "form", "")
	}
	if r.nomDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nom_dirigeant", r.nomDirigeant, "form", "")
	}
	if r.prenomDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prenom_dirigeant", r.prenomDirigeant, "form", "")
	}
	if r.ageDirigeantMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_dirigeant_min", r.ageDirigeantMin, "form", "")
	}
	if r.ageDirigeantMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_dirigeant_max", r.ageDirigeantMax, "form", "")
	}
	if r.dateDeNaissanceDirigeantMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_dirigeant_min", r.dateDeNaissanceDirigeantMin, "form", "")
	}
	if r.dateDeNaissanceDirigeantMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_dirigeant_max", r.dateDeNaissanceDirigeantMax, "form", "")
	}
	if r.ageBeneficiaireMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_beneficiaire_min", r.ageBeneficiaireMin, "form", "")
	}
	if r.ageBeneficiaireMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_beneficiaire_max", r.ageBeneficiaireMax, "form", "")
	}
	if r.dateDeNaissanceBeneficiaireMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_beneficiaire_min", r.dateDeNaissanceBeneficiaireMin, "form", "")
	}
	if r.dateDeNaissanceBeneficiaireMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_beneficiaire_max", r.dateDeNaissanceBeneficiaireMax, "form", "")
	}
	if r.nationaliteBeneficiaire != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nationalite_beneficiaire", r.nationaliteBeneficiaire, "form", "")
	}
	if r.dateDepotDocumentMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_depot_document_min", r.dateDepotDocumentMin, "form", "")
	}
	if r.dateDepotDocumentMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_depot_document_max", r.dateDepotDocumentMax, "form", "")
	}
	if r.typePublication != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_publication", r.typePublication, "form", "")
	}
	if r.datePublicationMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_publication_min", r.datePublicationMin, "form", "")
	}
	if r.datePublicationMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_publication_max", r.datePublicationMax, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRechercheBeneficiairesRequest struct {
	ctx context.Context
	ApiService *RechercheAPIService
	parPage *int32
	page *int32
	precision *string
	q *string
	ageBeneficiaireMin *int32
	ageBeneficiaireMax *int32
	dateDeNaissanceBeneficiaireMin *string
	dateDeNaissanceBeneficiaireMax *string
	nationaliteBeneficiaire *string
	codeNaf *string
	departement *string
	region *string
	codePostal *string
	conventionCollective *string
	categorieJuridique *string
	entrepriseCessee *bool
	statutRcs *string
	objetSocial *string
	dateImmatriculationRcsMin *string
	dateImmatriculationRcsMax *string
	dateRadiationRcsMin *string
	dateRadiationRcsMax *string
	capitalMin *string
	capitalMax *string
	chiffreAffairesMin *string
	chiffreAffairesMax *string
	resultatMin *string
	resultatMax *string
	dateCreationMin *string
	dateCreationMax *string
	trancheEffectifMin *string
	trancheEffectifMax *string
	typeDirigeant *string
	qualiteDirigeant *string
	nationaliteDirigeant *string
	nomDirigeant *string
	prenomDirigeant *string
	ageDirigeantMin *int32
	ageDirigeantMax *int32
	dateDeNaissanceDirigeantMin *string
	dateDeNaissanceDirigeantMax *string
	dateDepotDocumentMin *string
	dateDepotDocumentMax *string
	typePublication *string
	datePublicationMin *string
	datePublicationMax *string
	siren *string
}

// Nombre de résultats affichés sur une page. Valeur par défaut : &#x60;10&#x60;.
func (r ApiRechercheBeneficiairesRequest) ParPage(parPage int32) ApiRechercheBeneficiairesRequest {
	r.parPage = &parPage
	return r
}

// Page de résultats. Valeur par défaut : &#x60;1&#x60;.
func (r ApiRechercheBeneficiairesRequest) Page(page int32) ApiRechercheBeneficiairesRequest {
	r.page = &page
	return r
}

// Niveau de précision de la recherche. Valeur par défaut : &#x60;\&quot;standard\&quot;&#x60;.
func (r ApiRechercheBeneficiairesRequest) Precision(precision string) ApiRechercheBeneficiairesRequest {
	r.precision = &precision
	return r
}

// Nom et/ou prénom du bénéficiaire effectif.
func (r ApiRechercheBeneficiairesRequest) Q(q string) ApiRechercheBeneficiairesRequest {
	r.q = &q
	return r
}

// Âge minimal du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheBeneficiairesRequest) AgeBeneficiaireMin(ageBeneficiaireMin int32) ApiRechercheBeneficiairesRequest {
	r.ageBeneficiaireMin = &ageBeneficiaireMin
	return r
}

// Âge maximal du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheBeneficiairesRequest) AgeBeneficiaireMax(ageBeneficiaireMax int32) ApiRechercheBeneficiairesRequest {
	r.ageBeneficiaireMax = &ageBeneficiaireMax
	return r
}

// Date de naissance minimale du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises), au format JJ-MM-AAAA.
func (r ApiRechercheBeneficiairesRequest) DateDeNaissanceBeneficiaireMin(dateDeNaissanceBeneficiaireMin string) ApiRechercheBeneficiairesRequest {
	r.dateDeNaissanceBeneficiaireMin = &dateDeNaissanceBeneficiaireMin
	return r
}

// Date de naissance maximale du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises) de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheBeneficiairesRequest) DateDeNaissanceBeneficiaireMax(dateDeNaissanceBeneficiaireMax string) ApiRechercheBeneficiairesRequest {
	r.dateDeNaissanceBeneficiaireMax = &dateDeNaissanceBeneficiaireMax
	return r
}

// Nationalité du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheBeneficiairesRequest) NationaliteBeneficiaire(nationaliteBeneficiaire string) ApiRechercheBeneficiairesRequest {
	r.nationaliteBeneficiaire = &nationaliteBeneficiaire
	return r
}

// Code NAF de l&#39;entreprise. Il est possible d&#39;indiquer plusieurs codes NAF en les séparant par des virgules.
func (r ApiRechercheBeneficiairesRequest) CodeNaf(codeNaf string) ApiRechercheBeneficiairesRequest {
	r.codeNaf = &codeNaf
	return r
}

// Numéro de département de l&#39;un des établissements de l&#39;entreprise. Il est possible d&#39;indiquer plusieurs départements en les séparant par des virgules.
func (r ApiRechercheBeneficiairesRequest) Departement(departement string) ApiRechercheBeneficiairesRequest {
	r.departement = &departement
	return r
}

// Code de la région de l&#39;un des établissements de l&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/4316069#titre-bloc-18). Il est possible d&#39;indiquer plusieurs codes régions en les séparant par des virgules.
func (r ApiRechercheBeneficiairesRequest) Region(region string) ApiRechercheBeneficiairesRequest {
	r.region = &region
	return r
}

// Code postal de l&#39;un des établissements de l&#39;entreprise. Il est possible d&#39;indiquer plusieurs codes postaux en les séparant par des virgules.
func (r ApiRechercheBeneficiairesRequest) CodePostal(codePostal string) ApiRechercheBeneficiairesRequest {
	r.codePostal = &codePostal
	return r
}

// Convention collective de l&#39;entreprise.
func (r ApiRechercheBeneficiairesRequest) ConventionCollective(conventionCollective string) ApiRechercheBeneficiairesRequest {
	r.conventionCollective = &conventionCollective
	return r
}

// Catégorie juridique de l&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/2028129).   **Note** : Le code correspond à celui de l&#39;INSEE, à l&#39;exception des SASU qui auront comme code 5720 et les EURL qui auront comme code 5498.
func (r ApiRechercheBeneficiairesRequest) CategorieJuridique(categorieJuridique string) ApiRechercheBeneficiairesRequest {
	r.categorieJuridique = &categorieJuridique
	return r
}

// Activité de l&#39;entreprise cessée ou non.
func (r ApiRechercheBeneficiairesRequest) EntrepriseCessee(entrepriseCessee bool) ApiRechercheBeneficiairesRequest {
	r.entrepriseCessee = &entrepriseCessee
	return r
}

// Statut au RCS
func (r ApiRechercheBeneficiairesRequest) StatutRcs(statutRcs string) ApiRechercheBeneficiairesRequest {
	r.statutRcs = &statutRcs
	return r
}

// Objet social de l&#39;entreprise déclaré au RCS.
func (r ApiRechercheBeneficiairesRequest) ObjetSocial(objetSocial string) ApiRechercheBeneficiairesRequest {
	r.objetSocial = &objetSocial
	return r
}

// Date d&#39;immatriculation au RCS minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheBeneficiairesRequest) DateImmatriculationRcsMin(dateImmatriculationRcsMin string) ApiRechercheBeneficiairesRequest {
	r.dateImmatriculationRcsMin = &dateImmatriculationRcsMin
	return r
}

// d&#39;immatriculation au RCS minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheBeneficiairesRequest) DateImmatriculationRcsMax(dateImmatriculationRcsMax string) ApiRechercheBeneficiairesRequest {
	r.dateImmatriculationRcsMax = &dateImmatriculationRcsMax
	return r
}

// Date de radiation au RCS minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheBeneficiairesRequest) DateRadiationRcsMin(dateRadiationRcsMin string) ApiRechercheBeneficiairesRequest {
	r.dateRadiationRcsMin = &dateRadiationRcsMin
	return r
}

// Date de radiation au RCS maximale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheBeneficiairesRequest) DateRadiationRcsMax(dateRadiationRcsMax string) ApiRechercheBeneficiairesRequest {
	r.dateRadiationRcsMax = &dateRadiationRcsMax
	return r
}

// Capital minimum de l&#39;entreprise.
func (r ApiRechercheBeneficiairesRequest) CapitalMin(capitalMin string) ApiRechercheBeneficiairesRequest {
	r.capitalMin = &capitalMin
	return r
}

// Capital maximum de l&#39;entreprise.
func (r ApiRechercheBeneficiairesRequest) CapitalMax(capitalMax string) ApiRechercheBeneficiairesRequest {
	r.capitalMax = &capitalMax
	return r
}

// Chiffre d&#39;affaires minimum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRechercheBeneficiairesRequest) ChiffreAffairesMin(chiffreAffairesMin string) ApiRechercheBeneficiairesRequest {
	r.chiffreAffairesMin = &chiffreAffairesMin
	return r
}

// Chiffre d&#39;affaires maximum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRechercheBeneficiairesRequest) ChiffreAffairesMax(chiffreAffairesMax string) ApiRechercheBeneficiairesRequest {
	r.chiffreAffairesMax = &chiffreAffairesMax
	return r
}

// Résultat minimum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRechercheBeneficiairesRequest) ResultatMin(resultatMin string) ApiRechercheBeneficiairesRequest {
	r.resultatMin = &resultatMin
	return r
}

// Résultat maximum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRechercheBeneficiairesRequest) ResultatMax(resultatMax string) ApiRechercheBeneficiairesRequest {
	r.resultatMax = &resultatMax
	return r
}

// Date de création minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheBeneficiairesRequest) DateCreationMin(dateCreationMin string) ApiRechercheBeneficiairesRequest {
	r.dateCreationMin = &dateCreationMin
	return r
}

// Date de création maximale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheBeneficiairesRequest) DateCreationMax(dateCreationMax string) ApiRechercheBeneficiairesRequest {
	r.dateCreationMax = &dateCreationMax
	return r
}

// Tranche d&#39;effectifs minimale de l&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/static-resources/documentation/v_sommaire_311.htm#73).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
func (r ApiRechercheBeneficiairesRequest) TrancheEffectifMin(trancheEffectifMin string) ApiRechercheBeneficiairesRequest {
	r.trancheEffectifMin = &trancheEffectifMin
	return r
}

// Tranche d&#39;effectifs maximale de l&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/static-resources/documentation/v_sommaire_311.htm#73).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
func (r ApiRechercheBeneficiairesRequest) TrancheEffectifMax(trancheEffectifMax string) ApiRechercheBeneficiairesRequest {
	r.trancheEffectifMax = &trancheEffectifMax
	return r
}

// Type du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheBeneficiairesRequest) TypeDirigeant(typeDirigeant string) ApiRechercheBeneficiairesRequest {
	r.typeDirigeant = &typeDirigeant
	return r
}

// Qualité du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheBeneficiairesRequest) QualiteDirigeant(qualiteDirigeant string) ApiRechercheBeneficiairesRequest {
	r.qualiteDirigeant = &qualiteDirigeant
	return r
}

// Nationalité du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheBeneficiairesRequest) NationaliteDirigeant(nationaliteDirigeant string) ApiRechercheBeneficiairesRequest {
	r.nationaliteDirigeant = &nationaliteDirigeant
	return r
}

// Nom du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheBeneficiairesRequest) NomDirigeant(nomDirigeant string) ApiRechercheBeneficiairesRequest {
	r.nomDirigeant = &nomDirigeant
	return r
}

// Prénom du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheBeneficiairesRequest) PrenomDirigeant(prenomDirigeant string) ApiRechercheBeneficiairesRequest {
	r.prenomDirigeant = &prenomDirigeant
	return r
}

// Âge minimal du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheBeneficiairesRequest) AgeDirigeantMin(ageDirigeantMin int32) ApiRechercheBeneficiairesRequest {
	r.ageDirigeantMin = &ageDirigeantMin
	return r
}

// Âge maximal du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheBeneficiairesRequest) AgeDirigeantMax(ageDirigeantMax int32) ApiRechercheBeneficiairesRequest {
	r.ageDirigeantMax = &ageDirigeantMax
	return r
}

// Date de naissance minimale du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises), au format JJ-MM-AAAA.
func (r ApiRechercheBeneficiairesRequest) DateDeNaissanceDirigeantMin(dateDeNaissanceDirigeantMin string) ApiRechercheBeneficiairesRequest {
	r.dateDeNaissanceDirigeantMin = &dateDeNaissanceDirigeantMin
	return r
}

// Date de naissance maximale du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises) de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheBeneficiairesRequest) DateDeNaissanceDirigeantMax(dateDeNaissanceDirigeantMax string) ApiRechercheBeneficiairesRequest {
	r.dateDeNaissanceDirigeantMax = &dateDeNaissanceDirigeantMax
	return r
}

// Date de dépôt minimale du document, au format JJ-MM-AAAA.
func (r ApiRechercheBeneficiairesRequest) DateDepotDocumentMin(dateDepotDocumentMin string) ApiRechercheBeneficiairesRequest {
	r.dateDepotDocumentMin = &dateDepotDocumentMin
	return r
}

// Date de dépôt maximale du document, au format JJ-MM-AAAA.
func (r ApiRechercheBeneficiairesRequest) DateDepotDocumentMax(dateDepotDocumentMax string) ApiRechercheBeneficiairesRequest {
	r.dateDepotDocumentMax = &dateDepotDocumentMax
	return r
}

// Type de publication
func (r ApiRechercheBeneficiairesRequest) TypePublication(typePublication string) ApiRechercheBeneficiairesRequest {
	r.typePublication = &typePublication
	return r
}

// Date publication minimale de la publication, au format JJ-MM-AAAA.
func (r ApiRechercheBeneficiairesRequest) DatePublicationMin(datePublicationMin string) ApiRechercheBeneficiairesRequest {
	r.datePublicationMin = &datePublicationMin
	return r
}

// Date de publication maximale de la publication, au format JJ-MM-AAAA.
func (r ApiRechercheBeneficiairesRequest) DatePublicationMax(datePublicationMax string) ApiRechercheBeneficiairesRequest {
	r.datePublicationMax = &datePublicationMax
	return r
}

// SIREN de l&#39;entreprise.
func (r ApiRechercheBeneficiairesRequest) Siren(siren string) ApiRechercheBeneficiairesRequest {
	r.siren = &siren
	return r
}

func (r ApiRechercheBeneficiairesRequest) Execute() (*RechercheBeneficiaires200Response, *http.Response, error) {
	return r.ApiService.RechercheBeneficiairesExecute(r)
}

/*
RechercheBeneficiaires Recherche les bénéficiaires effectifs qui correspondent à des critères.

Tous les paramètres sont optionnels et servent à filtrer la recherche. Les différents bénéficiaires effectifs seront renvoyées dans un tableau `resultats`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRechercheBeneficiairesRequest
*/
func (a *RechercheAPIService) RechercheBeneficiaires(ctx context.Context) ApiRechercheBeneficiairesRequest {
	return ApiRechercheBeneficiairesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RechercheBeneficiaires200Response
func (a *RechercheAPIService) RechercheBeneficiairesExecute(r ApiRechercheBeneficiairesRequest) (*RechercheBeneficiaires200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RechercheBeneficiaires200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RechercheAPIService.RechercheBeneficiaires")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recherche-beneficiaires"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.parPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "par_page", r.parPage, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.precision != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "precision", r.precision, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.ageBeneficiaireMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_beneficiaire_min", r.ageBeneficiaireMin, "form", "")
	}
	if r.ageBeneficiaireMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_beneficiaire_max", r.ageBeneficiaireMax, "form", "")
	}
	if r.dateDeNaissanceBeneficiaireMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_beneficiaire_min", r.dateDeNaissanceBeneficiaireMin, "form", "")
	}
	if r.dateDeNaissanceBeneficiaireMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_beneficiaire_max", r.dateDeNaissanceBeneficiaireMax, "form", "")
	}
	if r.nationaliteBeneficiaire != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nationalite_beneficiaire", r.nationaliteBeneficiaire, "form", "")
	}
	if r.codeNaf != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code_naf", r.codeNaf, "form", "")
	}
	if r.departement != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departement", r.departement, "form", "")
	}
	if r.region != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "region", r.region, "form", "")
	}
	if r.codePostal != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code_postal", r.codePostal, "form", "")
	}
	if r.conventionCollective != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "convention_collective", r.conventionCollective, "form", "")
	}
	if r.categorieJuridique != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "categorie_juridique", r.categorieJuridique, "form", "")
	}
	if r.entrepriseCessee != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "entreprise_cessee", r.entrepriseCessee, "form", "")
	}
	if r.statutRcs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "statut_rcs", r.statutRcs, "form", "")
	}
	if r.objetSocial != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "objet_social", r.objetSocial, "form", "")
	}
	if r.dateImmatriculationRcsMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_immatriculation_rcs_min", r.dateImmatriculationRcsMin, "form", "")
	}
	if r.dateImmatriculationRcsMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_immatriculation_rcs_max", r.dateImmatriculationRcsMax, "form", "")
	}
	if r.dateRadiationRcsMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_radiation_rcs_min", r.dateRadiationRcsMin, "form", "")
	}
	if r.dateRadiationRcsMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_radiation_rcs_max", r.dateRadiationRcsMax, "form", "")
	}
	if r.capitalMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "capital_min", r.capitalMin, "form", "")
	}
	if r.capitalMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "capital_max", r.capitalMax, "form", "")
	}
	if r.chiffreAffairesMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chiffre_affaires_min", r.chiffreAffairesMin, "form", "")
	}
	if r.chiffreAffairesMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chiffre_affaires_max", r.chiffreAffairesMax, "form", "")
	}
	if r.resultatMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resultat_min", r.resultatMin, "form", "")
	}
	if r.resultatMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resultat_max", r.resultatMax, "form", "")
	}
	if r.dateCreationMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_creation_min", r.dateCreationMin, "form", "")
	}
	if r.dateCreationMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_creation_max", r.dateCreationMax, "form", "")
	}
	if r.trancheEffectifMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tranche_effectif_min", r.trancheEffectifMin, "form", "")
	}
	if r.trancheEffectifMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tranche_effectif_max", r.trancheEffectifMax, "form", "")
	}
	if r.typeDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_dirigeant", r.typeDirigeant, "form", "")
	}
	if r.qualiteDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "qualite_dirigeant", r.qualiteDirigeant, "form", "")
	}
	if r.nationaliteDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nationalite_dirigeant", r.nationaliteDirigeant, "form", "")
	}
	if r.nomDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nom_dirigeant", r.nomDirigeant, "form", "")
	}
	if r.prenomDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prenom_dirigeant", r.prenomDirigeant, "form", "")
	}
	if r.ageDirigeantMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_dirigeant_min", r.ageDirigeantMin, "form", "")
	}
	if r.ageDirigeantMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_dirigeant_max", r.ageDirigeantMax, "form", "")
	}
	if r.dateDeNaissanceDirigeantMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_dirigeant_min", r.dateDeNaissanceDirigeantMin, "form", "")
	}
	if r.dateDeNaissanceDirigeantMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_dirigeant_max", r.dateDeNaissanceDirigeantMax, "form", "")
	}
	if r.dateDepotDocumentMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_depot_document_min", r.dateDepotDocumentMin, "form", "")
	}
	if r.dateDepotDocumentMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_depot_document_max", r.dateDepotDocumentMax, "form", "")
	}
	if r.typePublication != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_publication", r.typePublication, "form", "")
	}
	if r.datePublicationMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_publication_min", r.datePublicationMin, "form", "")
	}
	if r.datePublicationMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_publication_max", r.datePublicationMax, "form", "")
	}
	if r.siren != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "siren", r.siren, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRechercheDirigeantsRequest struct {
	ctx context.Context
	ApiService *RechercheAPIService
	parPage *int32
	page *int32
	precision *string
	q *string
	typeDirigeant *string
	qualiteDirigeant *string
	nationaliteDirigeant *string
	nomDirigeant *string
	prenomDirigeant *string
	ageDirigeantMin *int32
	ageDirigeantMax *int32
	dateDeNaissanceDirigeantMin *string
	dateDeNaissanceDirigeantMax *string
	codeNaf *string
	departement *string
	region *string
	codePostal *string
	conventionCollective *string
	categorieJuridique *string
	entrepriseCessee *bool
	statutRcs *string
	objetSocial *string
	dateImmatriculationRcsMin *string
	dateImmatriculationRcsMax *string
	dateRadiationRcsMin *string
	dateRadiationRcsMax *string
	capitalMin *string
	capitalMax *string
	chiffreAffairesMin *string
	chiffreAffairesMax *string
	resultatMin *string
	resultatMax *string
	dateCreationMin *string
	dateCreationMax *string
	trancheEffectifMin *string
	trancheEffectifMax *string
	ageBeneficiaireMin *int32
	ageBeneficiaireMax *int32
	dateDeNaissanceBeneficiaireMin *string
	dateDeNaissanceBeneficiaireMax *string
	nationaliteBeneficiaire *string
	dateDepotDocumentMin *string
	dateDepotDocumentMax *string
	typePublication *string
	datePublicationMin *string
	datePublicationMax *string
	siren *string
}

// Nombre de résultats affichés sur une page. Valeur par défaut : &#x60;10&#x60;.
func (r ApiRechercheDirigeantsRequest) ParPage(parPage int32) ApiRechercheDirigeantsRequest {
	r.parPage = &parPage
	return r
}

// Page de résultats. Valeur par défaut : &#x60;1&#x60;.
func (r ApiRechercheDirigeantsRequest) Page(page int32) ApiRechercheDirigeantsRequest {
	r.page = &page
	return r
}

// Niveau de précision de la recherche. Valeur par défaut : &#x60;\&quot;standard\&quot;&#x60;.
func (r ApiRechercheDirigeantsRequest) Precision(precision string) ApiRechercheDirigeantsRequest {
	r.precision = &precision
	return r
}

// Texte à rechercher. Nom et prénom du dirigeant pour une personne physique, dénomination pour une personne morale.
func (r ApiRechercheDirigeantsRequest) Q(q string) ApiRechercheDirigeantsRequest {
	r.q = &q
	return r
}

// Type du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDirigeantsRequest) TypeDirigeant(typeDirigeant string) ApiRechercheDirigeantsRequest {
	r.typeDirigeant = &typeDirigeant
	return r
}

// Qualité du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDirigeantsRequest) QualiteDirigeant(qualiteDirigeant string) ApiRechercheDirigeantsRequest {
	r.qualiteDirigeant = &qualiteDirigeant
	return r
}

// Nationalité du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDirigeantsRequest) NationaliteDirigeant(nationaliteDirigeant string) ApiRechercheDirigeantsRequest {
	r.nationaliteDirigeant = &nationaliteDirigeant
	return r
}

// Nom du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDirigeantsRequest) NomDirigeant(nomDirigeant string) ApiRechercheDirigeantsRequest {
	r.nomDirigeant = &nomDirigeant
	return r
}

// Prénom du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDirigeantsRequest) PrenomDirigeant(prenomDirigeant string) ApiRechercheDirigeantsRequest {
	r.prenomDirigeant = &prenomDirigeant
	return r
}

// Âge minimal du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDirigeantsRequest) AgeDirigeantMin(ageDirigeantMin int32) ApiRechercheDirigeantsRequest {
	r.ageDirigeantMin = &ageDirigeantMin
	return r
}

// Âge maximal du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDirigeantsRequest) AgeDirigeantMax(ageDirigeantMax int32) ApiRechercheDirigeantsRequest {
	r.ageDirigeantMax = &ageDirigeantMax
	return r
}

// Date de naissance minimale du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises), au format JJ-MM-AAAA.
func (r ApiRechercheDirigeantsRequest) DateDeNaissanceDirigeantMin(dateDeNaissanceDirigeantMin string) ApiRechercheDirigeantsRequest {
	r.dateDeNaissanceDirigeantMin = &dateDeNaissanceDirigeantMin
	return r
}

// Date de naissance maximale du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises) de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheDirigeantsRequest) DateDeNaissanceDirigeantMax(dateDeNaissanceDirigeantMax string) ApiRechercheDirigeantsRequest {
	r.dateDeNaissanceDirigeantMax = &dateDeNaissanceDirigeantMax
	return r
}

// Code NAF de l&#39;entreprise. Il est possible d&#39;indiquer plusieurs codes NAF en les séparant par des virgules.
func (r ApiRechercheDirigeantsRequest) CodeNaf(codeNaf string) ApiRechercheDirigeantsRequest {
	r.codeNaf = &codeNaf
	return r
}

// Numéro de département de l&#39;un des établissements de l&#39;entreprise. Il est possible d&#39;indiquer plusieurs départements en les séparant par des virgules.
func (r ApiRechercheDirigeantsRequest) Departement(departement string) ApiRechercheDirigeantsRequest {
	r.departement = &departement
	return r
}

// Code de la région de l&#39;un des établissements de l&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/4316069#titre-bloc-18). Il est possible d&#39;indiquer plusieurs codes régions en les séparant par des virgules.
func (r ApiRechercheDirigeantsRequest) Region(region string) ApiRechercheDirigeantsRequest {
	r.region = &region
	return r
}

// Code postal de l&#39;un des établissements de l&#39;entreprise. Il est possible d&#39;indiquer plusieurs codes postaux en les séparant par des virgules.
func (r ApiRechercheDirigeantsRequest) CodePostal(codePostal string) ApiRechercheDirigeantsRequest {
	r.codePostal = &codePostal
	return r
}

// Convention collective de l&#39;entreprise.
func (r ApiRechercheDirigeantsRequest) ConventionCollective(conventionCollective string) ApiRechercheDirigeantsRequest {
	r.conventionCollective = &conventionCollective
	return r
}

// Catégorie juridique de l&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/2028129).   **Note** : Le code correspond à celui de l&#39;INSEE, à l&#39;exception des SASU qui auront comme code 5720 et les EURL qui auront comme code 5498.
func (r ApiRechercheDirigeantsRequest) CategorieJuridique(categorieJuridique string) ApiRechercheDirigeantsRequest {
	r.categorieJuridique = &categorieJuridique
	return r
}

// Activité de l&#39;entreprise cessée ou non.
func (r ApiRechercheDirigeantsRequest) EntrepriseCessee(entrepriseCessee bool) ApiRechercheDirigeantsRequest {
	r.entrepriseCessee = &entrepriseCessee
	return r
}

// Statut au RCS
func (r ApiRechercheDirigeantsRequest) StatutRcs(statutRcs string) ApiRechercheDirigeantsRequest {
	r.statutRcs = &statutRcs
	return r
}

// Objet social de l&#39;entreprise déclaré au RCS.
func (r ApiRechercheDirigeantsRequest) ObjetSocial(objetSocial string) ApiRechercheDirigeantsRequest {
	r.objetSocial = &objetSocial
	return r
}

// Date d&#39;immatriculation au RCS minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheDirigeantsRequest) DateImmatriculationRcsMin(dateImmatriculationRcsMin string) ApiRechercheDirigeantsRequest {
	r.dateImmatriculationRcsMin = &dateImmatriculationRcsMin
	return r
}

// d&#39;immatriculation au RCS minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheDirigeantsRequest) DateImmatriculationRcsMax(dateImmatriculationRcsMax string) ApiRechercheDirigeantsRequest {
	r.dateImmatriculationRcsMax = &dateImmatriculationRcsMax
	return r
}

// Date de radiation au RCS minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheDirigeantsRequest) DateRadiationRcsMin(dateRadiationRcsMin string) ApiRechercheDirigeantsRequest {
	r.dateRadiationRcsMin = &dateRadiationRcsMin
	return r
}

// Date de radiation au RCS maximale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheDirigeantsRequest) DateRadiationRcsMax(dateRadiationRcsMax string) ApiRechercheDirigeantsRequest {
	r.dateRadiationRcsMax = &dateRadiationRcsMax
	return r
}

// Capital minimum de l&#39;entreprise.
func (r ApiRechercheDirigeantsRequest) CapitalMin(capitalMin string) ApiRechercheDirigeantsRequest {
	r.capitalMin = &capitalMin
	return r
}

// Capital maximum de l&#39;entreprise.
func (r ApiRechercheDirigeantsRequest) CapitalMax(capitalMax string) ApiRechercheDirigeantsRequest {
	r.capitalMax = &capitalMax
	return r
}

// Chiffre d&#39;affaires minimum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRechercheDirigeantsRequest) ChiffreAffairesMin(chiffreAffairesMin string) ApiRechercheDirigeantsRequest {
	r.chiffreAffairesMin = &chiffreAffairesMin
	return r
}

// Chiffre d&#39;affaires maximum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRechercheDirigeantsRequest) ChiffreAffairesMax(chiffreAffairesMax string) ApiRechercheDirigeantsRequest {
	r.chiffreAffairesMax = &chiffreAffairesMax
	return r
}

// Résultat minimum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRechercheDirigeantsRequest) ResultatMin(resultatMin string) ApiRechercheDirigeantsRequest {
	r.resultatMin = &resultatMin
	return r
}

// Résultat maximum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRechercheDirigeantsRequest) ResultatMax(resultatMax string) ApiRechercheDirigeantsRequest {
	r.resultatMax = &resultatMax
	return r
}

// Date de création minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheDirigeantsRequest) DateCreationMin(dateCreationMin string) ApiRechercheDirigeantsRequest {
	r.dateCreationMin = &dateCreationMin
	return r
}

// Date de création maximale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheDirigeantsRequest) DateCreationMax(dateCreationMax string) ApiRechercheDirigeantsRequest {
	r.dateCreationMax = &dateCreationMax
	return r
}

// Tranche d&#39;effectifs minimale de l&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/static-resources/documentation/v_sommaire_311.htm#73).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
func (r ApiRechercheDirigeantsRequest) TrancheEffectifMin(trancheEffectifMin string) ApiRechercheDirigeantsRequest {
	r.trancheEffectifMin = &trancheEffectifMin
	return r
}

// Tranche d&#39;effectifs maximale de l&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/static-resources/documentation/v_sommaire_311.htm#73).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
func (r ApiRechercheDirigeantsRequest) TrancheEffectifMax(trancheEffectifMax string) ApiRechercheDirigeantsRequest {
	r.trancheEffectifMax = &trancheEffectifMax
	return r
}

// Âge minimal du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDirigeantsRequest) AgeBeneficiaireMin(ageBeneficiaireMin int32) ApiRechercheDirigeantsRequest {
	r.ageBeneficiaireMin = &ageBeneficiaireMin
	return r
}

// Âge maximal du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDirigeantsRequest) AgeBeneficiaireMax(ageBeneficiaireMax int32) ApiRechercheDirigeantsRequest {
	r.ageBeneficiaireMax = &ageBeneficiaireMax
	return r
}

// Date de naissance minimale du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises), au format JJ-MM-AAAA.
func (r ApiRechercheDirigeantsRequest) DateDeNaissanceBeneficiaireMin(dateDeNaissanceBeneficiaireMin string) ApiRechercheDirigeantsRequest {
	r.dateDeNaissanceBeneficiaireMin = &dateDeNaissanceBeneficiaireMin
	return r
}

// Date de naissance maximale du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises) de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheDirigeantsRequest) DateDeNaissanceBeneficiaireMax(dateDeNaissanceBeneficiaireMax string) ApiRechercheDirigeantsRequest {
	r.dateDeNaissanceBeneficiaireMax = &dateDeNaissanceBeneficiaireMax
	return r
}

// Nationalité du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDirigeantsRequest) NationaliteBeneficiaire(nationaliteBeneficiaire string) ApiRechercheDirigeantsRequest {
	r.nationaliteBeneficiaire = &nationaliteBeneficiaire
	return r
}

// Date de dépôt minimale du document, au format JJ-MM-AAAA.
func (r ApiRechercheDirigeantsRequest) DateDepotDocumentMin(dateDepotDocumentMin string) ApiRechercheDirigeantsRequest {
	r.dateDepotDocumentMin = &dateDepotDocumentMin
	return r
}

// Date de dépôt maximale du document, au format JJ-MM-AAAA.
func (r ApiRechercheDirigeantsRequest) DateDepotDocumentMax(dateDepotDocumentMax string) ApiRechercheDirigeantsRequest {
	r.dateDepotDocumentMax = &dateDepotDocumentMax
	return r
}

// Type de publication
func (r ApiRechercheDirigeantsRequest) TypePublication(typePublication string) ApiRechercheDirigeantsRequest {
	r.typePublication = &typePublication
	return r
}

// Date publication minimale de la publication, au format JJ-MM-AAAA.
func (r ApiRechercheDirigeantsRequest) DatePublicationMin(datePublicationMin string) ApiRechercheDirigeantsRequest {
	r.datePublicationMin = &datePublicationMin
	return r
}

// Date de publication maximale de la publication, au format JJ-MM-AAAA.
func (r ApiRechercheDirigeantsRequest) DatePublicationMax(datePublicationMax string) ApiRechercheDirigeantsRequest {
	r.datePublicationMax = &datePublicationMax
	return r
}

// SIREN de l&#39;entreprise.
func (r ApiRechercheDirigeantsRequest) Siren(siren string) ApiRechercheDirigeantsRequest {
	r.siren = &siren
	return r
}

func (r ApiRechercheDirigeantsRequest) Execute() (*RechercheDirigeants200Response, *http.Response, error) {
	return r.ApiService.RechercheDirigeantsExecute(r)
}

/*
RechercheDirigeants Recherche les dirigeants qui correspondent à des critères.

Tous les paramètres sont optionnels et servent à filtrer la recherche. Les différents dirigeants seront renvoyées dans un tableau `resultats`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRechercheDirigeantsRequest
*/
func (a *RechercheAPIService) RechercheDirigeants(ctx context.Context) ApiRechercheDirigeantsRequest {
	return ApiRechercheDirigeantsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RechercheDirigeants200Response
func (a *RechercheAPIService) RechercheDirigeantsExecute(r ApiRechercheDirigeantsRequest) (*RechercheDirigeants200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RechercheDirigeants200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RechercheAPIService.RechercheDirigeants")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recherche-dirigeants"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.parPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "par_page", r.parPage, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.precision != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "precision", r.precision, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.typeDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_dirigeant", r.typeDirigeant, "form", "")
	}
	if r.qualiteDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "qualite_dirigeant", r.qualiteDirigeant, "form", "")
	}
	if r.nationaliteDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nationalite_dirigeant", r.nationaliteDirigeant, "form", "")
	}
	if r.nomDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nom_dirigeant", r.nomDirigeant, "form", "")
	}
	if r.prenomDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prenom_dirigeant", r.prenomDirigeant, "form", "")
	}
	if r.ageDirigeantMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_dirigeant_min", r.ageDirigeantMin, "form", "")
	}
	if r.ageDirigeantMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_dirigeant_max", r.ageDirigeantMax, "form", "")
	}
	if r.dateDeNaissanceDirigeantMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_dirigeant_min", r.dateDeNaissanceDirigeantMin, "form", "")
	}
	if r.dateDeNaissanceDirigeantMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_dirigeant_max", r.dateDeNaissanceDirigeantMax, "form", "")
	}
	if r.codeNaf != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code_naf", r.codeNaf, "form", "")
	}
	if r.departement != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departement", r.departement, "form", "")
	}
	if r.region != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "region", r.region, "form", "")
	}
	if r.codePostal != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code_postal", r.codePostal, "form", "")
	}
	if r.conventionCollective != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "convention_collective", r.conventionCollective, "form", "")
	}
	if r.categorieJuridique != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "categorie_juridique", r.categorieJuridique, "form", "")
	}
	if r.entrepriseCessee != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "entreprise_cessee", r.entrepriseCessee, "form", "")
	}
	if r.statutRcs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "statut_rcs", r.statutRcs, "form", "")
	}
	if r.objetSocial != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "objet_social", r.objetSocial, "form", "")
	}
	if r.dateImmatriculationRcsMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_immatriculation_rcs_min", r.dateImmatriculationRcsMin, "form", "")
	}
	if r.dateImmatriculationRcsMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_immatriculation_rcs_max", r.dateImmatriculationRcsMax, "form", "")
	}
	if r.dateRadiationRcsMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_radiation_rcs_min", r.dateRadiationRcsMin, "form", "")
	}
	if r.dateRadiationRcsMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_radiation_rcs_max", r.dateRadiationRcsMax, "form", "")
	}
	if r.capitalMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "capital_min", r.capitalMin, "form", "")
	}
	if r.capitalMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "capital_max", r.capitalMax, "form", "")
	}
	if r.chiffreAffairesMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chiffre_affaires_min", r.chiffreAffairesMin, "form", "")
	}
	if r.chiffreAffairesMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chiffre_affaires_max", r.chiffreAffairesMax, "form", "")
	}
	if r.resultatMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resultat_min", r.resultatMin, "form", "")
	}
	if r.resultatMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resultat_max", r.resultatMax, "form", "")
	}
	if r.dateCreationMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_creation_min", r.dateCreationMin, "form", "")
	}
	if r.dateCreationMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_creation_max", r.dateCreationMax, "form", "")
	}
	if r.trancheEffectifMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tranche_effectif_min", r.trancheEffectifMin, "form", "")
	}
	if r.trancheEffectifMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tranche_effectif_max", r.trancheEffectifMax, "form", "")
	}
	if r.ageBeneficiaireMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_beneficiaire_min", r.ageBeneficiaireMin, "form", "")
	}
	if r.ageBeneficiaireMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_beneficiaire_max", r.ageBeneficiaireMax, "form", "")
	}
	if r.dateDeNaissanceBeneficiaireMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_beneficiaire_min", r.dateDeNaissanceBeneficiaireMin, "form", "")
	}
	if r.dateDeNaissanceBeneficiaireMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_beneficiaire_max", r.dateDeNaissanceBeneficiaireMax, "form", "")
	}
	if r.nationaliteBeneficiaire != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nationalite_beneficiaire", r.nationaliteBeneficiaire, "form", "")
	}
	if r.dateDepotDocumentMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_depot_document_min", r.dateDepotDocumentMin, "form", "")
	}
	if r.dateDepotDocumentMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_depot_document_max", r.dateDepotDocumentMax, "form", "")
	}
	if r.typePublication != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_publication", r.typePublication, "form", "")
	}
	if r.datePublicationMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_publication_min", r.datePublicationMin, "form", "")
	}
	if r.datePublicationMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_publication_max", r.datePublicationMax, "form", "")
	}
	if r.siren != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "siren", r.siren, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRechercheDocumentsRequest struct {
	ctx context.Context
	ApiService *RechercheAPIService
	parPage *int32
	page *int32
	precision *string
	q *string
	dateDepotDocumentMin *string
	dateDepotDocumentMax *string
	codeNaf *string
	departement *string
	region *string
	codePostal *string
	conventionCollective *string
	categorieJuridique *string
	entrepriseCessee *bool
	statutRcs *string
	objetSocial *string
	dateImmatriculationRcsMin *string
	dateImmatriculationRcsMax *string
	dateRadiationRcsMin *string
	dateRadiationRcsMax *string
	capitalMin *string
	capitalMax *string
	chiffreAffairesMin *string
	chiffreAffairesMax *string
	resultatMin *string
	resultatMax *string
	dateCreationMin *string
	dateCreationMax *string
	trancheEffectifMin *string
	trancheEffectifMax *string
	typeDirigeant *string
	qualiteDirigeant *string
	nationaliteDirigeant *string
	nomDirigeant *string
	prenomDirigeant *string
	ageDirigeantMin *int32
	ageDirigeantMax *int32
	dateDeNaissanceDirigeantMin *string
	dateDeNaissanceDirigeantMax *string
	ageBeneficiaireMin *int32
	ageBeneficiaireMax *int32
	dateDeNaissanceBeneficiaireMin *string
	dateDeNaissanceBeneficiaireMax *string
	nationaliteBeneficiaire *string
	typePublication *string
	datePublicationMin *string
	datePublicationMax *string
	siren *string
}

// Nombre de résultats affichés sur une page. Valeur par défaut : &#x60;10&#x60;.
func (r ApiRechercheDocumentsRequest) ParPage(parPage int32) ApiRechercheDocumentsRequest {
	r.parPage = &parPage
	return r
}

// Page de résultats. Valeur par défaut : &#x60;1&#x60;.
func (r ApiRechercheDocumentsRequest) Page(page int32) ApiRechercheDocumentsRequest {
	r.page = &page
	return r
}

// Niveau de précision de la recherche. Valeur par défaut : &#x60;\&quot;standard\&quot;&#x60;.
func (r ApiRechercheDocumentsRequest) Precision(precision string) ApiRechercheDocumentsRequest {
	r.precision = &precision
	return r
}

// Mot-clé à rechercher dans le contenu du document.
func (r ApiRechercheDocumentsRequest) Q(q string) ApiRechercheDocumentsRequest {
	r.q = &q
	return r
}

// Date de dépôt minimale du document, au format JJ-MM-AAAA.
func (r ApiRechercheDocumentsRequest) DateDepotDocumentMin(dateDepotDocumentMin string) ApiRechercheDocumentsRequest {
	r.dateDepotDocumentMin = &dateDepotDocumentMin
	return r
}

// Date de dépôt maximale du document, au format JJ-MM-AAAA.
func (r ApiRechercheDocumentsRequest) DateDepotDocumentMax(dateDepotDocumentMax string) ApiRechercheDocumentsRequest {
	r.dateDepotDocumentMax = &dateDepotDocumentMax
	return r
}

// Code NAF de l&#39;entreprise. Il est possible d&#39;indiquer plusieurs codes NAF en les séparant par des virgules.
func (r ApiRechercheDocumentsRequest) CodeNaf(codeNaf string) ApiRechercheDocumentsRequest {
	r.codeNaf = &codeNaf
	return r
}

// Numéro de département de l&#39;un des établissements de l&#39;entreprise. Il est possible d&#39;indiquer plusieurs départements en les séparant par des virgules.
func (r ApiRechercheDocumentsRequest) Departement(departement string) ApiRechercheDocumentsRequest {
	r.departement = &departement
	return r
}

// Code de la région de l&#39;un des établissements de l&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/4316069#titre-bloc-18). Il est possible d&#39;indiquer plusieurs codes régions en les séparant par des virgules.
func (r ApiRechercheDocumentsRequest) Region(region string) ApiRechercheDocumentsRequest {
	r.region = &region
	return r
}

// Code postal de l&#39;un des établissements de l&#39;entreprise. Il est possible d&#39;indiquer plusieurs codes postaux en les séparant par des virgules.
func (r ApiRechercheDocumentsRequest) CodePostal(codePostal string) ApiRechercheDocumentsRequest {
	r.codePostal = &codePostal
	return r
}

// Convention collective de l&#39;entreprise.
func (r ApiRechercheDocumentsRequest) ConventionCollective(conventionCollective string) ApiRechercheDocumentsRequest {
	r.conventionCollective = &conventionCollective
	return r
}

// Catégorie juridique de l&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/2028129).   **Note** : Le code correspond à celui de l&#39;INSEE, à l&#39;exception des SASU qui auront comme code 5720 et les EURL qui auront comme code 5498.
func (r ApiRechercheDocumentsRequest) CategorieJuridique(categorieJuridique string) ApiRechercheDocumentsRequest {
	r.categorieJuridique = &categorieJuridique
	return r
}

// Activité de l&#39;entreprise cessée ou non.
func (r ApiRechercheDocumentsRequest) EntrepriseCessee(entrepriseCessee bool) ApiRechercheDocumentsRequest {
	r.entrepriseCessee = &entrepriseCessee
	return r
}

// Statut au RCS
func (r ApiRechercheDocumentsRequest) StatutRcs(statutRcs string) ApiRechercheDocumentsRequest {
	r.statutRcs = &statutRcs
	return r
}

// Objet social de l&#39;entreprise déclaré au RCS.
func (r ApiRechercheDocumentsRequest) ObjetSocial(objetSocial string) ApiRechercheDocumentsRequest {
	r.objetSocial = &objetSocial
	return r
}

// Date d&#39;immatriculation au RCS minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheDocumentsRequest) DateImmatriculationRcsMin(dateImmatriculationRcsMin string) ApiRechercheDocumentsRequest {
	r.dateImmatriculationRcsMin = &dateImmatriculationRcsMin
	return r
}

// d&#39;immatriculation au RCS minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheDocumentsRequest) DateImmatriculationRcsMax(dateImmatriculationRcsMax string) ApiRechercheDocumentsRequest {
	r.dateImmatriculationRcsMax = &dateImmatriculationRcsMax
	return r
}

// Date de radiation au RCS minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheDocumentsRequest) DateRadiationRcsMin(dateRadiationRcsMin string) ApiRechercheDocumentsRequest {
	r.dateRadiationRcsMin = &dateRadiationRcsMin
	return r
}

// Date de radiation au RCS maximale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheDocumentsRequest) DateRadiationRcsMax(dateRadiationRcsMax string) ApiRechercheDocumentsRequest {
	r.dateRadiationRcsMax = &dateRadiationRcsMax
	return r
}

// Capital minimum de l&#39;entreprise.
func (r ApiRechercheDocumentsRequest) CapitalMin(capitalMin string) ApiRechercheDocumentsRequest {
	r.capitalMin = &capitalMin
	return r
}

// Capital maximum de l&#39;entreprise.
func (r ApiRechercheDocumentsRequest) CapitalMax(capitalMax string) ApiRechercheDocumentsRequest {
	r.capitalMax = &capitalMax
	return r
}

// Chiffre d&#39;affaires minimum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRechercheDocumentsRequest) ChiffreAffairesMin(chiffreAffairesMin string) ApiRechercheDocumentsRequest {
	r.chiffreAffairesMin = &chiffreAffairesMin
	return r
}

// Chiffre d&#39;affaires maximum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRechercheDocumentsRequest) ChiffreAffairesMax(chiffreAffairesMax string) ApiRechercheDocumentsRequest {
	r.chiffreAffairesMax = &chiffreAffairesMax
	return r
}

// Résultat minimum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRechercheDocumentsRequest) ResultatMin(resultatMin string) ApiRechercheDocumentsRequest {
	r.resultatMin = &resultatMin
	return r
}

// Résultat maximum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRechercheDocumentsRequest) ResultatMax(resultatMax string) ApiRechercheDocumentsRequest {
	r.resultatMax = &resultatMax
	return r
}

// Date de création minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheDocumentsRequest) DateCreationMin(dateCreationMin string) ApiRechercheDocumentsRequest {
	r.dateCreationMin = &dateCreationMin
	return r
}

// Date de création maximale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheDocumentsRequest) DateCreationMax(dateCreationMax string) ApiRechercheDocumentsRequest {
	r.dateCreationMax = &dateCreationMax
	return r
}

// Tranche d&#39;effectifs minimale de l&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/static-resources/documentation/v_sommaire_311.htm#73).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
func (r ApiRechercheDocumentsRequest) TrancheEffectifMin(trancheEffectifMin string) ApiRechercheDocumentsRequest {
	r.trancheEffectifMin = &trancheEffectifMin
	return r
}

// Tranche d&#39;effectifs maximale de l&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/static-resources/documentation/v_sommaire_311.htm#73).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
func (r ApiRechercheDocumentsRequest) TrancheEffectifMax(trancheEffectifMax string) ApiRechercheDocumentsRequest {
	r.trancheEffectifMax = &trancheEffectifMax
	return r
}

// Type du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDocumentsRequest) TypeDirigeant(typeDirigeant string) ApiRechercheDocumentsRequest {
	r.typeDirigeant = &typeDirigeant
	return r
}

// Qualité du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDocumentsRequest) QualiteDirigeant(qualiteDirigeant string) ApiRechercheDocumentsRequest {
	r.qualiteDirigeant = &qualiteDirigeant
	return r
}

// Nationalité du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDocumentsRequest) NationaliteDirigeant(nationaliteDirigeant string) ApiRechercheDocumentsRequest {
	r.nationaliteDirigeant = &nationaliteDirigeant
	return r
}

// Nom du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDocumentsRequest) NomDirigeant(nomDirigeant string) ApiRechercheDocumentsRequest {
	r.nomDirigeant = &nomDirigeant
	return r
}

// Prénom du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDocumentsRequest) PrenomDirigeant(prenomDirigeant string) ApiRechercheDocumentsRequest {
	r.prenomDirigeant = &prenomDirigeant
	return r
}

// Âge minimal du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDocumentsRequest) AgeDirigeantMin(ageDirigeantMin int32) ApiRechercheDocumentsRequest {
	r.ageDirigeantMin = &ageDirigeantMin
	return r
}

// Âge maximal du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDocumentsRequest) AgeDirigeantMax(ageDirigeantMax int32) ApiRechercheDocumentsRequest {
	r.ageDirigeantMax = &ageDirigeantMax
	return r
}

// Date de naissance minimale du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises), au format JJ-MM-AAAA.
func (r ApiRechercheDocumentsRequest) DateDeNaissanceDirigeantMin(dateDeNaissanceDirigeantMin string) ApiRechercheDocumentsRequest {
	r.dateDeNaissanceDirigeantMin = &dateDeNaissanceDirigeantMin
	return r
}

// Date de naissance maximale du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises) de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheDocumentsRequest) DateDeNaissanceDirigeantMax(dateDeNaissanceDirigeantMax string) ApiRechercheDocumentsRequest {
	r.dateDeNaissanceDirigeantMax = &dateDeNaissanceDirigeantMax
	return r
}

// Âge minimal du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDocumentsRequest) AgeBeneficiaireMin(ageBeneficiaireMin int32) ApiRechercheDocumentsRequest {
	r.ageBeneficiaireMin = &ageBeneficiaireMin
	return r
}

// Âge maximal du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDocumentsRequest) AgeBeneficiaireMax(ageBeneficiaireMax int32) ApiRechercheDocumentsRequest {
	r.ageBeneficiaireMax = &ageBeneficiaireMax
	return r
}

// Date de naissance minimale du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises), au format JJ-MM-AAAA.
func (r ApiRechercheDocumentsRequest) DateDeNaissanceBeneficiaireMin(dateDeNaissanceBeneficiaireMin string) ApiRechercheDocumentsRequest {
	r.dateDeNaissanceBeneficiaireMin = &dateDeNaissanceBeneficiaireMin
	return r
}

// Date de naissance maximale du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises) de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRechercheDocumentsRequest) DateDeNaissanceBeneficiaireMax(dateDeNaissanceBeneficiaireMax string) ApiRechercheDocumentsRequest {
	r.dateDeNaissanceBeneficiaireMax = &dateDeNaissanceBeneficiaireMax
	return r
}

// Nationalité du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRechercheDocumentsRequest) NationaliteBeneficiaire(nationaliteBeneficiaire string) ApiRechercheDocumentsRequest {
	r.nationaliteBeneficiaire = &nationaliteBeneficiaire
	return r
}

// Type de publication
func (r ApiRechercheDocumentsRequest) TypePublication(typePublication string) ApiRechercheDocumentsRequest {
	r.typePublication = &typePublication
	return r
}

// Date publication minimale de la publication, au format JJ-MM-AAAA.
func (r ApiRechercheDocumentsRequest) DatePublicationMin(datePublicationMin string) ApiRechercheDocumentsRequest {
	r.datePublicationMin = &datePublicationMin
	return r
}

// Date de publication maximale de la publication, au format JJ-MM-AAAA.
func (r ApiRechercheDocumentsRequest) DatePublicationMax(datePublicationMax string) ApiRechercheDocumentsRequest {
	r.datePublicationMax = &datePublicationMax
	return r
}

// SIREN de l&#39;entreprise.
func (r ApiRechercheDocumentsRequest) Siren(siren string) ApiRechercheDocumentsRequest {
	r.siren = &siren
	return r
}

func (r ApiRechercheDocumentsRequest) Execute() (*RechercheDocuments200Response, *http.Response, error) {
	return r.ApiService.RechercheDocumentsExecute(r)
}

/*
RechercheDocuments Recherche les documents qui correspondent à des critères.

Tous les paramètres sont optionnels et servent à filtrer la recherche. Les différents documents seront renvoyées dans un tableau `resultats`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRechercheDocumentsRequest
*/
func (a *RechercheAPIService) RechercheDocuments(ctx context.Context) ApiRechercheDocumentsRequest {
	return ApiRechercheDocumentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RechercheDocuments200Response
func (a *RechercheAPIService) RechercheDocumentsExecute(r ApiRechercheDocumentsRequest) (*RechercheDocuments200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RechercheDocuments200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RechercheAPIService.RechercheDocuments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recherche-documents"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.parPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "par_page", r.parPage, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.precision != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "precision", r.precision, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.dateDepotDocumentMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_depot_document_min", r.dateDepotDocumentMin, "form", "")
	}
	if r.dateDepotDocumentMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_depot_document_max", r.dateDepotDocumentMax, "form", "")
	}
	if r.codeNaf != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code_naf", r.codeNaf, "form", "")
	}
	if r.departement != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departement", r.departement, "form", "")
	}
	if r.region != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "region", r.region, "form", "")
	}
	if r.codePostal != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code_postal", r.codePostal, "form", "")
	}
	if r.conventionCollective != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "convention_collective", r.conventionCollective, "form", "")
	}
	if r.categorieJuridique != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "categorie_juridique", r.categorieJuridique, "form", "")
	}
	if r.entrepriseCessee != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "entreprise_cessee", r.entrepriseCessee, "form", "")
	}
	if r.statutRcs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "statut_rcs", r.statutRcs, "form", "")
	}
	if r.objetSocial != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "objet_social", r.objetSocial, "form", "")
	}
	if r.dateImmatriculationRcsMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_immatriculation_rcs_min", r.dateImmatriculationRcsMin, "form", "")
	}
	if r.dateImmatriculationRcsMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_immatriculation_rcs_max", r.dateImmatriculationRcsMax, "form", "")
	}
	if r.dateRadiationRcsMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_radiation_rcs_min", r.dateRadiationRcsMin, "form", "")
	}
	if r.dateRadiationRcsMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_radiation_rcs_max", r.dateRadiationRcsMax, "form", "")
	}
	if r.capitalMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "capital_min", r.capitalMin, "form", "")
	}
	if r.capitalMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "capital_max", r.capitalMax, "form", "")
	}
	if r.chiffreAffairesMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chiffre_affaires_min", r.chiffreAffairesMin, "form", "")
	}
	if r.chiffreAffairesMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chiffre_affaires_max", r.chiffreAffairesMax, "form", "")
	}
	if r.resultatMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resultat_min", r.resultatMin, "form", "")
	}
	if r.resultatMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resultat_max", r.resultatMax, "form", "")
	}
	if r.dateCreationMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_creation_min", r.dateCreationMin, "form", "")
	}
	if r.dateCreationMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_creation_max", r.dateCreationMax, "form", "")
	}
	if r.trancheEffectifMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tranche_effectif_min", r.trancheEffectifMin, "form", "")
	}
	if r.trancheEffectifMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tranche_effectif_max", r.trancheEffectifMax, "form", "")
	}
	if r.typeDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_dirigeant", r.typeDirigeant, "form", "")
	}
	if r.qualiteDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "qualite_dirigeant", r.qualiteDirigeant, "form", "")
	}
	if r.nationaliteDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nationalite_dirigeant", r.nationaliteDirigeant, "form", "")
	}
	if r.nomDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nom_dirigeant", r.nomDirigeant, "form", "")
	}
	if r.prenomDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prenom_dirigeant", r.prenomDirigeant, "form", "")
	}
	if r.ageDirigeantMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_dirigeant_min", r.ageDirigeantMin, "form", "")
	}
	if r.ageDirigeantMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_dirigeant_max", r.ageDirigeantMax, "form", "")
	}
	if r.dateDeNaissanceDirigeantMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_dirigeant_min", r.dateDeNaissanceDirigeantMin, "form", "")
	}
	if r.dateDeNaissanceDirigeantMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_dirigeant_max", r.dateDeNaissanceDirigeantMax, "form", "")
	}
	if r.ageBeneficiaireMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_beneficiaire_min", r.ageBeneficiaireMin, "form", "")
	}
	if r.ageBeneficiaireMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_beneficiaire_max", r.ageBeneficiaireMax, "form", "")
	}
	if r.dateDeNaissanceBeneficiaireMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_beneficiaire_min", r.dateDeNaissanceBeneficiaireMin, "form", "")
	}
	if r.dateDeNaissanceBeneficiaireMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_beneficiaire_max", r.dateDeNaissanceBeneficiaireMax, "form", "")
	}
	if r.nationaliteBeneficiaire != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nationalite_beneficiaire", r.nationaliteBeneficiaire, "form", "")
	}
	if r.typePublication != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_publication", r.typePublication, "form", "")
	}
	if r.datePublicationMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_publication_min", r.datePublicationMin, "form", "")
	}
	if r.datePublicationMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_publication_max", r.datePublicationMax, "form", "")
	}
	if r.siren != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "siren", r.siren, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRecherchePublicationsRequest struct {
	ctx context.Context
	ApiService *RechercheAPIService
	parPage *int32
	page *int32
	precision *string
	q *string
	codeNaf *string
	departement *string
	region *string
	codePostal *string
	conventionCollective *string
	categorieJuridique *string
	entrepriseCessee *bool
	statutRcs *string
	objetSocial *string
	dateImmatriculationRcsMin *string
	dateImmatriculationRcsMax *string
	dateRadiationRcsMin *string
	dateRadiationRcsMax *string
	capitalMin *string
	capitalMax *string
	chiffreAffairesMin *string
	chiffreAffairesMax *string
	resultatMin *string
	resultatMax *string
	dateCreationMin *string
	dateCreationMax *string
	trancheEffectifMin *string
	trancheEffectifMax *string
	typeDirigeant *string
	qualiteDirigeant *string
	nationaliteDirigeant *string
	nomDirigeant *string
	prenomDirigeant *string
	ageDirigeantMin *int32
	ageDirigeantMax *int32
	dateDeNaissanceDirigeantMin *string
	dateDeNaissanceDirigeantMax *string
	ageBeneficiaireMin *int32
	ageBeneficiaireMax *int32
	dateDeNaissanceBeneficiaireMin *string
	dateDeNaissanceBeneficiaireMax *string
	nationaliteBeneficiaire *string
	dateDepotDocumentMin *string
	dateDepotDocumentMax *string
	typePublication *string
	datePublicationMin *string
	datePublicationMax *string
	siren *string
}

// Nombre de résultats affichés sur une page. Valeur par défaut : &#x60;10&#x60;.
func (r ApiRecherchePublicationsRequest) ParPage(parPage int32) ApiRecherchePublicationsRequest {
	r.parPage = &parPage
	return r
}

// Page de résultats. Valeur par défaut : &#x60;1&#x60;.
func (r ApiRecherchePublicationsRequest) Page(page int32) ApiRecherchePublicationsRequest {
	r.page = &page
	return r
}

// Niveau de précision de la recherche. Valeur par défaut : &#x60;\&quot;standard\&quot;&#x60;.
func (r ApiRecherchePublicationsRequest) Precision(precision string) ApiRecherchePublicationsRequest {
	r.precision = &precision
	return r
}

// Mot-clé à rechercher dans le contenu de la publication.
func (r ApiRecherchePublicationsRequest) Q(q string) ApiRecherchePublicationsRequest {
	r.q = &q
	return r
}

// Code NAF de l&#39;entreprise. Il est possible d&#39;indiquer plusieurs codes NAF en les séparant par des virgules.
func (r ApiRecherchePublicationsRequest) CodeNaf(codeNaf string) ApiRecherchePublicationsRequest {
	r.codeNaf = &codeNaf
	return r
}

// Numéro de département de l&#39;un des établissements de l&#39;entreprise. Il est possible d&#39;indiquer plusieurs départements en les séparant par des virgules.
func (r ApiRecherchePublicationsRequest) Departement(departement string) ApiRecherchePublicationsRequest {
	r.departement = &departement
	return r
}

// Code de la région de l&#39;un des établissements de l&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/4316069#titre-bloc-18). Il est possible d&#39;indiquer plusieurs codes régions en les séparant par des virgules.
func (r ApiRecherchePublicationsRequest) Region(region string) ApiRecherchePublicationsRequest {
	r.region = &region
	return r
}

// Code postal de l&#39;un des établissements de l&#39;entreprise. Il est possible d&#39;indiquer plusieurs codes postaux en les séparant par des virgules.
func (r ApiRecherchePublicationsRequest) CodePostal(codePostal string) ApiRecherchePublicationsRequest {
	r.codePostal = &codePostal
	return r
}

// Convention collective de l&#39;entreprise.
func (r ApiRecherchePublicationsRequest) ConventionCollective(conventionCollective string) ApiRecherchePublicationsRequest {
	r.conventionCollective = &conventionCollective
	return r
}

// Catégorie juridique de l&#39;entreprise, selon la [nomenclature Insee](https://www.insee.fr/fr/information/2028129).   **Note** : Le code correspond à celui de l&#39;INSEE, à l&#39;exception des SASU qui auront comme code 5720 et les EURL qui auront comme code 5498.
func (r ApiRecherchePublicationsRequest) CategorieJuridique(categorieJuridique string) ApiRecherchePublicationsRequest {
	r.categorieJuridique = &categorieJuridique
	return r
}

// Activité de l&#39;entreprise cessée ou non.
func (r ApiRecherchePublicationsRequest) EntrepriseCessee(entrepriseCessee bool) ApiRecherchePublicationsRequest {
	r.entrepriseCessee = &entrepriseCessee
	return r
}

// Statut au RCS
func (r ApiRecherchePublicationsRequest) StatutRcs(statutRcs string) ApiRecherchePublicationsRequest {
	r.statutRcs = &statutRcs
	return r
}

// Objet social de l&#39;entreprise déclaré au RCS.
func (r ApiRecherchePublicationsRequest) ObjetSocial(objetSocial string) ApiRecherchePublicationsRequest {
	r.objetSocial = &objetSocial
	return r
}

// Date d&#39;immatriculation au RCS minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRecherchePublicationsRequest) DateImmatriculationRcsMin(dateImmatriculationRcsMin string) ApiRecherchePublicationsRequest {
	r.dateImmatriculationRcsMin = &dateImmatriculationRcsMin
	return r
}

// d&#39;immatriculation au RCS minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRecherchePublicationsRequest) DateImmatriculationRcsMax(dateImmatriculationRcsMax string) ApiRecherchePublicationsRequest {
	r.dateImmatriculationRcsMax = &dateImmatriculationRcsMax
	return r
}

// Date de radiation au RCS minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRecherchePublicationsRequest) DateRadiationRcsMin(dateRadiationRcsMin string) ApiRecherchePublicationsRequest {
	r.dateRadiationRcsMin = &dateRadiationRcsMin
	return r
}

// Date de radiation au RCS maximale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRecherchePublicationsRequest) DateRadiationRcsMax(dateRadiationRcsMax string) ApiRecherchePublicationsRequest {
	r.dateRadiationRcsMax = &dateRadiationRcsMax
	return r
}

// Capital minimum de l&#39;entreprise.
func (r ApiRecherchePublicationsRequest) CapitalMin(capitalMin string) ApiRecherchePublicationsRequest {
	r.capitalMin = &capitalMin
	return r
}

// Capital maximum de l&#39;entreprise.
func (r ApiRecherchePublicationsRequest) CapitalMax(capitalMax string) ApiRecherchePublicationsRequest {
	r.capitalMax = &capitalMax
	return r
}

// Chiffre d&#39;affaires minimum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRecherchePublicationsRequest) ChiffreAffairesMin(chiffreAffairesMin string) ApiRecherchePublicationsRequest {
	r.chiffreAffairesMin = &chiffreAffairesMin
	return r
}

// Chiffre d&#39;affaires maximum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRecherchePublicationsRequest) ChiffreAffairesMax(chiffreAffairesMax string) ApiRecherchePublicationsRequest {
	r.chiffreAffairesMax = &chiffreAffairesMax
	return r
}

// Résultat minimum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRecherchePublicationsRequest) ResultatMin(resultatMin string) ApiRecherchePublicationsRequest {
	r.resultatMin = &resultatMin
	return r
}

// Résultat maximum de l&#39;entreprise.  **Note** : Filtrer sur ce critère restreint énormément les entreprises retournées car cela élimine d&#39;office toutes les entreprises dont les comptes ne sont pas publiés.
func (r ApiRecherchePublicationsRequest) ResultatMax(resultatMax string) ApiRecherchePublicationsRequest {
	r.resultatMax = &resultatMax
	return r
}

// Date de création minimale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRecherchePublicationsRequest) DateCreationMin(dateCreationMin string) ApiRecherchePublicationsRequest {
	r.dateCreationMin = &dateCreationMin
	return r
}

// Date de création maximale de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRecherchePublicationsRequest) DateCreationMax(dateCreationMax string) ApiRecherchePublicationsRequest {
	r.dateCreationMax = &dateCreationMax
	return r
}

// Tranche d&#39;effectifs minimale de l&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/static-resources/documentation/v_sommaire_311.htm#73).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
func (r ApiRecherchePublicationsRequest) TrancheEffectifMin(trancheEffectifMin string) ApiRecherchePublicationsRequest {
	r.trancheEffectifMin = &trancheEffectifMin
	return r
}

// Tranche d&#39;effectifs maximale de l&#39;entreprise, selon la [nomenclature Sirene](https://www.sirene.fr/static-resources/documentation/v_sommaire_311.htm#73).  **Note** : 00 ou NN donneront les mêmes résultats et veulent dire non employeur
func (r ApiRecherchePublicationsRequest) TrancheEffectifMax(trancheEffectifMax string) ApiRecherchePublicationsRequest {
	r.trancheEffectifMax = &trancheEffectifMax
	return r
}

// Type du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRecherchePublicationsRequest) TypeDirigeant(typeDirigeant string) ApiRecherchePublicationsRequest {
	r.typeDirigeant = &typeDirigeant
	return r
}

// Qualité du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRecherchePublicationsRequest) QualiteDirigeant(qualiteDirigeant string) ApiRecherchePublicationsRequest {
	r.qualiteDirigeant = &qualiteDirigeant
	return r
}

// Nationalité du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRecherchePublicationsRequest) NationaliteDirigeant(nationaliteDirigeant string) ApiRecherchePublicationsRequest {
	r.nationaliteDirigeant = &nationaliteDirigeant
	return r
}

// Nom du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRecherchePublicationsRequest) NomDirigeant(nomDirigeant string) ApiRecherchePublicationsRequest {
	r.nomDirigeant = &nomDirigeant
	return r
}

// Prénom du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRecherchePublicationsRequest) PrenomDirigeant(prenomDirigeant string) ApiRecherchePublicationsRequest {
	r.prenomDirigeant = &prenomDirigeant
	return r
}

// Âge minimal du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRecherchePublicationsRequest) AgeDirigeantMin(ageDirigeantMin int32) ApiRecherchePublicationsRequest {
	r.ageDirigeantMin = &ageDirigeantMin
	return r
}

// Âge maximal du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRecherchePublicationsRequest) AgeDirigeantMax(ageDirigeantMax int32) ApiRecherchePublicationsRequest {
	r.ageDirigeantMax = &ageDirigeantMax
	return r
}

// Date de naissance minimale du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises), au format JJ-MM-AAAA.
func (r ApiRecherchePublicationsRequest) DateDeNaissanceDirigeantMin(dateDeNaissanceDirigeantMin string) ApiRecherchePublicationsRequest {
	r.dateDeNaissanceDirigeantMin = &dateDeNaissanceDirigeantMin
	return r
}

// Date de naissance maximale du dirigeant (ou de l&#39;un des dirigeants de l&#39;entreprise pour une recherche d&#39;entreprises) de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRecherchePublicationsRequest) DateDeNaissanceDirigeantMax(dateDeNaissanceDirigeantMax string) ApiRecherchePublicationsRequest {
	r.dateDeNaissanceDirigeantMax = &dateDeNaissanceDirigeantMax
	return r
}

// Âge minimal du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRecherchePublicationsRequest) AgeBeneficiaireMin(ageBeneficiaireMin int32) ApiRecherchePublicationsRequest {
	r.ageBeneficiaireMin = &ageBeneficiaireMin
	return r
}

// Âge maximal du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRecherchePublicationsRequest) AgeBeneficiaireMax(ageBeneficiaireMax int32) ApiRecherchePublicationsRequest {
	r.ageBeneficiaireMax = &ageBeneficiaireMax
	return r
}

// Date de naissance minimale du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises), au format JJ-MM-AAAA.
func (r ApiRecherchePublicationsRequest) DateDeNaissanceBeneficiaireMin(dateDeNaissanceBeneficiaireMin string) ApiRecherchePublicationsRequest {
	r.dateDeNaissanceBeneficiaireMin = &dateDeNaissanceBeneficiaireMin
	return r
}

// Date de naissance maximale du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises) de l&#39;entreprise, au format JJ-MM-AAAA.
func (r ApiRecherchePublicationsRequest) DateDeNaissanceBeneficiaireMax(dateDeNaissanceBeneficiaireMax string) ApiRecherchePublicationsRequest {
	r.dateDeNaissanceBeneficiaireMax = &dateDeNaissanceBeneficiaireMax
	return r
}

// Nationalité du bénéficiaire effectif (ou de l&#39;un des bénéficiaires effectifs de l&#39;entreprise pour une recherche d&#39;entreprises).
func (r ApiRecherchePublicationsRequest) NationaliteBeneficiaire(nationaliteBeneficiaire string) ApiRecherchePublicationsRequest {
	r.nationaliteBeneficiaire = &nationaliteBeneficiaire
	return r
}

// Date de dépôt minimale du document, au format JJ-MM-AAAA.
func (r ApiRecherchePublicationsRequest) DateDepotDocumentMin(dateDepotDocumentMin string) ApiRecherchePublicationsRequest {
	r.dateDepotDocumentMin = &dateDepotDocumentMin
	return r
}

// Date de dépôt maximale du document, au format JJ-MM-AAAA.
func (r ApiRecherchePublicationsRequest) DateDepotDocumentMax(dateDepotDocumentMax string) ApiRecherchePublicationsRequest {
	r.dateDepotDocumentMax = &dateDepotDocumentMax
	return r
}

// Type de publication
func (r ApiRecherchePublicationsRequest) TypePublication(typePublication string) ApiRecherchePublicationsRequest {
	r.typePublication = &typePublication
	return r
}

// Date publication minimale de la publication, au format JJ-MM-AAAA.
func (r ApiRecherchePublicationsRequest) DatePublicationMin(datePublicationMin string) ApiRecherchePublicationsRequest {
	r.datePublicationMin = &datePublicationMin
	return r
}

// Date de publication maximale de la publication, au format JJ-MM-AAAA.
func (r ApiRecherchePublicationsRequest) DatePublicationMax(datePublicationMax string) ApiRecherchePublicationsRequest {
	r.datePublicationMax = &datePublicationMax
	return r
}

// SIREN de l&#39;entreprise.
func (r ApiRecherchePublicationsRequest) Siren(siren string) ApiRecherchePublicationsRequest {
	r.siren = &siren
	return r
}

func (r ApiRecherchePublicationsRequest) Execute() (*RecherchePublications200Response, *http.Response, error) {
	return r.ApiService.RecherchePublicationsExecute(r)
}

/*
RecherchePublications Recherche les publications BODACC qui correspondent à des critères.

Tous les paramètres sont optionnels et servent à filtrer la recherche. Les différentes publications seront renvoyées dans un tableau `resultats`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRecherchePublicationsRequest
*/
func (a *RechercheAPIService) RecherchePublications(ctx context.Context) ApiRecherchePublicationsRequest {
	return ApiRecherchePublicationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RecherchePublications200Response
func (a *RechercheAPIService) RecherchePublicationsExecute(r ApiRecherchePublicationsRequest) (*RecherchePublications200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecherchePublications200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RechercheAPIService.RecherchePublications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recherche-publications"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.parPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "par_page", r.parPage, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.precision != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "precision", r.precision, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.codeNaf != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code_naf", r.codeNaf, "form", "")
	}
	if r.departement != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departement", r.departement, "form", "")
	}
	if r.region != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "region", r.region, "form", "")
	}
	if r.codePostal != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code_postal", r.codePostal, "form", "")
	}
	if r.conventionCollective != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "convention_collective", r.conventionCollective, "form", "")
	}
	if r.categorieJuridique != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "categorie_juridique", r.categorieJuridique, "form", "")
	}
	if r.entrepriseCessee != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "entreprise_cessee", r.entrepriseCessee, "form", "")
	}
	if r.statutRcs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "statut_rcs", r.statutRcs, "form", "")
	}
	if r.objetSocial != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "objet_social", r.objetSocial, "form", "")
	}
	if r.dateImmatriculationRcsMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_immatriculation_rcs_min", r.dateImmatriculationRcsMin, "form", "")
	}
	if r.dateImmatriculationRcsMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_immatriculation_rcs_max", r.dateImmatriculationRcsMax, "form", "")
	}
	if r.dateRadiationRcsMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_radiation_rcs_min", r.dateRadiationRcsMin, "form", "")
	}
	if r.dateRadiationRcsMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_radiation_rcs_max", r.dateRadiationRcsMax, "form", "")
	}
	if r.capitalMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "capital_min", r.capitalMin, "form", "")
	}
	if r.capitalMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "capital_max", r.capitalMax, "form", "")
	}
	if r.chiffreAffairesMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chiffre_affaires_min", r.chiffreAffairesMin, "form", "")
	}
	if r.chiffreAffairesMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chiffre_affaires_max", r.chiffreAffairesMax, "form", "")
	}
	if r.resultatMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resultat_min", r.resultatMin, "form", "")
	}
	if r.resultatMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resultat_max", r.resultatMax, "form", "")
	}
	if r.dateCreationMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_creation_min", r.dateCreationMin, "form", "")
	}
	if r.dateCreationMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_creation_max", r.dateCreationMax, "form", "")
	}
	if r.trancheEffectifMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tranche_effectif_min", r.trancheEffectifMin, "form", "")
	}
	if r.trancheEffectifMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tranche_effectif_max", r.trancheEffectifMax, "form", "")
	}
	if r.typeDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_dirigeant", r.typeDirigeant, "form", "")
	}
	if r.qualiteDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "qualite_dirigeant", r.qualiteDirigeant, "form", "")
	}
	if r.nationaliteDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nationalite_dirigeant", r.nationaliteDirigeant, "form", "")
	}
	if r.nomDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nom_dirigeant", r.nomDirigeant, "form", "")
	}
	if r.prenomDirigeant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prenom_dirigeant", r.prenomDirigeant, "form", "")
	}
	if r.ageDirigeantMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_dirigeant_min", r.ageDirigeantMin, "form", "")
	}
	if r.ageDirigeantMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_dirigeant_max", r.ageDirigeantMax, "form", "")
	}
	if r.dateDeNaissanceDirigeantMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_dirigeant_min", r.dateDeNaissanceDirigeantMin, "form", "")
	}
	if r.dateDeNaissanceDirigeantMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_dirigeant_max", r.dateDeNaissanceDirigeantMax, "form", "")
	}
	if r.ageBeneficiaireMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_beneficiaire_min", r.ageBeneficiaireMin, "form", "")
	}
	if r.ageBeneficiaireMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "age_beneficiaire_max", r.ageBeneficiaireMax, "form", "")
	}
	if r.dateDeNaissanceBeneficiaireMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_beneficiaire_min", r.dateDeNaissanceBeneficiaireMin, "form", "")
	}
	if r.dateDeNaissanceBeneficiaireMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_de_naissance_beneficiaire_max", r.dateDeNaissanceBeneficiaireMax, "form", "")
	}
	if r.nationaliteBeneficiaire != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nationalite_beneficiaire", r.nationaliteBeneficiaire, "form", "")
	}
	if r.dateDepotDocumentMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_depot_document_min", r.dateDepotDocumentMin, "form", "")
	}
	if r.dateDepotDocumentMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_depot_document_max", r.dateDepotDocumentMax, "form", "")
	}
	if r.typePublication != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_publication", r.typePublication, "form", "")
	}
	if r.datePublicationMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_publication_min", r.datePublicationMin, "form", "")
	}
	if r.datePublicationMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date_publication_max", r.datePublicationMax, "form", "")
	}
	if r.siren != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "siren", r.siren, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
