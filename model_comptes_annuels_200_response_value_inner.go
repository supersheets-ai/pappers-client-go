/*
Pappers API

L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, soit via le header `api-key`, soit (déconseillé) en utilisant le paramètre query `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V3 : https://www.pappers.fr/api/documentation/v3  Lien vers la documentation de l'API internationale : https://www.pappers.in/api/documentation  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 

API version: 2.16.0
Contact: support@pappers.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ComptesAnnuels200ResponseValueInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComptesAnnuels200ResponseValueInner{}

// ComptesAnnuels200ResponseValueInner Année
type ComptesAnnuels200ResponseValueInner struct {
	// Date de dépôt des comptes, au format AAAA-MM-JJ.
	DateDepot *string `json:"date_depot,omitempty"`
	// Code du greffe de dépôt des comptes.
	CodeGreffe *string `json:"code_greffe,omitempty"`
	// Numéro de dépôt des comptes au greffe.
	NumeroDepot *string `json:"numero_depot,omitempty"`
	// Numéro de gestion au greffe.
	NumeroGestion *string `json:"numero_gestion,omitempty"`
	// Date de cloture des comptes, au format AAAA-MM-JJ.
	DateCloture *string `json:"date_cloture,omitempty"`
	// Date de cloture des comptes n-1, lorsque présents, au format AAAA-MM-JJ.
	DateClotureN1 *string `json:"date_cloture_n-1,omitempty"`
	// Durée de l'exercice déposé, en mois.
	DureeExerciceN *int32 `json:"duree_exercice_n,omitempty"`
	// Durée de l'exercice précédent, lorsque présent, en mois.
	DureeExerciceN1 *int32 `json:"duree_exercice_n-1,omitempty"`
	// Type de comptes (C = complets ; S = simplifiés ; K = consolidés ; CS = mélange complets/simplifiés ; B = banques ; A = assurances).
	TypeComptes *string `json:"type_comptes,omitempty"`
	// Libellé du type de comptes.
	LibelleTypeComptes *string `json:"libelle_type_comptes,omitempty"`
	// Devise des comptes.
	Devise *string `json:"devise,omitempty"`
	// Devise d'origine en cas de conversion.
	DeviseOrigine *string `json:"devise_origine,omitempty"`
	// Confidentialité totale des comptes.
	Confidentialite *bool `json:"confidentialite,omitempty"`
	// Confidentialité partielle des comptes (seul le compte de résultat est confidentiel, le reste des comptes sont disponibles).
	ConfidentialiteCompteDeResultat *bool `json:"confidentialite_compte_de_resultat,omitempty"`
	// Vrai si les comptes sont cohérents d'un point de vue comptable (équilibre du bilan par exemple).
	CoherenceComptable *bool `json:"coherence_comptable,omitempty"`
	// Description du type de saisie des comptes.
	TypeSaisie *string `json:"type_saisie,omitempty"`
	// Informations complémentaires sur le traitement des comptes.
	InformationsTraitement []string `json:"informations_traitement,omitempty"`
	// Liste des sections de liasses fiscales.
	Sections []ComptesAnnuels200ResponseValueInnerSectionsInner `json:"sections,omitempty"`
	Ratios *Ratios `json:"ratios,omitempty"`
}

// NewComptesAnnuels200ResponseValueInner instantiates a new ComptesAnnuels200ResponseValueInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComptesAnnuels200ResponseValueInner() *ComptesAnnuels200ResponseValueInner {
	this := ComptesAnnuels200ResponseValueInner{}
	return &this
}

// NewComptesAnnuels200ResponseValueInnerWithDefaults instantiates a new ComptesAnnuels200ResponseValueInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComptesAnnuels200ResponseValueInnerWithDefaults() *ComptesAnnuels200ResponseValueInner {
	this := ComptesAnnuels200ResponseValueInner{}
	return &this
}

// GetDateDepot returns the DateDepot field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetDateDepot() string {
	if o == nil || IsNil(o.DateDepot) {
		var ret string
		return ret
	}
	return *o.DateDepot
}

// GetDateDepotOk returns a tuple with the DateDepot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetDateDepotOk() (*string, bool) {
	if o == nil || IsNil(o.DateDepot) {
		return nil, false
	}
	return o.DateDepot, true
}

// HasDateDepot returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasDateDepot() bool {
	if o != nil && !IsNil(o.DateDepot) {
		return true
	}

	return false
}

// SetDateDepot gets a reference to the given string and assigns it to the DateDepot field.
func (o *ComptesAnnuels200ResponseValueInner) SetDateDepot(v string) {
	o.DateDepot = &v
}

// GetCodeGreffe returns the CodeGreffe field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetCodeGreffe() string {
	if o == nil || IsNil(o.CodeGreffe) {
		var ret string
		return ret
	}
	return *o.CodeGreffe
}

// GetCodeGreffeOk returns a tuple with the CodeGreffe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetCodeGreffeOk() (*string, bool) {
	if o == nil || IsNil(o.CodeGreffe) {
		return nil, false
	}
	return o.CodeGreffe, true
}

// HasCodeGreffe returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasCodeGreffe() bool {
	if o != nil && !IsNil(o.CodeGreffe) {
		return true
	}

	return false
}

// SetCodeGreffe gets a reference to the given string and assigns it to the CodeGreffe field.
func (o *ComptesAnnuels200ResponseValueInner) SetCodeGreffe(v string) {
	o.CodeGreffe = &v
}

// GetNumeroDepot returns the NumeroDepot field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetNumeroDepot() string {
	if o == nil || IsNil(o.NumeroDepot) {
		var ret string
		return ret
	}
	return *o.NumeroDepot
}

// GetNumeroDepotOk returns a tuple with the NumeroDepot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetNumeroDepotOk() (*string, bool) {
	if o == nil || IsNil(o.NumeroDepot) {
		return nil, false
	}
	return o.NumeroDepot, true
}

// HasNumeroDepot returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasNumeroDepot() bool {
	if o != nil && !IsNil(o.NumeroDepot) {
		return true
	}

	return false
}

// SetNumeroDepot gets a reference to the given string and assigns it to the NumeroDepot field.
func (o *ComptesAnnuels200ResponseValueInner) SetNumeroDepot(v string) {
	o.NumeroDepot = &v
}

// GetNumeroGestion returns the NumeroGestion field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetNumeroGestion() string {
	if o == nil || IsNil(o.NumeroGestion) {
		var ret string
		return ret
	}
	return *o.NumeroGestion
}

// GetNumeroGestionOk returns a tuple with the NumeroGestion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetNumeroGestionOk() (*string, bool) {
	if o == nil || IsNil(o.NumeroGestion) {
		return nil, false
	}
	return o.NumeroGestion, true
}

// HasNumeroGestion returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasNumeroGestion() bool {
	if o != nil && !IsNil(o.NumeroGestion) {
		return true
	}

	return false
}

// SetNumeroGestion gets a reference to the given string and assigns it to the NumeroGestion field.
func (o *ComptesAnnuels200ResponseValueInner) SetNumeroGestion(v string) {
	o.NumeroGestion = &v
}

// GetDateCloture returns the DateCloture field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetDateCloture() string {
	if o == nil || IsNil(o.DateCloture) {
		var ret string
		return ret
	}
	return *o.DateCloture
}

// GetDateClotureOk returns a tuple with the DateCloture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetDateClotureOk() (*string, bool) {
	if o == nil || IsNil(o.DateCloture) {
		return nil, false
	}
	return o.DateCloture, true
}

// HasDateCloture returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasDateCloture() bool {
	if o != nil && !IsNil(o.DateCloture) {
		return true
	}

	return false
}

// SetDateCloture gets a reference to the given string and assigns it to the DateCloture field.
func (o *ComptesAnnuels200ResponseValueInner) SetDateCloture(v string) {
	o.DateCloture = &v
}

// GetDateClotureN1 returns the DateClotureN1 field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetDateClotureN1() string {
	if o == nil || IsNil(o.DateClotureN1) {
		var ret string
		return ret
	}
	return *o.DateClotureN1
}

// GetDateClotureN1Ok returns a tuple with the DateClotureN1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetDateClotureN1Ok() (*string, bool) {
	if o == nil || IsNil(o.DateClotureN1) {
		return nil, false
	}
	return o.DateClotureN1, true
}

// HasDateClotureN1 returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasDateClotureN1() bool {
	if o != nil && !IsNil(o.DateClotureN1) {
		return true
	}

	return false
}

// SetDateClotureN1 gets a reference to the given string and assigns it to the DateClotureN1 field.
func (o *ComptesAnnuels200ResponseValueInner) SetDateClotureN1(v string) {
	o.DateClotureN1 = &v
}

// GetDureeExerciceN returns the DureeExerciceN field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetDureeExerciceN() int32 {
	if o == nil || IsNil(o.DureeExerciceN) {
		var ret int32
		return ret
	}
	return *o.DureeExerciceN
}

// GetDureeExerciceNOk returns a tuple with the DureeExerciceN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetDureeExerciceNOk() (*int32, bool) {
	if o == nil || IsNil(o.DureeExerciceN) {
		return nil, false
	}
	return o.DureeExerciceN, true
}

// HasDureeExerciceN returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasDureeExerciceN() bool {
	if o != nil && !IsNil(o.DureeExerciceN) {
		return true
	}

	return false
}

// SetDureeExerciceN gets a reference to the given int32 and assigns it to the DureeExerciceN field.
func (o *ComptesAnnuels200ResponseValueInner) SetDureeExerciceN(v int32) {
	o.DureeExerciceN = &v
}

// GetDureeExerciceN1 returns the DureeExerciceN1 field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetDureeExerciceN1() int32 {
	if o == nil || IsNil(o.DureeExerciceN1) {
		var ret int32
		return ret
	}
	return *o.DureeExerciceN1
}

// GetDureeExerciceN1Ok returns a tuple with the DureeExerciceN1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetDureeExerciceN1Ok() (*int32, bool) {
	if o == nil || IsNil(o.DureeExerciceN1) {
		return nil, false
	}
	return o.DureeExerciceN1, true
}

// HasDureeExerciceN1 returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasDureeExerciceN1() bool {
	if o != nil && !IsNil(o.DureeExerciceN1) {
		return true
	}

	return false
}

// SetDureeExerciceN1 gets a reference to the given int32 and assigns it to the DureeExerciceN1 field.
func (o *ComptesAnnuels200ResponseValueInner) SetDureeExerciceN1(v int32) {
	o.DureeExerciceN1 = &v
}

// GetTypeComptes returns the TypeComptes field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetTypeComptes() string {
	if o == nil || IsNil(o.TypeComptes) {
		var ret string
		return ret
	}
	return *o.TypeComptes
}

// GetTypeComptesOk returns a tuple with the TypeComptes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetTypeComptesOk() (*string, bool) {
	if o == nil || IsNil(o.TypeComptes) {
		return nil, false
	}
	return o.TypeComptes, true
}

// HasTypeComptes returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasTypeComptes() bool {
	if o != nil && !IsNil(o.TypeComptes) {
		return true
	}

	return false
}

// SetTypeComptes gets a reference to the given string and assigns it to the TypeComptes field.
func (o *ComptesAnnuels200ResponseValueInner) SetTypeComptes(v string) {
	o.TypeComptes = &v
}

// GetLibelleTypeComptes returns the LibelleTypeComptes field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetLibelleTypeComptes() string {
	if o == nil || IsNil(o.LibelleTypeComptes) {
		var ret string
		return ret
	}
	return *o.LibelleTypeComptes
}

// GetLibelleTypeComptesOk returns a tuple with the LibelleTypeComptes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetLibelleTypeComptesOk() (*string, bool) {
	if o == nil || IsNil(o.LibelleTypeComptes) {
		return nil, false
	}
	return o.LibelleTypeComptes, true
}

// HasLibelleTypeComptes returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasLibelleTypeComptes() bool {
	if o != nil && !IsNil(o.LibelleTypeComptes) {
		return true
	}

	return false
}

// SetLibelleTypeComptes gets a reference to the given string and assigns it to the LibelleTypeComptes field.
func (o *ComptesAnnuels200ResponseValueInner) SetLibelleTypeComptes(v string) {
	o.LibelleTypeComptes = &v
}

// GetDevise returns the Devise field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetDevise() string {
	if o == nil || IsNil(o.Devise) {
		var ret string
		return ret
	}
	return *o.Devise
}

// GetDeviseOk returns a tuple with the Devise field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetDeviseOk() (*string, bool) {
	if o == nil || IsNil(o.Devise) {
		return nil, false
	}
	return o.Devise, true
}

// HasDevise returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasDevise() bool {
	if o != nil && !IsNil(o.Devise) {
		return true
	}

	return false
}

// SetDevise gets a reference to the given string and assigns it to the Devise field.
func (o *ComptesAnnuels200ResponseValueInner) SetDevise(v string) {
	o.Devise = &v
}

// GetDeviseOrigine returns the DeviseOrigine field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetDeviseOrigine() string {
	if o == nil || IsNil(o.DeviseOrigine) {
		var ret string
		return ret
	}
	return *o.DeviseOrigine
}

// GetDeviseOrigineOk returns a tuple with the DeviseOrigine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetDeviseOrigineOk() (*string, bool) {
	if o == nil || IsNil(o.DeviseOrigine) {
		return nil, false
	}
	return o.DeviseOrigine, true
}

// HasDeviseOrigine returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasDeviseOrigine() bool {
	if o != nil && !IsNil(o.DeviseOrigine) {
		return true
	}

	return false
}

// SetDeviseOrigine gets a reference to the given string and assigns it to the DeviseOrigine field.
func (o *ComptesAnnuels200ResponseValueInner) SetDeviseOrigine(v string) {
	o.DeviseOrigine = &v
}

// GetConfidentialite returns the Confidentialite field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetConfidentialite() bool {
	if o == nil || IsNil(o.Confidentialite) {
		var ret bool
		return ret
	}
	return *o.Confidentialite
}

// GetConfidentialiteOk returns a tuple with the Confidentialite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetConfidentialiteOk() (*bool, bool) {
	if o == nil || IsNil(o.Confidentialite) {
		return nil, false
	}
	return o.Confidentialite, true
}

// HasConfidentialite returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasConfidentialite() bool {
	if o != nil && !IsNil(o.Confidentialite) {
		return true
	}

	return false
}

// SetConfidentialite gets a reference to the given bool and assigns it to the Confidentialite field.
func (o *ComptesAnnuels200ResponseValueInner) SetConfidentialite(v bool) {
	o.Confidentialite = &v
}

// GetConfidentialiteCompteDeResultat returns the ConfidentialiteCompteDeResultat field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetConfidentialiteCompteDeResultat() bool {
	if o == nil || IsNil(o.ConfidentialiteCompteDeResultat) {
		var ret bool
		return ret
	}
	return *o.ConfidentialiteCompteDeResultat
}

// GetConfidentialiteCompteDeResultatOk returns a tuple with the ConfidentialiteCompteDeResultat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetConfidentialiteCompteDeResultatOk() (*bool, bool) {
	if o == nil || IsNil(o.ConfidentialiteCompteDeResultat) {
		return nil, false
	}
	return o.ConfidentialiteCompteDeResultat, true
}

// HasConfidentialiteCompteDeResultat returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasConfidentialiteCompteDeResultat() bool {
	if o != nil && !IsNil(o.ConfidentialiteCompteDeResultat) {
		return true
	}

	return false
}

// SetConfidentialiteCompteDeResultat gets a reference to the given bool and assigns it to the ConfidentialiteCompteDeResultat field.
func (o *ComptesAnnuels200ResponseValueInner) SetConfidentialiteCompteDeResultat(v bool) {
	o.ConfidentialiteCompteDeResultat = &v
}

// GetCoherenceComptable returns the CoherenceComptable field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetCoherenceComptable() bool {
	if o == nil || IsNil(o.CoherenceComptable) {
		var ret bool
		return ret
	}
	return *o.CoherenceComptable
}

// GetCoherenceComptableOk returns a tuple with the CoherenceComptable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetCoherenceComptableOk() (*bool, bool) {
	if o == nil || IsNil(o.CoherenceComptable) {
		return nil, false
	}
	return o.CoherenceComptable, true
}

// HasCoherenceComptable returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasCoherenceComptable() bool {
	if o != nil && !IsNil(o.CoherenceComptable) {
		return true
	}

	return false
}

// SetCoherenceComptable gets a reference to the given bool and assigns it to the CoherenceComptable field.
func (o *ComptesAnnuels200ResponseValueInner) SetCoherenceComptable(v bool) {
	o.CoherenceComptable = &v
}

// GetTypeSaisie returns the TypeSaisie field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetTypeSaisie() string {
	if o == nil || IsNil(o.TypeSaisie) {
		var ret string
		return ret
	}
	return *o.TypeSaisie
}

// GetTypeSaisieOk returns a tuple with the TypeSaisie field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetTypeSaisieOk() (*string, bool) {
	if o == nil || IsNil(o.TypeSaisie) {
		return nil, false
	}
	return o.TypeSaisie, true
}

// HasTypeSaisie returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasTypeSaisie() bool {
	if o != nil && !IsNil(o.TypeSaisie) {
		return true
	}

	return false
}

// SetTypeSaisie gets a reference to the given string and assigns it to the TypeSaisie field.
func (o *ComptesAnnuels200ResponseValueInner) SetTypeSaisie(v string) {
	o.TypeSaisie = &v
}

// GetInformationsTraitement returns the InformationsTraitement field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetInformationsTraitement() []string {
	if o == nil || IsNil(o.InformationsTraitement) {
		var ret []string
		return ret
	}
	return o.InformationsTraitement
}

// GetInformationsTraitementOk returns a tuple with the InformationsTraitement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetInformationsTraitementOk() ([]string, bool) {
	if o == nil || IsNil(o.InformationsTraitement) {
		return nil, false
	}
	return o.InformationsTraitement, true
}

// HasInformationsTraitement returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasInformationsTraitement() bool {
	if o != nil && !IsNil(o.InformationsTraitement) {
		return true
	}

	return false
}

// SetInformationsTraitement gets a reference to the given []string and assigns it to the InformationsTraitement field.
func (o *ComptesAnnuels200ResponseValueInner) SetInformationsTraitement(v []string) {
	o.InformationsTraitement = v
}

// GetSections returns the Sections field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetSections() []ComptesAnnuels200ResponseValueInnerSectionsInner {
	if o == nil || IsNil(o.Sections) {
		var ret []ComptesAnnuels200ResponseValueInnerSectionsInner
		return ret
	}
	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetSectionsOk() ([]ComptesAnnuels200ResponseValueInnerSectionsInner, bool) {
	if o == nil || IsNil(o.Sections) {
		return nil, false
	}
	return o.Sections, true
}

// HasSections returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasSections() bool {
	if o != nil && !IsNil(o.Sections) {
		return true
	}

	return false
}

// SetSections gets a reference to the given []ComptesAnnuels200ResponseValueInnerSectionsInner and assigns it to the Sections field.
func (o *ComptesAnnuels200ResponseValueInner) SetSections(v []ComptesAnnuels200ResponseValueInnerSectionsInner) {
	o.Sections = v
}

// GetRatios returns the Ratios field value if set, zero value otherwise.
func (o *ComptesAnnuels200ResponseValueInner) GetRatios() Ratios {
	if o == nil || IsNil(o.Ratios) {
		var ret Ratios
		return ret
	}
	return *o.Ratios
}

// GetRatiosOk returns a tuple with the Ratios field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComptesAnnuels200ResponseValueInner) GetRatiosOk() (*Ratios, bool) {
	if o == nil || IsNil(o.Ratios) {
		return nil, false
	}
	return o.Ratios, true
}

// HasRatios returns a boolean if a field has been set.
func (o *ComptesAnnuels200ResponseValueInner) HasRatios() bool {
	if o != nil && !IsNil(o.Ratios) {
		return true
	}

	return false
}

// SetRatios gets a reference to the given Ratios and assigns it to the Ratios field.
func (o *ComptesAnnuels200ResponseValueInner) SetRatios(v Ratios) {
	o.Ratios = &v
}

func (o ComptesAnnuels200ResponseValueInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComptesAnnuels200ResponseValueInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateDepot) {
		toSerialize["date_depot"] = o.DateDepot
	}
	if !IsNil(o.CodeGreffe) {
		toSerialize["code_greffe"] = o.CodeGreffe
	}
	if !IsNil(o.NumeroDepot) {
		toSerialize["numero_depot"] = o.NumeroDepot
	}
	if !IsNil(o.NumeroGestion) {
		toSerialize["numero_gestion"] = o.NumeroGestion
	}
	if !IsNil(o.DateCloture) {
		toSerialize["date_cloture"] = o.DateCloture
	}
	if !IsNil(o.DateClotureN1) {
		toSerialize["date_cloture_n-1"] = o.DateClotureN1
	}
	if !IsNil(o.DureeExerciceN) {
		toSerialize["duree_exercice_n"] = o.DureeExerciceN
	}
	if !IsNil(o.DureeExerciceN1) {
		toSerialize["duree_exercice_n-1"] = o.DureeExerciceN1
	}
	if !IsNil(o.TypeComptes) {
		toSerialize["type_comptes"] = o.TypeComptes
	}
	if !IsNil(o.LibelleTypeComptes) {
		toSerialize["libelle_type_comptes"] = o.LibelleTypeComptes
	}
	if !IsNil(o.Devise) {
		toSerialize["devise"] = o.Devise
	}
	if !IsNil(o.DeviseOrigine) {
		toSerialize["devise_origine"] = o.DeviseOrigine
	}
	if !IsNil(o.Confidentialite) {
		toSerialize["confidentialite"] = o.Confidentialite
	}
	if !IsNil(o.ConfidentialiteCompteDeResultat) {
		toSerialize["confidentialite_compte_de_resultat"] = o.ConfidentialiteCompteDeResultat
	}
	if !IsNil(o.CoherenceComptable) {
		toSerialize["coherence_comptable"] = o.CoherenceComptable
	}
	if !IsNil(o.TypeSaisie) {
		toSerialize["type_saisie"] = o.TypeSaisie
	}
	if !IsNil(o.InformationsTraitement) {
		toSerialize["informations_traitement"] = o.InformationsTraitement
	}
	if !IsNil(o.Sections) {
		toSerialize["sections"] = o.Sections
	}
	if !IsNil(o.Ratios) {
		toSerialize["ratios"] = o.Ratios
	}
	return toSerialize, nil
}

type NullableComptesAnnuels200ResponseValueInner struct {
	value *ComptesAnnuels200ResponseValueInner
	isSet bool
}

func (v NullableComptesAnnuels200ResponseValueInner) Get() *ComptesAnnuels200ResponseValueInner {
	return v.value
}

func (v *NullableComptesAnnuels200ResponseValueInner) Set(val *ComptesAnnuels200ResponseValueInner) {
	v.value = val
	v.isSet = true
}

func (v NullableComptesAnnuels200ResponseValueInner) IsSet() bool {
	return v.isSet
}

func (v *NullableComptesAnnuels200ResponseValueInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComptesAnnuels200ResponseValueInner(val *ComptesAnnuels200ResponseValueInner) *NullableComptesAnnuels200ResponseValueInner {
	return &NullableComptesAnnuels200ResponseValueInner{value: val, isSet: true}
}

func (v NullableComptesAnnuels200ResponseValueInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComptesAnnuels200ResponseValueInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


